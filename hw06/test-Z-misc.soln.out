<class XVector>
<class ArrayXVector>
<class ConcatXVector>
<class RepeatXVector>
<class ReverseXVector>
<class SwizzleXVector>
<class BlockXVector>
<class Unit>
<class BlockFn1>
<class BlockFn2>
<class BlockFn3>
<class BlockFn4>
<class XVectorTester>
<class XVectorTesterMisc>

##########
Testing xv01
(debug xv01) => ArrayXVector(( 1 2 3 4 5 6 ))
(size xv01) => 6
(print xv01) => << 1 2 3 4 5 6 >>
(at:ifAbsent: xv01 xv01 0) => 1
(at:ifAbsent: xv01 xv01 1) => 2
(at:ifAbsent: xv01 xv01 2) => 3
(at:ifAbsent: xv01 xv01 3) => 4
(at:ifAbsent: xv01 xv01 4) => 5
(at:ifAbsent: xv01 xv01 5) => 6
(at:ifAbsent: xv01 7) => nil
(at:ifAbsent: xv01 8) => nil
(at:ifAbsent: xv01 9) => nil
(at:ifAbsent: xv01 1073741823) => nil
(at:ifAbsent: xv01 1073741824) => nil
(at:ifAbsent: xv01 1073741825) => nil
(at:ifAbsent: xv01 -5) => 2
(at:ifAbsent: xv01 -4) => 3
(at:ifAbsent: xv01 -3) => 4
(at:ifAbsent: xv01 -2) => 5
(at:ifAbsent: xv01 -1) => 6
(at:ifAbsent: xv01 -1073741825) => nil
(at:ifAbsent: xv01 -1073741824) => nil
(at:ifAbsent: xv01 -1073741823) => nil
(at:ifAbsent: xv01 -9) => nil
(at:ifAbsent: xv01 -8) => nil
(at:ifAbsent: xv01 -7) => nil
(allMag xv01) => <True>
(allNum xv01) => <True>
(allInt xv01) => <True>
(allFrac xv01) => <False>
(someFrac xv01) => <False>
(allFloat xv01) => <False>
(someFloat xv01) => <False>
(min xv01) => 1
(max xv01) => 6
(sum xv01) => 21
(product xv01) => 720
(includes: xv01 nil) => <False>
(occurrencesOf: xv01 nil) => 0
(includes: xv01 nil) => <False>
(occurrencesOf: xv01 nil) => 0
(includes: xv01 <True>) => <False>
(occurrencesOf: xv01 <True>) => 0
(includes: xv01 <False>) => <False>
(occurrencesOf: xv01 <False>) => 0
(includes: xv01 0) => <False>
(occurrencesOf: xv01 0) => 0
(includes: xv01 1) => <True>
(occurrencesOf: xv01 1) => 1
(includes: xv01 42) => <False>
(occurrencesOf: xv01 42) => 0
(detect:ifNone: xv01 negative) => nil
(detect:ifNone: xv01 nonnegative) => 1
(detect:ifNone: xv01 strictlyPositive) => 1
(= xv01 xv01) => <True>
(< xv01 xv01) => <False>
(<= xv01 xv01) => <True>
(> xv01 xv01) => <False>
(>= xv01 xv01) => <True>
(= xv01 nil) => <False>
(= xv01 nil) => <False>
(= xv01 <True>) => <False>
(= xv01 <False>) => <False>
(= xv01 0) => <False>
(= xv01 1) => <False>
(= xv01 42) => <False>
(fromIndex:toIndex: xv01 0 0) => << 1 >>
(fromIndex:toIndex: xv01 0 1) => << 1 2 >>
(fromIndex:toIndex: xv01 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv01 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv01 1 1) => << 2 >>
(fromIndex:toIndex: xv01 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv01 -1 -1) => << 6 >>
(fromIndex:toIndex: xv01 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv01 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv01 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv01 -2 -2) => << 5 >>
(fromIndex:toIndex: xv01 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv01 -1 0) => << 6 1 >>
(fromIndex:toIndex: xv01 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: xv01 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: xv01 -4 3) => << 3 4 >>
(fromIndex:toIndex: xv01 -5 4) => << 2 3 4 5 >>

##########
Testing xv02
(debug xv02) => ArrayXVector(( -6 -5 -5 -4 -2 -1 ))
(size xv02) => 6
(print xv02) => << -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv02 xv02 0) => -6
(at:ifAbsent: xv02 xv02 1) => -5
(at:ifAbsent: xv02 xv02 2) => -5
(at:ifAbsent: xv02 xv02 3) => -4
(at:ifAbsent: xv02 xv02 4) => -2
(at:ifAbsent: xv02 xv02 5) => -1
(at:ifAbsent: xv02 7) => nil
(at:ifAbsent: xv02 8) => nil
(at:ifAbsent: xv02 9) => nil
(at:ifAbsent: xv02 1073741823) => nil
(at:ifAbsent: xv02 1073741824) => nil
(at:ifAbsent: xv02 1073741825) => nil
(at:ifAbsent: xv02 -5) => -5
(at:ifAbsent: xv02 -4) => -5
(at:ifAbsent: xv02 -3) => -4
(at:ifAbsent: xv02 -2) => -2
(at:ifAbsent: xv02 -1) => -1
(at:ifAbsent: xv02 -1073741825) => nil
(at:ifAbsent: xv02 -1073741824) => nil
(at:ifAbsent: xv02 -1073741823) => nil
(at:ifAbsent: xv02 -9) => nil
(at:ifAbsent: xv02 -8) => nil
(at:ifAbsent: xv02 -7) => nil
(allMag xv02) => <True>
(allNum xv02) => <True>
(allInt xv02) => <True>
(allFrac xv02) => <False>
(someFrac xv02) => <False>
(allFloat xv02) => <False>
(someFloat xv02) => <False>
(min xv02) => -6
(max xv02) => -1
(sum xv02) => -23
(product xv02) => 1200
(includes: xv02 nil) => <False>
(occurrencesOf: xv02 nil) => 0
(includes: xv02 nil) => <False>
(occurrencesOf: xv02 nil) => 0
(includes: xv02 <True>) => <False>
(occurrencesOf: xv02 <True>) => 0
(includes: xv02 <False>) => <False>
(occurrencesOf: xv02 <False>) => 0
(includes: xv02 0) => <False>
(occurrencesOf: xv02 0) => 0
(includes: xv02 1) => <False>
(occurrencesOf: xv02 1) => 0
(includes: xv02 42) => <False>
(occurrencesOf: xv02 42) => 0
(detect:ifNone: xv02 negative) => -6
(detect:ifNone: xv02 nonnegative) => nil
(detect:ifNone: xv02 strictlyPositive) => nil
(= xv02 xv02) => <True>
(< xv02 xv02) => <False>
(<= xv02 xv02) => <True>
(> xv02 xv02) => <False>
(>= xv02 xv02) => <True>
(= xv02 nil) => <False>
(= xv02 nil) => <False>
(= xv02 <True>) => <False>
(= xv02 <False>) => <False>
(= xv02 0) => <False>
(= xv02 1) => <False>
(= xv02 42) => <False>
(fromIndex:toIndex: xv02 0 0) => << -6 >>
(fromIndex:toIndex: xv02 0 1) => << -6 -5 >>
(fromIndex:toIndex: xv02 0 2) => << -6 -5 -5 >>
(fromIndex:toIndex: xv02 0 4) => << -6 -5 -5 -4 -2 >>
(fromIndex:toIndex: xv02 1 1) => << -5 >>
(fromIndex:toIndex: xv02 1 3) => << -5 -5 -4 >>
(fromIndex:toIndex: xv02 -1 -1) => << -1 >>
(fromIndex:toIndex: xv02 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv02 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv02 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv02 -2 -2) => << -2 >>
(fromIndex:toIndex: xv02 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv02 -1 0) => << -1 -6 >>
(fromIndex:toIndex: xv02 -2 1) => << -2 -1 -6 -5 >>
(fromIndex:toIndex: xv02 -3 2) => << -4 -2 -1 -6 -5 -5 >>
(fromIndex:toIndex: xv02 -4 3) => << -5 -4 >>
(fromIndex:toIndex: xv02 -5 4) => << -5 -5 -4 -2 >>

##########
Testing xv03
(debug xv03) => ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))
(size xv03) => 12
(print xv03) => << 1 2 3 4 5 6 -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv03 xv03 0) => 1
(at:ifAbsent: xv03 xv03 1) => 2
(at:ifAbsent: xv03 xv03 2) => 3
(at:ifAbsent: xv03 xv03 3) => 4
(at:ifAbsent: xv03 xv03 4) => 5
(at:ifAbsent: xv03 xv03 5) => 6
(at:ifAbsent: xv03 7) => -5
(at:ifAbsent: xv03 8) => -5
(at:ifAbsent: xv03 9) => -4
(at:ifAbsent: xv03 1073741823) => nil
(at:ifAbsent: xv03 1073741824) => nil
(at:ifAbsent: xv03 1073741825) => nil
(at:ifAbsent: xv03 -5) => -5
(at:ifAbsent: xv03 -4) => -5
(at:ifAbsent: xv03 -3) => -4
(at:ifAbsent: xv03 -2) => -2
(at:ifAbsent: xv03 -1) => -1
(at:ifAbsent: xv03 -1073741825) => nil
(at:ifAbsent: xv03 -1073741824) => nil
(at:ifAbsent: xv03 -1073741823) => nil
(at:ifAbsent: xv03 -9) => 4
(at:ifAbsent: xv03 -8) => 5
(at:ifAbsent: xv03 -7) => 6
(allMag xv03) => <True>
(allNum xv03) => <True>
(allInt xv03) => <True>
(allFrac xv03) => <False>
(someFrac xv03) => <False>
(allFloat xv03) => <False>
(someFloat xv03) => <False>
(min xv03) => -6
(max xv03) => 6
(sum xv03) => -2
(product xv03) => 864000
(includes: xv03 nil) => <False>
(occurrencesOf: xv03 nil) => 0
(includes: xv03 nil) => <False>
(occurrencesOf: xv03 nil) => 0
(includes: xv03 <True>) => <False>
(occurrencesOf: xv03 <True>) => 0
(includes: xv03 <False>) => <False>
(occurrencesOf: xv03 <False>) => 0
(includes: xv03 0) => <False>
(occurrencesOf: xv03 0) => 0
(includes: xv03 1) => <True>
(occurrencesOf: xv03 1) => 1
(includes: xv03 42) => <False>
(occurrencesOf: xv03 42) => 0
(detect:ifNone: xv03 negative) => -6
(detect:ifNone: xv03 nonnegative) => 1
(detect:ifNone: xv03 strictlyPositive) => 1
(= xv03 xv03) => <True>
(< xv03 xv03) => <False>
(<= xv03 xv03) => <True>
(> xv03 xv03) => <False>
(>= xv03 xv03) => <True>
(= xv03 nil) => <False>
(= xv03 nil) => <False>
(= xv03 <True>) => <False>
(= xv03 <False>) => <False>
(= xv03 0) => <False>
(= xv03 1) => <False>
(= xv03 42) => <False>
(fromIndex:toIndex: xv03 0 0) => << 1 >>
(fromIndex:toIndex: xv03 0 1) => << 1 2 >>
(fromIndex:toIndex: xv03 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv03 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv03 1 1) => << 2 >>
(fromIndex:toIndex: xv03 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv03 -1 -1) => << -1 >>
(fromIndex:toIndex: xv03 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv03 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv03 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv03 -2 -2) => << -2 >>
(fromIndex:toIndex: xv03 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv03 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv03 -2 1) => << -2 -1 1 2 >>
(fromIndex:toIndex: xv03 -3 2) => << -4 -2 -1 1 2 3 >>
(fromIndex:toIndex: xv03 -4 3) => << -5 -4 -2 -1 1 2 3 4 >>
(fromIndex:toIndex: xv03 -5 4) => << -5 -5 -4 -2 -1 1 2 3 4 5 >>

##########
Testing xv04
(debug xv04) => RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),3)
(size xv04) => 18
(print xv04) => << 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 >>
(at:ifAbsent: xv04 xv04 0) => 1
(at:ifAbsent: xv04 xv04 1) => 2
(at:ifAbsent: xv04 xv04 2) => 3
(at:ifAbsent: xv04 xv04 3) => 4
(at:ifAbsent: xv04 xv04 4) => 5
(at:ifAbsent: xv04 xv04 5) => 6
(at:ifAbsent: xv04 7) => 2
(at:ifAbsent: xv04 8) => 3
(at:ifAbsent: xv04 9) => 4
(at:ifAbsent: xv04 1073741823) => nil
(at:ifAbsent: xv04 1073741824) => nil
(at:ifAbsent: xv04 1073741825) => nil
(at:ifAbsent: xv04 -5) => 2
(at:ifAbsent: xv04 -4) => 3
(at:ifAbsent: xv04 -3) => 4
(at:ifAbsent: xv04 -2) => 5
(at:ifAbsent: xv04 -1) => 6
(at:ifAbsent: xv04 -1073741825) => nil
(at:ifAbsent: xv04 -1073741824) => nil
(at:ifAbsent: xv04 -1073741823) => nil
(at:ifAbsent: xv04 -9) => 4
(at:ifAbsent: xv04 -8) => 5
(at:ifAbsent: xv04 -7) => 6
(allMag xv04) => <True>
(allNum xv04) => <True>
(allInt xv04) => <True>
(allFrac xv04) => <False>
(someFrac xv04) => <False>
(allFloat xv04) => <False>
(someFloat xv04) => <False>
(min xv04) => 1
(max xv04) => 6
(sum xv04) => 63
(product xv04) => 373248000
(includes: xv04 nil) => <False>
(occurrencesOf: xv04 nil) => 0
(includes: xv04 nil) => <False>
(occurrencesOf: xv04 nil) => 0
(includes: xv04 <True>) => <False>
(occurrencesOf: xv04 <True>) => 0
(includes: xv04 <False>) => <False>
(occurrencesOf: xv04 <False>) => 0
(includes: xv04 0) => <False>
(occurrencesOf: xv04 0) => 0
(includes: xv04 1) => <True>
(occurrencesOf: xv04 1) => 3
(includes: xv04 42) => <False>
(occurrencesOf: xv04 42) => 0
(detect:ifNone: xv04 negative) => nil
(detect:ifNone: xv04 nonnegative) => 1
(detect:ifNone: xv04 strictlyPositive) => 1
(= xv04 xv04) => <True>
(< xv04 xv04) => <False>
(<= xv04 xv04) => <True>
(> xv04 xv04) => <False>
(>= xv04 xv04) => <True>
(= xv04 nil) => <False>
(= xv04 nil) => <False>
(= xv04 <True>) => <False>
(= xv04 <False>) => <False>
(= xv04 0) => <False>
(= xv04 1) => <False>
(= xv04 42) => <False>
(fromIndex:toIndex: xv04 0 0) => << 1 >>
(fromIndex:toIndex: xv04 0 1) => << 1 2 >>
(fromIndex:toIndex: xv04 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv04 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv04 1 1) => << 2 >>
(fromIndex:toIndex: xv04 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv04 -1 -1) => << 6 >>
(fromIndex:toIndex: xv04 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv04 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv04 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv04 -2 -2) => << 5 >>
(fromIndex:toIndex: xv04 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv04 -1 0) => << 6 1 >>
(fromIndex:toIndex: xv04 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: xv04 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: xv04 -4 3) => << 3 4 5 6 1 2 3 4 >>
(fromIndex:toIndex: xv04 -5 4) => << 2 3 4 5 6 1 2 3 4 5 >>

##########
Testing xv05
(debug xv05) => RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),0)
(size xv05) => 0
(print xv05) => << >>
(at:ifAbsent: xv05 xv05 0) => nil
(at:ifAbsent: xv05 xv05 1) => nil
(at:ifAbsent: xv05 xv05 2) => nil
(at:ifAbsent: xv05 xv05 3) => nil
(at:ifAbsent: xv05 xv05 4) => nil
(at:ifAbsent: xv05 xv05 5) => nil
(at:ifAbsent: xv05 7) => nil
(at:ifAbsent: xv05 8) => nil
(at:ifAbsent: xv05 9) => nil
(at:ifAbsent: xv05 1073741823) => nil
(at:ifAbsent: xv05 1073741824) => nil
(at:ifAbsent: xv05 1073741825) => nil
(at:ifAbsent: xv05 -5) => nil
(at:ifAbsent: xv05 -4) => nil
(at:ifAbsent: xv05 -3) => nil
(at:ifAbsent: xv05 -2) => nil
(at:ifAbsent: xv05 -1) => nil
(at:ifAbsent: xv05 -1073741825) => nil
(at:ifAbsent: xv05 -1073741824) => nil
(at:ifAbsent: xv05 -1073741823) => nil
(at:ifAbsent: xv05 -9) => nil
(at:ifAbsent: xv05 -8) => nil
(at:ifAbsent: xv05 -7) => nil
(allMag xv05) => <True>
(allNum xv05) => <True>
(allInt xv05) => <True>
(allFrac xv05) => <True>
(someFrac xv05) => <False>
(allFloat xv05) => <True>
(someFloat xv05) => <False>
(sum xv05) => 0
(product xv05) => 1
(includes: xv05 nil) => <False>
(occurrencesOf: xv05 nil) => 0
(includes: xv05 nil) => <False>
(occurrencesOf: xv05 nil) => 0
(includes: xv05 <True>) => <False>
(occurrencesOf: xv05 <True>) => 0
(includes: xv05 <False>) => <False>
(occurrencesOf: xv05 <False>) => 0
(includes: xv05 0) => <False>
(occurrencesOf: xv05 0) => 0
(includes: xv05 1) => <False>
(occurrencesOf: xv05 1) => 0
(includes: xv05 42) => <False>
(occurrencesOf: xv05 42) => 0
(detect:ifNone: xv05 negative) => nil
(detect:ifNone: xv05 nonnegative) => nil
(detect:ifNone: xv05 strictlyPositive) => nil
(= xv05 xv05) => <True>
(< xv05 xv05) => <False>
(<= xv05 xv05) => <True>
(> xv05 xv05) => <False>
(>= xv05 xv05) => <True>
(= xv05 nil) => <False>
(= xv05 nil) => <False>
(= xv05 <True>) => <False>
(= xv05 <False>) => <False>
(= xv05 0) => <False>
(= xv05 1) => <False>
(= xv05 42) => <False>

##########
Testing xv06
(debug xv06) => RepeatXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),1000)
(size xv06) => 12000
(at:ifAbsent: xv06 xv06 0) => 1
(at:ifAbsent: xv06 xv06 1) => 2
(at:ifAbsent: xv06 xv06 2) => 3
(at:ifAbsent: xv06 xv06 3) => 4
(at:ifAbsent: xv06 xv06 4) => 5
(at:ifAbsent: xv06 xv06 5) => 6
(at:ifAbsent: xv06 7) => -5
(at:ifAbsent: xv06 8) => -5
(at:ifAbsent: xv06 9) => -4
(at:ifAbsent: xv06 1073741823) => nil
(at:ifAbsent: xv06 1073741824) => nil
(at:ifAbsent: xv06 1073741825) => nil
(at:ifAbsent: xv06 -5) => -5
(at:ifAbsent: xv06 -4) => -5
(at:ifAbsent: xv06 -3) => -4
(at:ifAbsent: xv06 -2) => -2
(at:ifAbsent: xv06 -1) => -1
(at:ifAbsent: xv06 -1073741825) => nil
(at:ifAbsent: xv06 -1073741824) => nil
(at:ifAbsent: xv06 -1073741823) => nil
(at:ifAbsent: xv06 -9) => 4
(at:ifAbsent: xv06 -8) => 5
(at:ifAbsent: xv06 -7) => 6
(= xv06 nil) => <False>
(= xv06 nil) => <False>
(= xv06 <True>) => <False>
(= xv06 <False>) => <False>
(= xv06 0) => <False>
(= xv06 1) => <False>
(= xv06 42) => <False>
(fromIndex:toIndex: xv06 0 0) => << 1 >>
(fromIndex:toIndex: xv06 0 1) => << 1 2 >>
(fromIndex:toIndex: xv06 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv06 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv06 1 1) => << 2 >>
(fromIndex:toIndex: xv06 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv06 -1 -1) => << -1 >>
(fromIndex:toIndex: xv06 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv06 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv06 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv06 -2 -2) => << -2 >>
(fromIndex:toIndex: xv06 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv06 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv06 -2 1) => << -2 -1 1 2 >>
(fromIndex:toIndex: xv06 -3 2) => << -4 -2 -1 1 2 3 >>
(fromIndex:toIndex: xv06 -4 3) => << -5 -4 -2 -1 1 2 3 4 >>
(fromIndex:toIndex: xv06 -5 4) => << -5 -5 -4 -2 -1 1 2 3 4 5 >>

##########
Testing xv07
(debug xv07) => ReverseXVector(ArrayXVector(( 1 2 3 4 5 6 )))
(size xv07) => 6
(print xv07) => << 6 5 4 3 2 1 >>
(at:ifAbsent: xv07 xv07 0) => 6
(at:ifAbsent: xv07 xv07 1) => 5
(at:ifAbsent: xv07 xv07 2) => 4
(at:ifAbsent: xv07 xv07 3) => 3
(at:ifAbsent: xv07 xv07 4) => 2
(at:ifAbsent: xv07 xv07 5) => 1
(at:ifAbsent: xv07 7) => nil
(at:ifAbsent: xv07 8) => nil
(at:ifAbsent: xv07 9) => nil
(at:ifAbsent: xv07 1073741823) => nil
(at:ifAbsent: xv07 1073741824) => nil
(at:ifAbsent: xv07 1073741825) => nil
(at:ifAbsent: xv07 -5) => 5
(at:ifAbsent: xv07 -4) => 4
(at:ifAbsent: xv07 -3) => 3
(at:ifAbsent: xv07 -2) => 2
(at:ifAbsent: xv07 -1) => 1
(at:ifAbsent: xv07 -1073741825) => nil
(at:ifAbsent: xv07 -1073741824) => nil
(at:ifAbsent: xv07 -1073741823) => nil
(at:ifAbsent: xv07 -9) => nil
(at:ifAbsent: xv07 -8) => nil
(at:ifAbsent: xv07 -7) => nil
(allMag xv07) => <True>
(allNum xv07) => <True>
(allInt xv07) => <True>
(allFrac xv07) => <False>
(someFrac xv07) => <False>
(allFloat xv07) => <False>
(someFloat xv07) => <False>
(min xv07) => 1
(max xv07) => 6
(sum xv07) => 21
(product xv07) => 720
(includes: xv07 nil) => <False>
(occurrencesOf: xv07 nil) => 0
(includes: xv07 nil) => <False>
(occurrencesOf: xv07 nil) => 0
(includes: xv07 <True>) => <False>
(occurrencesOf: xv07 <True>) => 0
(includes: xv07 <False>) => <False>
(occurrencesOf: xv07 <False>) => 0
(includes: xv07 0) => <False>
(occurrencesOf: xv07 0) => 0
(includes: xv07 1) => <True>
(occurrencesOf: xv07 1) => 1
(includes: xv07 42) => <False>
(occurrencesOf: xv07 42) => 0
(detect:ifNone: xv07 negative) => nil
(detect:ifNone: xv07 nonnegative) => 6
(detect:ifNone: xv07 strictlyPositive) => 6
(= xv07 xv07) => <True>
(< xv07 xv07) => <False>
(<= xv07 xv07) => <True>
(> xv07 xv07) => <False>
(>= xv07 xv07) => <True>
(= xv07 nil) => <False>
(= xv07 nil) => <False>
(= xv07 <True>) => <False>
(= xv07 <False>) => <False>
(= xv07 0) => <False>
(= xv07 1) => <False>
(= xv07 42) => <False>
(fromIndex:toIndex: xv07 0 0) => << 6 >>
(fromIndex:toIndex: xv07 0 1) => << 6 5 >>
(fromIndex:toIndex: xv07 0 2) => << 6 5 4 >>
(fromIndex:toIndex: xv07 0 4) => << 6 5 4 3 2 >>
(fromIndex:toIndex: xv07 1 1) => << 5 >>
(fromIndex:toIndex: xv07 1 3) => << 5 4 3 >>
(fromIndex:toIndex: xv07 -1 -1) => << 1 >>
(fromIndex:toIndex: xv07 -2 -1) => << 2 1 >>
(fromIndex:toIndex: xv07 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: xv07 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: xv07 -2 -2) => << 2 >>
(fromIndex:toIndex: xv07 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: xv07 -1 0) => << 1 6 >>
(fromIndex:toIndex: xv07 -2 1) => << 2 1 6 5 >>
(fromIndex:toIndex: xv07 -3 2) => << 3 2 1 6 5 4 >>
(fromIndex:toIndex: xv07 -4 3) => << 4 3 >>
(fromIndex:toIndex: xv07 -5 4) => << 5 4 3 2 >>

##########
Testing xv08
(debug xv08) => ReverseXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))))
(size xv08) => 12
(print xv08) => << -1 -2 -4 -5 -5 -6 6 5 4 3 2 1 >>
(at:ifAbsent: xv08 xv08 0) => -1
(at:ifAbsent: xv08 xv08 1) => -2
(at:ifAbsent: xv08 xv08 2) => -4
(at:ifAbsent: xv08 xv08 3) => -5
(at:ifAbsent: xv08 xv08 4) => -5
(at:ifAbsent: xv08 xv08 5) => -6
(at:ifAbsent: xv08 7) => 5
(at:ifAbsent: xv08 8) => 4
(at:ifAbsent: xv08 9) => 3
(at:ifAbsent: xv08 1073741823) => nil
(at:ifAbsent: xv08 1073741824) => nil
(at:ifAbsent: xv08 1073741825) => nil
(at:ifAbsent: xv08 -5) => 5
(at:ifAbsent: xv08 -4) => 4
(at:ifAbsent: xv08 -3) => 3
(at:ifAbsent: xv08 -2) => 2
(at:ifAbsent: xv08 -1) => 1
(at:ifAbsent: xv08 -1073741825) => nil
(at:ifAbsent: xv08 -1073741824) => nil
(at:ifAbsent: xv08 -1073741823) => nil
(at:ifAbsent: xv08 -9) => -5
(at:ifAbsent: xv08 -8) => -5
(at:ifAbsent: xv08 -7) => -6
(allMag xv08) => <True>
(allNum xv08) => <True>
(allInt xv08) => <True>
(allFrac xv08) => <False>
(someFrac xv08) => <False>
(allFloat xv08) => <False>
(someFloat xv08) => <False>
(min xv08) => -6
(max xv08) => 6
(sum xv08) => -2
(product xv08) => 864000
(includes: xv08 nil) => <False>
(occurrencesOf: xv08 nil) => 0
(includes: xv08 nil) => <False>
(occurrencesOf: xv08 nil) => 0
(includes: xv08 <True>) => <False>
(occurrencesOf: xv08 <True>) => 0
(includes: xv08 <False>) => <False>
(occurrencesOf: xv08 <False>) => 0
(includes: xv08 0) => <False>
(occurrencesOf: xv08 0) => 0
(includes: xv08 1) => <True>
(occurrencesOf: xv08 1) => 1
(includes: xv08 42) => <False>
(occurrencesOf: xv08 42) => 0
(detect:ifNone: xv08 negative) => -1
(detect:ifNone: xv08 nonnegative) => 6
(detect:ifNone: xv08 strictlyPositive) => 6
(= xv08 xv08) => <True>
(< xv08 xv08) => <False>
(<= xv08 xv08) => <True>
(> xv08 xv08) => <False>
(>= xv08 xv08) => <True>
(= xv08 nil) => <False>
(= xv08 nil) => <False>
(= xv08 <True>) => <False>
(= xv08 <False>) => <False>
(= xv08 0) => <False>
(= xv08 1) => <False>
(= xv08 42) => <False>
(fromIndex:toIndex: xv08 0 0) => << -1 >>
(fromIndex:toIndex: xv08 0 1) => << -1 -2 >>
(fromIndex:toIndex: xv08 0 2) => << -1 -2 -4 >>
(fromIndex:toIndex: xv08 0 4) => << -1 -2 -4 -5 -5 >>
(fromIndex:toIndex: xv08 1 1) => << -2 >>
(fromIndex:toIndex: xv08 1 3) => << -2 -4 -5 >>
(fromIndex:toIndex: xv08 -1 -1) => << 1 >>
(fromIndex:toIndex: xv08 -2 -1) => << 2 1 >>
(fromIndex:toIndex: xv08 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: xv08 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: xv08 -2 -2) => << 2 >>
(fromIndex:toIndex: xv08 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: xv08 -1 0) => << 1 -1 >>
(fromIndex:toIndex: xv08 -2 1) => << 2 1 -1 -2 >>
(fromIndex:toIndex: xv08 -3 2) => << 3 2 1 -1 -2 -4 >>
(fromIndex:toIndex: xv08 -4 3) => << 4 3 2 1 -1 -2 -4 -5 >>
(fromIndex:toIndex: xv08 -5 4) => << 5 4 3 2 1 -1 -2 -4 -5 -5 >>

##########
Testing xv09
(debug xv09) => ReverseXVector(RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),0))
(size xv09) => 0
(print xv09) => << >>
(at:ifAbsent: xv09 xv09 0) => nil
(at:ifAbsent: xv09 xv09 1) => nil
(at:ifAbsent: xv09 xv09 2) => nil
(at:ifAbsent: xv09 xv09 3) => nil
(at:ifAbsent: xv09 xv09 4) => nil
(at:ifAbsent: xv09 xv09 5) => nil
(at:ifAbsent: xv09 7) => nil
(at:ifAbsent: xv09 8) => nil
(at:ifAbsent: xv09 9) => nil
(at:ifAbsent: xv09 1073741823) => nil
(at:ifAbsent: xv09 1073741824) => nil
(at:ifAbsent: xv09 1073741825) => nil
(at:ifAbsent: xv09 -5) => nil
(at:ifAbsent: xv09 -4) => nil
(at:ifAbsent: xv09 -3) => nil
(at:ifAbsent: xv09 -2) => nil
(at:ifAbsent: xv09 -1) => nil
(at:ifAbsent: xv09 -1073741825) => nil
(at:ifAbsent: xv09 -1073741824) => nil
(at:ifAbsent: xv09 -1073741823) => nil
(at:ifAbsent: xv09 -9) => nil
(at:ifAbsent: xv09 -8) => nil
(at:ifAbsent: xv09 -7) => nil
(allMag xv09) => <True>
(allNum xv09) => <True>
(allInt xv09) => <True>
(allFrac xv09) => <True>
(someFrac xv09) => <False>
(allFloat xv09) => <True>
(someFloat xv09) => <False>
(sum xv09) => 0
(product xv09) => 1
(includes: xv09 nil) => <False>
(occurrencesOf: xv09 nil) => 0
(includes: xv09 nil) => <False>
(occurrencesOf: xv09 nil) => 0
(includes: xv09 <True>) => <False>
(occurrencesOf: xv09 <True>) => 0
(includes: xv09 <False>) => <False>
(occurrencesOf: xv09 <False>) => 0
(includes: xv09 0) => <False>
(occurrencesOf: xv09 0) => 0
(includes: xv09 1) => <False>
(occurrencesOf: xv09 1) => 0
(includes: xv09 42) => <False>
(occurrencesOf: xv09 42) => 0
(detect:ifNone: xv09 negative) => nil
(detect:ifNone: xv09 nonnegative) => nil
(detect:ifNone: xv09 strictlyPositive) => nil
(= xv09 xv09) => <True>
(< xv09 xv09) => <False>
(<= xv09 xv09) => <True>
(> xv09 xv09) => <False>
(>= xv09 xv09) => <True>
(= xv09 nil) => <False>
(= xv09 nil) => <False>
(= xv09 <True>) => <False>
(= xv09 <False>) => <False>
(= xv09 0) => <False>
(= xv09 1) => <False>
(= xv09 42) => <False>

##########
Testing xv10
(debug xv10) => ReverseXVector(RepeatXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),1000))
(size xv10) => 12000
(at:ifAbsent: xv10 xv10 0) => -1
(at:ifAbsent: xv10 xv10 1) => -2
(at:ifAbsent: xv10 xv10 2) => -4
(at:ifAbsent: xv10 xv10 3) => -5
(at:ifAbsent: xv10 xv10 4) => -5
(at:ifAbsent: xv10 xv10 5) => -6
(at:ifAbsent: xv10 7) => 5
(at:ifAbsent: xv10 8) => 4
(at:ifAbsent: xv10 9) => 3
(at:ifAbsent: xv10 1073741823) => nil
(at:ifAbsent: xv10 1073741824) => nil
(at:ifAbsent: xv10 1073741825) => nil
(at:ifAbsent: xv10 -5) => 5
(at:ifAbsent: xv10 -4) => 4
(at:ifAbsent: xv10 -3) => 3
(at:ifAbsent: xv10 -2) => 2
(at:ifAbsent: xv10 -1) => 1
(at:ifAbsent: xv10 -1073741825) => nil
(at:ifAbsent: xv10 -1073741824) => nil
(at:ifAbsent: xv10 -1073741823) => nil
(at:ifAbsent: xv10 -9) => -5
(at:ifAbsent: xv10 -8) => -5
(at:ifAbsent: xv10 -7) => -6
(= xv10 nil) => <False>
(= xv10 nil) => <False>
(= xv10 <True>) => <False>
(= xv10 <False>) => <False>
(= xv10 0) => <False>
(= xv10 1) => <False>
(= xv10 42) => <False>
(fromIndex:toIndex: xv10 0 0) => << -1 >>
(fromIndex:toIndex: xv10 0 1) => << -1 -2 >>
(fromIndex:toIndex: xv10 0 2) => << -1 -2 -4 >>
(fromIndex:toIndex: xv10 0 4) => << -1 -2 -4 -5 -5 >>
(fromIndex:toIndex: xv10 1 1) => << -2 >>
(fromIndex:toIndex: xv10 1 3) => << -2 -4 -5 >>
(fromIndex:toIndex: xv10 -1 -1) => << 1 >>
(fromIndex:toIndex: xv10 -2 -1) => << 2 1 >>
(fromIndex:toIndex: xv10 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: xv10 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: xv10 -2 -2) => << 2 >>
(fromIndex:toIndex: xv10 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: xv10 -1 0) => << 1 -1 >>
(fromIndex:toIndex: xv10 -2 1) => << 2 1 -1 -2 >>
(fromIndex:toIndex: xv10 -3 2) => << 3 2 1 -1 -2 -4 >>
(fromIndex:toIndex: xv10 -4 3) => << 4 3 2 1 -1 -2 -4 -5 >>
(fromIndex:toIndex: xv10 -5 4) => << 5 4 3 2 1 -1 -2 -4 -5 -5 >>

##########
Testing xv11
(debug xv11) => ReverseXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))))
(size xv11) => 12
(print xv11) => << -1 -2 -4 -5 -5 -6 6 5 4 3 2 1 >>
(at:ifAbsent: xv11 xv11 0) => -1
(at:ifAbsent: xv11 xv11 1) => -2
(at:ifAbsent: xv11 xv11 2) => -4
(at:ifAbsent: xv11 xv11 3) => -5
(at:ifAbsent: xv11 xv11 4) => -5
(at:ifAbsent: xv11 xv11 5) => -6
(at:ifAbsent: xv11 7) => 5
(at:ifAbsent: xv11 8) => 4
(at:ifAbsent: xv11 9) => 3
(at:ifAbsent: xv11 1073741823) => nil
(at:ifAbsent: xv11 1073741824) => nil
(at:ifAbsent: xv11 1073741825) => nil
(at:ifAbsent: xv11 -5) => 5
(at:ifAbsent: xv11 -4) => 4
(at:ifAbsent: xv11 -3) => 3
(at:ifAbsent: xv11 -2) => 2
(at:ifAbsent: xv11 -1) => 1
(at:ifAbsent: xv11 -1073741825) => nil
(at:ifAbsent: xv11 -1073741824) => nil
(at:ifAbsent: xv11 -1073741823) => nil
(at:ifAbsent: xv11 -9) => -5
(at:ifAbsent: xv11 -8) => -5
(at:ifAbsent: xv11 -7) => -6
(allMag xv11) => <True>
(allNum xv11) => <True>
(allInt xv11) => <True>
(allFrac xv11) => <False>
(someFrac xv11) => <False>
(allFloat xv11) => <False>
(someFloat xv11) => <False>
(min xv11) => -6
(max xv11) => 6
(sum xv11) => -2
(product xv11) => 864000
(includes: xv11 nil) => <False>
(occurrencesOf: xv11 nil) => 0
(includes: xv11 nil) => <False>
(occurrencesOf: xv11 nil) => 0
(includes: xv11 <True>) => <False>
(occurrencesOf: xv11 <True>) => 0
(includes: xv11 <False>) => <False>
(occurrencesOf: xv11 <False>) => 0
(includes: xv11 0) => <False>
(occurrencesOf: xv11 0) => 0
(includes: xv11 1) => <True>
(occurrencesOf: xv11 1) => 1
(includes: xv11 42) => <False>
(occurrencesOf: xv11 42) => 0
(detect:ifNone: xv11 negative) => -1
(detect:ifNone: xv11 nonnegative) => 6
(detect:ifNone: xv11 strictlyPositive) => 6
(= xv11 xv11) => <True>
(< xv11 xv11) => <False>
(<= xv11 xv11) => <True>
(> xv11 xv11) => <False>
(>= xv11 xv11) => <True>
(= xv11 nil) => <False>
(= xv11 nil) => <False>
(= xv11 <True>) => <False>
(= xv11 <False>) => <False>
(= xv11 0) => <False>
(= xv11 1) => <False>
(= xv11 42) => <False>
(fromIndex:toIndex: xv11 0 0) => << -1 >>
(fromIndex:toIndex: xv11 0 1) => << -1 -2 >>
(fromIndex:toIndex: xv11 0 2) => << -1 -2 -4 >>
(fromIndex:toIndex: xv11 0 4) => << -1 -2 -4 -5 -5 >>
(fromIndex:toIndex: xv11 1 1) => << -2 >>
(fromIndex:toIndex: xv11 1 3) => << -2 -4 -5 >>
(fromIndex:toIndex: xv11 -1 -1) => << 1 >>
(fromIndex:toIndex: xv11 -2 -1) => << 2 1 >>
(fromIndex:toIndex: xv11 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: xv11 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: xv11 -2 -2) => << 2 >>
(fromIndex:toIndex: xv11 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: xv11 -1 0) => << 1 -1 >>
(fromIndex:toIndex: xv11 -2 1) => << 2 1 -1 -2 >>
(fromIndex:toIndex: xv11 -3 2) => << 3 2 1 -1 -2 -4 >>
(fromIndex:toIndex: xv11 -4 3) => << 4 3 2 1 -1 -2 -4 -5 >>
(fromIndex:toIndex: xv11 -5 4) => << 5 4 3 2 1 -1 -2 -4 -5 -5 >>

##########
Testing xv12
(debug xv12) => SwizzleXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))
(size xv12) => 12
(print xv12) => << 1 -6 2 -5 3 -5 4 -4 5 -2 6 -1 >>
(at:ifAbsent: xv12 xv12 0) => 1
(at:ifAbsent: xv12 xv12 1) => -6
(at:ifAbsent: xv12 xv12 2) => 2
(at:ifAbsent: xv12 xv12 3) => -5
(at:ifAbsent: xv12 xv12 4) => 3
(at:ifAbsent: xv12 xv12 5) => -5
(at:ifAbsent: xv12 7) => -4
(at:ifAbsent: xv12 8) => 5
(at:ifAbsent: xv12 9) => -2
(at:ifAbsent: xv12 1073741823) => nil
(at:ifAbsent: xv12 1073741824) => nil
(at:ifAbsent: xv12 1073741825) => nil
(at:ifAbsent: xv12 -5) => -4
(at:ifAbsent: xv12 -4) => 5
(at:ifAbsent: xv12 -3) => -2
(at:ifAbsent: xv12 -2) => 6
(at:ifAbsent: xv12 -1) => -1
(at:ifAbsent: xv12 -1073741825) => nil
(at:ifAbsent: xv12 -1073741824) => nil
(at:ifAbsent: xv12 -1073741823) => nil
(at:ifAbsent: xv12 -9) => -5
(at:ifAbsent: xv12 -8) => 3
(at:ifAbsent: xv12 -7) => -5
(allMag xv12) => <True>
(allNum xv12) => <True>
(allInt xv12) => <True>
(allFrac xv12) => <False>
(someFrac xv12) => <False>
(allFloat xv12) => <False>
(someFloat xv12) => <False>
(min xv12) => -6
(max xv12) => 6
(sum xv12) => -2
(product xv12) => 864000
(includes: xv12 nil) => <False>
(occurrencesOf: xv12 nil) => 0
(includes: xv12 nil) => <False>
(occurrencesOf: xv12 nil) => 0
(includes: xv12 <True>) => <False>
(occurrencesOf: xv12 <True>) => 0
(includes: xv12 <False>) => <False>
(occurrencesOf: xv12 <False>) => 0
(includes: xv12 0) => <False>
(occurrencesOf: xv12 0) => 0
(includes: xv12 1) => <True>
(occurrencesOf: xv12 1) => 1
(includes: xv12 42) => <False>
(occurrencesOf: xv12 42) => 0
(detect:ifNone: xv12 negative) => -6
(detect:ifNone: xv12 nonnegative) => 1
(detect:ifNone: xv12 strictlyPositive) => 1
(= xv12 xv12) => <True>
(< xv12 xv12) => <False>
(<= xv12 xv12) => <True>
(> xv12 xv12) => <False>
(>= xv12 xv12) => <True>
(= xv12 nil) => <False>
(= xv12 nil) => <False>
(= xv12 <True>) => <False>
(= xv12 <False>) => <False>
(= xv12 0) => <False>
(= xv12 1) => <False>
(= xv12 42) => <False>
(fromIndex:toIndex: xv12 0 0) => << 1 >>
(fromIndex:toIndex: xv12 0 1) => << 1 -6 >>
(fromIndex:toIndex: xv12 0 2) => << 1 -6 2 >>
(fromIndex:toIndex: xv12 0 4) => << 1 -6 2 -5 3 >>
(fromIndex:toIndex: xv12 1 1) => << -6 >>
(fromIndex:toIndex: xv12 1 3) => << -6 2 -5 >>
(fromIndex:toIndex: xv12 -1 -1) => << -1 >>
(fromIndex:toIndex: xv12 -2 -1) => << 6 -1 >>
(fromIndex:toIndex: xv12 -3 -1) => << -2 6 -1 >>
(fromIndex:toIndex: xv12 -5 -1) => << -4 5 -2 6 -1 >>
(fromIndex:toIndex: xv12 -2 -2) => << 6 >>
(fromIndex:toIndex: xv12 -4 -2) => << 5 -2 6 >>
(fromIndex:toIndex: xv12 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv12 -2 1) => << 6 -1 1 -6 >>
(fromIndex:toIndex: xv12 -3 2) => << -2 6 -1 1 -6 2 >>
(fromIndex:toIndex: xv12 -4 3) => << 5 -2 6 -1 1 -6 2 -5 >>
(fromIndex:toIndex: xv12 -5 4) => << -4 5 -2 6 -1 1 -6 2 -5 3 >>

##########
Testing xv13
(debug xv13) => SwizzleXVector(ArrayXVector(( 1 2 3 4 5 6 )),ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))))
(size xv13) => 18
(print xv13) => << 1 1 2 2 3 3 4 4 5 5 6 6 -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv13 xv13 0) => 1
(at:ifAbsent: xv13 xv13 1) => 1
(at:ifAbsent: xv13 xv13 2) => 2
(at:ifAbsent: xv13 xv13 3) => 2
(at:ifAbsent: xv13 xv13 4) => 3
(at:ifAbsent: xv13 xv13 5) => 3
(at:ifAbsent: xv13 7) => 4
(at:ifAbsent: xv13 8) => 5
(at:ifAbsent: xv13 9) => 5
(at:ifAbsent: xv13 1073741823) => nil
(at:ifAbsent: xv13 1073741824) => nil
(at:ifAbsent: xv13 1073741825) => nil
(at:ifAbsent: xv13 -5) => -5
(at:ifAbsent: xv13 -4) => -5
(at:ifAbsent: xv13 -3) => -4
(at:ifAbsent: xv13 -2) => -2
(at:ifAbsent: xv13 -1) => -1
(at:ifAbsent: xv13 -1073741825) => nil
(at:ifAbsent: xv13 -1073741824) => nil
(at:ifAbsent: xv13 -1073741823) => nil
(at:ifAbsent: xv13 -9) => 5
(at:ifAbsent: xv13 -8) => 6
(at:ifAbsent: xv13 -7) => 6
(allMag xv13) => <True>
(allNum xv13) => <True>
(allInt xv13) => <True>
(allFrac xv13) => <False>
(someFrac xv13) => <False>
(allFloat xv13) => <False>
(someFloat xv13) => <False>
(min xv13) => -6
(max xv13) => 6
(sum xv13) => 19
(product xv13) => 622080000
(includes: xv13 nil) => <False>
(occurrencesOf: xv13 nil) => 0
(includes: xv13 nil) => <False>
(occurrencesOf: xv13 nil) => 0
(includes: xv13 <True>) => <False>
(occurrencesOf: xv13 <True>) => 0
(includes: xv13 <False>) => <False>
(occurrencesOf: xv13 <False>) => 0
(includes: xv13 0) => <False>
(occurrencesOf: xv13 0) => 0
(includes: xv13 1) => <True>
(occurrencesOf: xv13 1) => 2
(includes: xv13 42) => <False>
(occurrencesOf: xv13 42) => 0
(detect:ifNone: xv13 negative) => -6
(detect:ifNone: xv13 nonnegative) => 1
(detect:ifNone: xv13 strictlyPositive) => 1
(= xv13 xv13) => <True>
(< xv13 xv13) => <False>
(<= xv13 xv13) => <True>
(> xv13 xv13) => <False>
(>= xv13 xv13) => <True>
(= xv13 nil) => <False>
(= xv13 nil) => <False>
(= xv13 <True>) => <False>
(= xv13 <False>) => <False>
(= xv13 0) => <False>
(= xv13 1) => <False>
(= xv13 42) => <False>
(fromIndex:toIndex: xv13 0 0) => << 1 >>
(fromIndex:toIndex: xv13 0 1) => << 1 1 >>
(fromIndex:toIndex: xv13 0 2) => << 1 1 2 >>
(fromIndex:toIndex: xv13 0 4) => << 1 1 2 2 3 >>
(fromIndex:toIndex: xv13 1 1) => << 1 >>
(fromIndex:toIndex: xv13 1 3) => << 1 2 2 >>
(fromIndex:toIndex: xv13 -1 -1) => << -1 >>
(fromIndex:toIndex: xv13 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv13 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv13 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv13 -2 -2) => << -2 >>
(fromIndex:toIndex: xv13 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv13 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv13 -2 1) => << -2 -1 1 1 >>
(fromIndex:toIndex: xv13 -3 2) => << -4 -2 -1 1 1 2 >>
(fromIndex:toIndex: xv13 -4 3) => << -5 -4 -2 -1 1 1 2 2 >>
(fromIndex:toIndex: xv13 -5 4) => << -5 -5 -4 -2 -1 1 1 2 2 3 >>

##########
Testing xv14
(debug xv14) => SwizzleXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),ArrayXVector(( 1 2 3 4 5 6 )))
(size xv14) => 18
(print xv14) => << 1 1 2 2 3 3 4 4 5 5 6 6 -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv14 xv14 0) => 1
(at:ifAbsent: xv14 xv14 1) => 1
(at:ifAbsent: xv14 xv14 2) => 2
(at:ifAbsent: xv14 xv14 3) => 2
(at:ifAbsent: xv14 xv14 4) => 3
(at:ifAbsent: xv14 xv14 5) => 3
(at:ifAbsent: xv14 7) => 4
(at:ifAbsent: xv14 8) => 5
(at:ifAbsent: xv14 9) => 5
(at:ifAbsent: xv14 1073741823) => nil
(at:ifAbsent: xv14 1073741824) => nil
(at:ifAbsent: xv14 1073741825) => nil
(at:ifAbsent: xv14 -5) => -5
(at:ifAbsent: xv14 -4) => -5
(at:ifAbsent: xv14 -3) => -4
(at:ifAbsent: xv14 -2) => -2
(at:ifAbsent: xv14 -1) => -1
(at:ifAbsent: xv14 -1073741825) => nil
(at:ifAbsent: xv14 -1073741824) => nil
(at:ifAbsent: xv14 -1073741823) => nil
(at:ifAbsent: xv14 -9) => 5
(at:ifAbsent: xv14 -8) => 6
(at:ifAbsent: xv14 -7) => 6
(allMag xv14) => <True>
(allNum xv14) => <True>
(allInt xv14) => <True>
(allFrac xv14) => <False>
(someFrac xv14) => <False>
(allFloat xv14) => <False>
(someFloat xv14) => <False>
(min xv14) => -6
(max xv14) => 6
(sum xv14) => 19
(product xv14) => 622080000
(includes: xv14 nil) => <False>
(occurrencesOf: xv14 nil) => 0
(includes: xv14 nil) => <False>
(occurrencesOf: xv14 nil) => 0
(includes: xv14 <True>) => <False>
(occurrencesOf: xv14 <True>) => 0
(includes: xv14 <False>) => <False>
(occurrencesOf: xv14 <False>) => 0
(includes: xv14 0) => <False>
(occurrencesOf: xv14 0) => 0
(includes: xv14 1) => <True>
(occurrencesOf: xv14 1) => 2
(includes: xv14 42) => <False>
(occurrencesOf: xv14 42) => 0
(detect:ifNone: xv14 negative) => -6
(detect:ifNone: xv14 nonnegative) => 1
(detect:ifNone: xv14 strictlyPositive) => 1
(= xv14 xv14) => <True>
(< xv14 xv14) => <False>
(<= xv14 xv14) => <True>
(> xv14 xv14) => <False>
(>= xv14 xv14) => <True>
(= xv14 nil) => <False>
(= xv14 nil) => <False>
(= xv14 <True>) => <False>
(= xv14 <False>) => <False>
(= xv14 0) => <False>
(= xv14 1) => <False>
(= xv14 42) => <False>
(fromIndex:toIndex: xv14 0 0) => << 1 >>
(fromIndex:toIndex: xv14 0 1) => << 1 1 >>
(fromIndex:toIndex: xv14 0 2) => << 1 1 2 >>
(fromIndex:toIndex: xv14 0 4) => << 1 1 2 2 3 >>
(fromIndex:toIndex: xv14 1 1) => << 1 >>
(fromIndex:toIndex: xv14 1 3) => << 1 2 2 >>
(fromIndex:toIndex: xv14 -1 -1) => << -1 >>
(fromIndex:toIndex: xv14 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv14 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv14 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv14 -2 -2) => << -2 >>
(fromIndex:toIndex: xv14 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv14 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv14 -2 1) => << -2 -1 1 1 >>
(fromIndex:toIndex: xv14 -3 2) => << -4 -2 -1 1 1 2 >>
(fromIndex:toIndex: xv14 -4 3) => << -5 -4 -2 -1 1 1 2 2 >>
(fromIndex:toIndex: xv14 -5 4) => << -5 -5 -4 -2 -1 1 1 2 2 3 >>

##########
Testing xv15
(debug xv15) => SwizzleXVector(RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),3),RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),0))
(size xv15) => 18
(print xv15) => << 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 >>
(at:ifAbsent: xv15 xv15 0) => 1
(at:ifAbsent: xv15 xv15 1) => 2
(at:ifAbsent: xv15 xv15 2) => 3
(at:ifAbsent: xv15 xv15 3) => 4
(at:ifAbsent: xv15 xv15 4) => 5
(at:ifAbsent: xv15 xv15 5) => 6
(at:ifAbsent: xv15 7) => 2
(at:ifAbsent: xv15 8) => 3
(at:ifAbsent: xv15 9) => 4
(at:ifAbsent: xv15 1073741823) => nil
(at:ifAbsent: xv15 1073741824) => nil
(at:ifAbsent: xv15 1073741825) => nil
(at:ifAbsent: xv15 -5) => 2
(at:ifAbsent: xv15 -4) => 3
(at:ifAbsent: xv15 -3) => 4
(at:ifAbsent: xv15 -2) => 5
(at:ifAbsent: xv15 -1) => 6
(at:ifAbsent: xv15 -1073741825) => nil
(at:ifAbsent: xv15 -1073741824) => nil
(at:ifAbsent: xv15 -1073741823) => nil
(at:ifAbsent: xv15 -9) => 4
(at:ifAbsent: xv15 -8) => 5
(at:ifAbsent: xv15 -7) => 6
(allMag xv15) => <True>
(allNum xv15) => <True>
(allInt xv15) => <True>
(allFrac xv15) => <False>
(someFrac xv15) => <False>
(allFloat xv15) => <False>
(someFloat xv15) => <False>
(min xv15) => 1
(max xv15) => 6
(sum xv15) => 63
(product xv15) => 373248000
(includes: xv15 nil) => <False>
(occurrencesOf: xv15 nil) => 0
(includes: xv15 nil) => <False>
(occurrencesOf: xv15 nil) => 0
(includes: xv15 <True>) => <False>
(occurrencesOf: xv15 <True>) => 0
(includes: xv15 <False>) => <False>
(occurrencesOf: xv15 <False>) => 0
(includes: xv15 0) => <False>
(occurrencesOf: xv15 0) => 0
(includes: xv15 1) => <True>
(occurrencesOf: xv15 1) => 3
(includes: xv15 42) => <False>
(occurrencesOf: xv15 42) => 0
(detect:ifNone: xv15 negative) => nil
(detect:ifNone: xv15 nonnegative) => 1
(detect:ifNone: xv15 strictlyPositive) => 1
(= xv15 xv15) => <True>
(< xv15 xv15) => <False>
(<= xv15 xv15) => <True>
(> xv15 xv15) => <False>
(>= xv15 xv15) => <True>
(= xv15 nil) => <False>
(= xv15 nil) => <False>
(= xv15 <True>) => <False>
(= xv15 <False>) => <False>
(= xv15 0) => <False>
(= xv15 1) => <False>
(= xv15 42) => <False>
(fromIndex:toIndex: xv15 0 0) => << 1 >>
(fromIndex:toIndex: xv15 0 1) => << 1 2 >>
(fromIndex:toIndex: xv15 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv15 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv15 1 1) => << 2 >>
(fromIndex:toIndex: xv15 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv15 -1 -1) => << 6 >>
(fromIndex:toIndex: xv15 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv15 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv15 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv15 -2 -2) => << 5 >>
(fromIndex:toIndex: xv15 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv15 -1 0) => << 6 1 >>
(fromIndex:toIndex: xv15 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: xv15 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: xv15 -4 3) => << 3 4 5 6 1 2 3 4 >>
(fromIndex:toIndex: xv15 -5 4) => << 2 3 4 5 6 1 2 3 4 5 >>

##########
Testing xv16
(debug xv16) => SwizzleXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),ArrayXVector(( 1 2 3 4 5 6 )))
(size xv16) => 18
(print xv16) => << 1 1 2 2 3 3 4 4 5 5 6 6 -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv16 xv16 0) => 1
(at:ifAbsent: xv16 xv16 1) => 1
(at:ifAbsent: xv16 xv16 2) => 2
(at:ifAbsent: xv16 xv16 3) => 2
(at:ifAbsent: xv16 xv16 4) => 3
(at:ifAbsent: xv16 xv16 5) => 3
(at:ifAbsent: xv16 7) => 4
(at:ifAbsent: xv16 8) => 5
(at:ifAbsent: xv16 9) => 5
(at:ifAbsent: xv16 1073741823) => nil
(at:ifAbsent: xv16 1073741824) => nil
(at:ifAbsent: xv16 1073741825) => nil
(at:ifAbsent: xv16 -5) => -5
(at:ifAbsent: xv16 -4) => -5
(at:ifAbsent: xv16 -3) => -4
(at:ifAbsent: xv16 -2) => -2
(at:ifAbsent: xv16 -1) => -1
(at:ifAbsent: xv16 -1073741825) => nil
(at:ifAbsent: xv16 -1073741824) => nil
(at:ifAbsent: xv16 -1073741823) => nil
(at:ifAbsent: xv16 -9) => 5
(at:ifAbsent: xv16 -8) => 6
(at:ifAbsent: xv16 -7) => 6
(allMag xv16) => <True>
(allNum xv16) => <True>
(allInt xv16) => <True>
(allFrac xv16) => <False>
(someFrac xv16) => <False>
(allFloat xv16) => <False>
(someFloat xv16) => <False>
(min xv16) => -6
(max xv16) => 6
(sum xv16) => 19
(product xv16) => 622080000
(includes: xv16 nil) => <False>
(occurrencesOf: xv16 nil) => 0
(includes: xv16 nil) => <False>
(occurrencesOf: xv16 nil) => 0
(includes: xv16 <True>) => <False>
(occurrencesOf: xv16 <True>) => 0
(includes: xv16 <False>) => <False>
(occurrencesOf: xv16 <False>) => 0
(includes: xv16 0) => <False>
(occurrencesOf: xv16 0) => 0
(includes: xv16 1) => <True>
(occurrencesOf: xv16 1) => 2
(includes: xv16 42) => <False>
(occurrencesOf: xv16 42) => 0
(detect:ifNone: xv16 negative) => -6
(detect:ifNone: xv16 nonnegative) => 1
(detect:ifNone: xv16 strictlyPositive) => 1
(= xv16 xv16) => <True>
(< xv16 xv16) => <False>
(<= xv16 xv16) => <True>
(> xv16 xv16) => <False>
(>= xv16 xv16) => <True>
(= xv16 nil) => <False>
(= xv16 nil) => <False>
(= xv16 <True>) => <False>
(= xv16 <False>) => <False>
(= xv16 0) => <False>
(= xv16 1) => <False>
(= xv16 42) => <False>
(fromIndex:toIndex: xv16 0 0) => << 1 >>
(fromIndex:toIndex: xv16 0 1) => << 1 1 >>
(fromIndex:toIndex: xv16 0 2) => << 1 1 2 >>
(fromIndex:toIndex: xv16 0 4) => << 1 1 2 2 3 >>
(fromIndex:toIndex: xv16 1 1) => << 1 >>
(fromIndex:toIndex: xv16 1 3) => << 1 2 2 >>
(fromIndex:toIndex: xv16 -1 -1) => << -1 >>
(fromIndex:toIndex: xv16 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv16 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv16 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv16 -2 -2) => << -2 >>
(fromIndex:toIndex: xv16 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv16 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv16 -2 1) => << -2 -1 1 1 >>
(fromIndex:toIndex: xv16 -3 2) => << -4 -2 -1 1 1 2 >>
(fromIndex:toIndex: xv16 -4 3) => << -5 -4 -2 -1 1 1 2 2 >>
(fromIndex:toIndex: xv16 -5 4) => << -5 -5 -4 -2 -1 1 1 2 2 3 >>

##########
Testing xv17
(debug xv17) => SwizzleXVector(ReverseXVector(RepeatXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),1000)),RepeatXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),1000))
(size xv17) => 24000
(at:ifAbsent: xv17 xv17 0) => -1
(at:ifAbsent: xv17 xv17 1) => 1
(at:ifAbsent: xv17 xv17 2) => -2
(at:ifAbsent: xv17 xv17 3) => 2
(at:ifAbsent: xv17 xv17 4) => -4
(at:ifAbsent: xv17 xv17 5) => 3
(at:ifAbsent: xv17 7) => 4
(at:ifAbsent: xv17 8) => -5
(at:ifAbsent: xv17 9) => 5
(at:ifAbsent: xv17 1073741823) => nil
(at:ifAbsent: xv17 1073741824) => nil
(at:ifAbsent: xv17 1073741825) => nil
(at:ifAbsent: xv17 -5) => -4
(at:ifAbsent: xv17 -4) => 2
(at:ifAbsent: xv17 -3) => -2
(at:ifAbsent: xv17 -2) => 1
(at:ifAbsent: xv17 -1) => -1
(at:ifAbsent: xv17 -1073741825) => nil
(at:ifAbsent: xv17 -1073741824) => nil
(at:ifAbsent: xv17 -1073741823) => nil
(at:ifAbsent: xv17 -9) => -5
(at:ifAbsent: xv17 -8) => 4
(at:ifAbsent: xv17 -7) => -5
(= xv17 nil) => <False>
(= xv17 nil) => <False>
(= xv17 <True>) => <False>
(= xv17 <False>) => <False>
(= xv17 0) => <False>
(= xv17 1) => <False>
(= xv17 42) => <False>
(fromIndex:toIndex: xv17 0 0) => << -1 >>
(fromIndex:toIndex: xv17 0 1) => << -1 1 >>
(fromIndex:toIndex: xv17 0 2) => << -1 1 -2 >>
(fromIndex:toIndex: xv17 0 4) => << -1 1 -2 2 -4 >>
(fromIndex:toIndex: xv17 1 1) => << 1 >>
(fromIndex:toIndex: xv17 1 3) => << 1 -2 2 >>
(fromIndex:toIndex: xv17 -1 -1) => << -1 >>
(fromIndex:toIndex: xv17 -2 -1) => << 1 -1 >>
(fromIndex:toIndex: xv17 -3 -1) => << -2 1 -1 >>
(fromIndex:toIndex: xv17 -5 -1) => << -4 2 -2 1 -1 >>
(fromIndex:toIndex: xv17 -2 -2) => << 1 >>
(fromIndex:toIndex: xv17 -4 -2) => << 2 -2 1 >>
(fromIndex:toIndex: xv17 -1 0) => << -1 -1 >>
(fromIndex:toIndex: xv17 -2 1) => << 1 -1 -1 1 >>
(fromIndex:toIndex: xv17 -3 2) => << -2 1 -1 -1 1 -2 >>
(fromIndex:toIndex: xv17 -4 3) => << 2 -2 1 -1 -1 1 -2 2 >>
(fromIndex:toIndex: xv17 -5 4) => << -4 2 -2 1 -1 -1 1 -2 2 -4 >>

##########
Testing xv18
(debug xv18) => BlockXVector(100,<BlockFn1>)
(size xv18) => 100
(at:ifAbsent: xv18 xv18 0) => 0
(at:ifAbsent: xv18 xv18 1) => 1
(at:ifAbsent: xv18 xv18 2) => 2
(at:ifAbsent: xv18 xv18 3) => 3
(at:ifAbsent: xv18 xv18 4) => 4
(at:ifAbsent: xv18 xv18 5) => 5
(at:ifAbsent: xv18 7) => 7
(at:ifAbsent: xv18 8) => 8
(at:ifAbsent: xv18 9) => 9
(at:ifAbsent: xv18 1073741823) => nil
(at:ifAbsent: xv18 1073741824) => nil
(at:ifAbsent: xv18 1073741825) => nil
(at:ifAbsent: xv18 -5) => 2
(at:ifAbsent: xv18 -4) => 3
(at:ifAbsent: xv18 -3) => 4
(at:ifAbsent: xv18 -2) => 5
(at:ifAbsent: xv18 -1) => 6
(at:ifAbsent: xv18 -1073741825) => nil
(at:ifAbsent: xv18 -1073741824) => nil
(at:ifAbsent: xv18 -1073741823) => nil
(at:ifAbsent: xv18 -9) => 29
(at:ifAbsent: xv18 -8) => 30
(at:ifAbsent: xv18 -7) => 0
(allMag xv18) => <True>
(allNum xv18) => <True>
(allInt xv18) => <True>
(allFrac xv18) => <False>
(someFrac xv18) => <False>
(allFloat xv18) => <False>
(someFloat xv18) => <False>
(min xv18) => 0
(max xv18) => 30
(sum xv18) => 1416
(includes: xv18 nil) => <False>
(occurrencesOf: xv18 nil) => 0
(includes: xv18 nil) => <False>
(occurrencesOf: xv18 nil) => 0
(includes: xv18 <True>) => <False>
(occurrencesOf: xv18 <True>) => 0
(includes: xv18 <False>) => <False>
(occurrencesOf: xv18 <False>) => 0
(includes: xv18 0) => <True>
(occurrencesOf: xv18 0) => 4
(includes: xv18 1) => <True>
(occurrencesOf: xv18 1) => 4
(includes: xv18 42) => <False>
(occurrencesOf: xv18 42) => 0
(detect:ifNone: xv18 negative) => nil
(detect:ifNone: xv18 nonnegative) => 0
(detect:ifNone: xv18 strictlyPositive) => 1
(= xv18 xv18) => <True>
(< xv18 xv18) => <False>
(<= xv18 xv18) => <True>
(> xv18 xv18) => <False>
(>= xv18 xv18) => <True>
(= xv18 nil) => <False>
(= xv18 nil) => <False>
(= xv18 <True>) => <False>
(= xv18 <False>) => <False>
(= xv18 0) => <False>
(= xv18 1) => <False>
(= xv18 42) => <False>
(fromIndex:toIndex: xv18 0 0) => << 0 >>
(fromIndex:toIndex: xv18 0 1) => << 0 1 >>
(fromIndex:toIndex: xv18 0 2) => << 0 1 2 >>
(fromIndex:toIndex: xv18 0 4) => << 0 1 2 3 4 >>
(fromIndex:toIndex: xv18 1 1) => << 1 >>
(fromIndex:toIndex: xv18 1 3) => << 1 2 3 >>
(fromIndex:toIndex: xv18 -1 -1) => << 6 >>
(fromIndex:toIndex: xv18 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv18 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv18 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv18 -2 -2) => << 5 >>
(fromIndex:toIndex: xv18 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv18 -1 0) => << 6 0 >>
(fromIndex:toIndex: xv18 -2 1) => << 5 6 0 1 >>
(fromIndex:toIndex: xv18 -3 2) => << 4 5 6 0 1 2 >>
(fromIndex:toIndex: xv18 -4 3) => << 3 4 5 6 0 1 2 3 >>
(fromIndex:toIndex: xv18 -5 4) => << 2 3 4 5 6 0 1 2 3 4 >>

##########
Testing xv19
(debug xv19) => BlockXVector(100,<BlockFn2>)
(size xv19) => 100
(at:ifAbsent: xv19 xv19 0) => 0
(at:ifAbsent: xv19 xv19 1) => 1
(at:ifAbsent: xv19 xv19 2) => 4
(at:ifAbsent: xv19 xv19 3) => 9
(at:ifAbsent: xv19 xv19 4) => 16
(at:ifAbsent: xv19 xv19 5) => 25
(at:ifAbsent: xv19 7) => 18
(at:ifAbsent: xv19 8) => 2
(at:ifAbsent: xv19 9) => 19
(at:ifAbsent: xv19 1073741823) => nil
(at:ifAbsent: xv19 1073741824) => nil
(at:ifAbsent: xv19 1073741825) => nil
(at:ifAbsent: xv19 -5) => 4
(at:ifAbsent: xv19 -4) => 9
(at:ifAbsent: xv19 -3) => 16
(at:ifAbsent: xv19 -2) => 25
(at:ifAbsent: xv19 -1) => 5
(at:ifAbsent: xv19 -1073741825) => nil
(at:ifAbsent: xv19 -1073741824) => nil
(at:ifAbsent: xv19 -1073741823) => nil
(at:ifAbsent: xv19 -9) => 4
(at:ifAbsent: xv19 -8) => 1
(at:ifAbsent: xv19 -7) => 0
(allMag xv19) => <True>
(allNum xv19) => <True>
(allInt xv19) => <True>
(allFrac xv19) => <False>
(someFrac xv19) => <False>
(allFloat xv19) => <False>
(someFloat xv19) => <False>
(min xv19) => 0
(max xv19) => 28
(sum xv19) => 1176
(includes: xv19 nil) => <False>
(occurrencesOf: xv19 nil) => 0
(includes: xv19 nil) => <False>
(occurrencesOf: xv19 nil) => 0
(includes: xv19 <True>) => <False>
(occurrencesOf: xv19 <True>) => 0
(includes: xv19 <False>) => <False>
(occurrencesOf: xv19 <False>) => 0
(includes: xv19 0) => <True>
(occurrencesOf: xv19 0) => 4
(includes: xv19 1) => <True>
(occurrencesOf: xv19 1) => 7
(includes: xv19 42) => <False>
(occurrencesOf: xv19 42) => 0
(detect:ifNone: xv19 negative) => nil
(detect:ifNone: xv19 nonnegative) => 0
(detect:ifNone: xv19 strictlyPositive) => 1
(= xv19 xv19) => <True>
(< xv19 xv19) => <False>
(<= xv19 xv19) => <True>
(> xv19 xv19) => <False>
(>= xv19 xv19) => <True>
(= xv19 nil) => <False>
(= xv19 nil) => <False>
(= xv19 <True>) => <False>
(= xv19 <False>) => <False>
(= xv19 0) => <False>
(= xv19 1) => <False>
(= xv19 42) => <False>
(fromIndex:toIndex: xv19 0 0) => << 0 >>
(fromIndex:toIndex: xv19 0 1) => << 0 1 >>
(fromIndex:toIndex: xv19 0 2) => << 0 1 4 >>
(fromIndex:toIndex: xv19 0 4) => << 0 1 4 9 16 >>
(fromIndex:toIndex: xv19 1 1) => << 1 >>
(fromIndex:toIndex: xv19 1 3) => << 1 4 9 >>
(fromIndex:toIndex: xv19 -1 -1) => << 5 >>
(fromIndex:toIndex: xv19 -2 -1) => << 25 5 >>
(fromIndex:toIndex: xv19 -3 -1) => << 16 25 5 >>
(fromIndex:toIndex: xv19 -5 -1) => << 4 9 16 25 5 >>
(fromIndex:toIndex: xv19 -2 -2) => << 25 >>
(fromIndex:toIndex: xv19 -4 -2) => << 9 16 25 >>
(fromIndex:toIndex: xv19 -1 0) => << 5 0 >>
(fromIndex:toIndex: xv19 -2 1) => << 25 5 0 1 >>
(fromIndex:toIndex: xv19 -3 2) => << 16 25 5 0 1 4 >>
(fromIndex:toIndex: xv19 -4 3) => << 9 16 25 5 0 1 4 9 >>
(fromIndex:toIndex: xv19 -5 4) => << 4 9 16 25 5 0 1 4 9 16 >>

##########
Testing xv20
(debug xv20) => ConcatXVector(ReverseXVector(RepeatXVector(ReverseXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))),10)),ConcatXVector(ConcatXVector(ReverseXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))),ReverseXVector(SwizzleXVector(ArrayXVector(( 1 2 3 4 5 6 )),ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))))),RepeatXVector(BlockXVector(100,<BlockFn2>),10)))
(size xv20) => 1150
(at:ifAbsent: xv20 xv20 0) => 1
(at:ifAbsent: xv20 xv20 1) => 2
(at:ifAbsent: xv20 xv20 2) => 3
(at:ifAbsent: xv20 xv20 3) => 4
(at:ifAbsent: xv20 xv20 4) => 5
(at:ifAbsent: xv20 xv20 5) => 6
(at:ifAbsent: xv20 7) => -5
(at:ifAbsent: xv20 8) => -5
(at:ifAbsent: xv20 9) => -4
(at:ifAbsent: xv20 1073741823) => nil
(at:ifAbsent: xv20 1073741824) => nil
(at:ifAbsent: xv20 1073741825) => nil
(at:ifAbsent: xv20 -5) => 4
(at:ifAbsent: xv20 -4) => 9
(at:ifAbsent: xv20 -3) => 16
(at:ifAbsent: xv20 -2) => 25
(at:ifAbsent: xv20 -1) => 5
(at:ifAbsent: xv20 -1073741825) => nil
(at:ifAbsent: xv20 -1073741824) => nil
(at:ifAbsent: xv20 -1073741823) => nil
(at:ifAbsent: xv20 -9) => 4
(at:ifAbsent: xv20 -8) => 1
(at:ifAbsent: xv20 -7) => 0
(allMag xv20) => <True>
(allNum xv20) => <True>
(allInt xv20) => <True>
(allFrac xv20) => <False>
(someFrac xv20) => <False>
(allFloat xv20) => <False>
(someFloat xv20) => <False>
(min xv20) => -6
(max xv20) => 28
(includes: xv20 nil) => <False>
(occurrencesOf: xv20 nil) => 0
(includes: xv20 nil) => <False>
(occurrencesOf: xv20 nil) => 0
(includes: xv20 <True>) => <False>
(occurrencesOf: xv20 <True>) => 0
(includes: xv20 <False>) => <False>
(occurrencesOf: xv20 <False>) => 0
(includes: xv20 0) => <True>
(occurrencesOf: xv20 0) => 40
(includes: xv20 1) => <True>
(occurrencesOf: xv20 1) => 83
(includes: xv20 42) => <False>
(occurrencesOf: xv20 42) => 0
(detect:ifNone: xv20 negative) => -6
(detect:ifNone: xv20 nonnegative) => 1
(detect:ifNone: xv20 strictlyPositive) => 1
(= xv20 xv20) => <True>
(< xv20 xv20) => <False>
(<= xv20 xv20) => <True>
(> xv20 xv20) => <False>
(>= xv20 xv20) => <True>
(= xv20 nil) => <False>
(= xv20 nil) => <False>
(= xv20 <True>) => <False>
(= xv20 <False>) => <False>
(= xv20 0) => <False>
(= xv20 1) => <False>
(= xv20 42) => <False>
(fromIndex:toIndex: xv20 0 0) => << 1 >>
(fromIndex:toIndex: xv20 0 1) => << 1 2 >>
(fromIndex:toIndex: xv20 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv20 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv20 1 1) => << 2 >>
(fromIndex:toIndex: xv20 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv20 -1 -1) => << 5 >>
(fromIndex:toIndex: xv20 -2 -1) => << 25 5 >>
(fromIndex:toIndex: xv20 -3 -1) => << 16 25 5 >>
(fromIndex:toIndex: xv20 -5 -1) => << 4 9 16 25 5 >>
(fromIndex:toIndex: xv20 -2 -2) => << 25 >>
(fromIndex:toIndex: xv20 -4 -2) => << 9 16 25 >>
(fromIndex:toIndex: xv20 -1 0) => << 5 1 >>
(fromIndex:toIndex: xv20 -2 1) => << 25 5 1 2 >>
(fromIndex:toIndex: xv20 -3 2) => << 16 25 5 1 2 3 >>
(fromIndex:toIndex: xv20 -4 3) => << 9 16 25 5 1 2 3 4 >>
(fromIndex:toIndex: xv20 -5 4) => << 4 9 16 25 5 1 2 3 4 5 >>

##########
Testing xv01 xv01
(= xv01 xv01) => <True>
(< xv01 xv01) => <False>
(<= xv01 xv01) => <True>
(> xv01 xv01) => <False>
(>= xv01 xv01) => <True>
Testing xv01 xv02
(= xv01 xv02) => <False>
(< xv01 xv02) => <False>
(<= xv01 xv02) => <False>
(> xv01 xv02) => <True>
(>= xv01 xv02) => <True>
Testing xv01 xv03
(= xv01 xv03) => <False>
(< xv01 xv03) => <True>
(<= xv01 xv03) => <True>
(> xv01 xv03) => <False>
(>= xv01 xv03) => <False>
Testing xv01 xv04
(= xv01 xv04) => <False>
(< xv01 xv04) => <True>
(<= xv01 xv04) => <True>
(> xv01 xv04) => <False>
(>= xv01 xv04) => <False>
Testing xv01 xv05
(= xv01 xv05) => <False>
(< xv01 xv05) => <False>
(<= xv01 xv05) => <False>
(> xv01 xv05) => <True>
(>= xv01 xv05) => <True>
Testing xv01 xv06
(= xv01 xv06) => <False>
(< xv01 xv06) => <True>
(<= xv01 xv06) => <True>
(> xv01 xv06) => <False>
(>= xv01 xv06) => <False>
Testing xv01 xv07
(= xv01 xv07) => <False>
(< xv01 xv07) => <True>
(<= xv01 xv07) => <True>
(> xv01 xv07) => <False>
(>= xv01 xv07) => <False>
Testing xv01 xv08
(= xv01 xv08) => <False>
(< xv01 xv08) => <False>
(<= xv01 xv08) => <False>
(> xv01 xv08) => <True>
(>= xv01 xv08) => <True>
Testing xv01 xv09
(= xv01 xv09) => <False>
(< xv01 xv09) => <False>
(<= xv01 xv09) => <False>
(> xv01 xv09) => <True>
(>= xv01 xv09) => <True>
Testing xv01 xv10
(= xv01 xv10) => <False>
(< xv01 xv10) => <False>
(<= xv01 xv10) => <False>
(> xv01 xv10) => <True>
(>= xv01 xv10) => <True>
Testing xv01 xv11
(= xv01 xv11) => <False>
(< xv01 xv11) => <False>
(<= xv01 xv11) => <False>
(> xv01 xv11) => <True>
(>= xv01 xv11) => <True>
Testing xv01 xv12
(= xv01 xv12) => <False>
(< xv01 xv12) => <False>
(<= xv01 xv12) => <False>
(> xv01 xv12) => <True>
(>= xv01 xv12) => <True>
Testing xv01 xv13
(= xv01 xv13) => <False>
(< xv01 xv13) => <False>
(<= xv01 xv13) => <False>
(> xv01 xv13) => <True>
(>= xv01 xv13) => <True>
Testing xv01 xv14
(= xv01 xv14) => <False>
(< xv01 xv14) => <False>
(<= xv01 xv14) => <False>
(> xv01 xv14) => <True>
(>= xv01 xv14) => <True>
Testing xv01 xv15
(= xv01 xv15) => <False>
(< xv01 xv15) => <True>
(<= xv01 xv15) => <True>
(> xv01 xv15) => <False>
(>= xv01 xv15) => <False>
Testing xv01 xv16
(= xv01 xv16) => <False>
(< xv01 xv16) => <False>
(<= xv01 xv16) => <False>
(> xv01 xv16) => <True>
(>= xv01 xv16) => <True>
Testing xv01 xv17
(= xv01 xv17) => <False>
(< xv01 xv17) => <False>
(<= xv01 xv17) => <False>
(> xv01 xv17) => <True>
(>= xv01 xv17) => <True>
Testing xv01 xv18
(= xv01 xv18) => <False>
(< xv01 xv18) => <False>
(<= xv01 xv18) => <False>
(> xv01 xv18) => <True>
(>= xv01 xv18) => <True>
Testing xv01 xv19
(= xv01 xv19) => <False>
(< xv01 xv19) => <False>
(<= xv01 xv19) => <False>
(> xv01 xv19) => <True>
(>= xv01 xv19) => <True>
Testing xv01 xv20
(= xv01 xv20) => <False>
(< xv01 xv20) => <True>
(<= xv01 xv20) => <True>
(> xv01 xv20) => <False>
(>= xv01 xv20) => <False>
Testing xv02 xv01
(= xv02 xv01) => <False>
(< xv02 xv01) => <True>
(<= xv02 xv01) => <True>
(> xv02 xv01) => <False>
(>= xv02 xv01) => <False>
Testing xv02 xv02
(= xv02 xv02) => <True>
(< xv02 xv02) => <False>
(<= xv02 xv02) => <True>
(> xv02 xv02) => <False>
(>= xv02 xv02) => <True>
Testing xv02 xv03
(= xv02 xv03) => <False>
(< xv02 xv03) => <True>
(<= xv02 xv03) => <True>
(> xv02 xv03) => <False>
(>= xv02 xv03) => <False>
Testing xv02 xv04
(= xv02 xv04) => <False>
(< xv02 xv04) => <True>
(<= xv02 xv04) => <True>
(> xv02 xv04) => <False>
(>= xv02 xv04) => <False>
Testing xv02 xv05
(= xv02 xv05) => <False>
(< xv02 xv05) => <False>
(<= xv02 xv05) => <False>
(> xv02 xv05) => <True>
(>= xv02 xv05) => <True>
Testing xv02 xv06
(= xv02 xv06) => <False>
(< xv02 xv06) => <True>
(<= xv02 xv06) => <True>
(> xv02 xv06) => <False>
(>= xv02 xv06) => <False>
Testing xv02 xv07
(= xv02 xv07) => <False>
(< xv02 xv07) => <True>
(<= xv02 xv07) => <True>
(> xv02 xv07) => <False>
(>= xv02 xv07) => <False>
Testing xv02 xv08
(= xv02 xv08) => <False>
(< xv02 xv08) => <True>
(<= xv02 xv08) => <True>
(> xv02 xv08) => <False>
(>= xv02 xv08) => <False>
Testing xv02 xv09
(= xv02 xv09) => <False>
(< xv02 xv09) => <False>
(<= xv02 xv09) => <False>
(> xv02 xv09) => <True>
(>= xv02 xv09) => <True>
Testing xv02 xv10
(= xv02 xv10) => <False>
(< xv02 xv10) => <True>
(<= xv02 xv10) => <True>
(> xv02 xv10) => <False>
(>= xv02 xv10) => <False>
Testing xv02 xv11
(= xv02 xv11) => <False>
(< xv02 xv11) => <True>
(<= xv02 xv11) => <True>
(> xv02 xv11) => <False>
(>= xv02 xv11) => <False>
Testing xv02 xv12
(= xv02 xv12) => <False>
(< xv02 xv12) => <True>
(<= xv02 xv12) => <True>
(> xv02 xv12) => <False>
(>= xv02 xv12) => <False>
Testing xv02 xv13
(= xv02 xv13) => <False>
(< xv02 xv13) => <True>
(<= xv02 xv13) => <True>
(> xv02 xv13) => <False>
(>= xv02 xv13) => <False>
Testing xv02 xv14
(= xv02 xv14) => <False>
(< xv02 xv14) => <True>
(<= xv02 xv14) => <True>
(> xv02 xv14) => <False>
(>= xv02 xv14) => <False>
Testing xv02 xv15
(= xv02 xv15) => <False>
(< xv02 xv15) => <True>
(<= xv02 xv15) => <True>
(> xv02 xv15) => <False>
(>= xv02 xv15) => <False>
Testing xv02 xv16
(= xv02 xv16) => <False>
(< xv02 xv16) => <True>
(<= xv02 xv16) => <True>
(> xv02 xv16) => <False>
(>= xv02 xv16) => <False>
Testing xv02 xv17
(= xv02 xv17) => <False>
(< xv02 xv17) => <True>
(<= xv02 xv17) => <True>
(> xv02 xv17) => <False>
(>= xv02 xv17) => <False>
Testing xv02 xv18
(= xv02 xv18) => <False>
(< xv02 xv18) => <True>
(<= xv02 xv18) => <True>
(> xv02 xv18) => <False>
(>= xv02 xv18) => <False>
Testing xv02 xv19
(= xv02 xv19) => <False>
(< xv02 xv19) => <True>
(<= xv02 xv19) => <True>
(> xv02 xv19) => <False>
(>= xv02 xv19) => <False>
Testing xv02 xv20
(= xv02 xv20) => <False>
(< xv02 xv20) => <True>
(<= xv02 xv20) => <True>
(> xv02 xv20) => <False>
(>= xv02 xv20) => <False>
Testing xv03 xv01
(= xv03 xv01) => <False>
(< xv03 xv01) => <False>
(<= xv03 xv01) => <False>
(> xv03 xv01) => <True>
(>= xv03 xv01) => <True>
Testing xv03 xv02
(= xv03 xv02) => <False>
(< xv03 xv02) => <False>
(<= xv03 xv02) => <False>
(> xv03 xv02) => <True>
(>= xv03 xv02) => <True>
Testing xv03 xv03
(= xv03 xv03) => <True>
(< xv03 xv03) => <False>
(<= xv03 xv03) => <True>
(> xv03 xv03) => <False>
(>= xv03 xv03) => <True>
Testing xv03 xv04
(= xv03 xv04) => <False>
(< xv03 xv04) => <True>
(<= xv03 xv04) => <True>
(> xv03 xv04) => <False>
(>= xv03 xv04) => <False>
Testing xv03 xv05
(= xv03 xv05) => <False>
(< xv03 xv05) => <False>
(<= xv03 xv05) => <False>
(> xv03 xv05) => <True>
(>= xv03 xv05) => <True>
Testing xv03 xv06
(= xv03 xv06) => <False>
(< xv03 xv06) => <True>
(<= xv03 xv06) => <True>
(> xv03 xv06) => <False>
(>= xv03 xv06) => <False>
Testing xv03 xv07
(= xv03 xv07) => <False>
(< xv03 xv07) => <True>
(<= xv03 xv07) => <True>
(> xv03 xv07) => <False>
(>= xv03 xv07) => <False>
Testing xv03 xv08
(= xv03 xv08) => <False>
(< xv03 xv08) => <False>
(<= xv03 xv08) => <False>
(> xv03 xv08) => <True>
(>= xv03 xv08) => <True>
Testing xv03 xv09
(= xv03 xv09) => <False>
(< xv03 xv09) => <False>
(<= xv03 xv09) => <False>
(> xv03 xv09) => <True>
(>= xv03 xv09) => <True>
Testing xv03 xv10
(= xv03 xv10) => <False>
(< xv03 xv10) => <False>
(<= xv03 xv10) => <False>
(> xv03 xv10) => <True>
(>= xv03 xv10) => <True>
Testing xv03 xv11
(= xv03 xv11) => <False>
(< xv03 xv11) => <False>
(<= xv03 xv11) => <False>
(> xv03 xv11) => <True>
(>= xv03 xv11) => <True>
Testing xv03 xv12
(= xv03 xv12) => <False>
(< xv03 xv12) => <False>
(<= xv03 xv12) => <False>
(> xv03 xv12) => <True>
(>= xv03 xv12) => <True>
Testing xv03 xv13
(= xv03 xv13) => <False>
(< xv03 xv13) => <False>
(<= xv03 xv13) => <False>
(> xv03 xv13) => <True>
(>= xv03 xv13) => <True>
Testing xv03 xv14
(= xv03 xv14) => <False>
(< xv03 xv14) => <False>
(<= xv03 xv14) => <False>
(> xv03 xv14) => <True>
(>= xv03 xv14) => <True>
Testing xv03 xv15
(= xv03 xv15) => <False>
(< xv03 xv15) => <True>
(<= xv03 xv15) => <True>
(> xv03 xv15) => <False>
(>= xv03 xv15) => <False>
Testing xv03 xv16
(= xv03 xv16) => <False>
(< xv03 xv16) => <False>
(<= xv03 xv16) => <False>
(> xv03 xv16) => <True>
(>= xv03 xv16) => <True>
Testing xv03 xv17
(= xv03 xv17) => <False>
(< xv03 xv17) => <False>
(<= xv03 xv17) => <False>
(> xv03 xv17) => <True>
(>= xv03 xv17) => <True>
Testing xv03 xv18
(= xv03 xv18) => <False>
(< xv03 xv18) => <False>
(<= xv03 xv18) => <False>
(> xv03 xv18) => <True>
(>= xv03 xv18) => <True>
Testing xv03 xv19
(= xv03 xv19) => <False>
(< xv03 xv19) => <False>
(<= xv03 xv19) => <False>
(> xv03 xv19) => <True>
(>= xv03 xv19) => <True>
Testing xv03 xv20
(= xv03 xv20) => <False>
(< xv03 xv20) => <True>
(<= xv03 xv20) => <True>
(> xv03 xv20) => <False>
(>= xv03 xv20) => <False>
Testing xv04 xv01
(= xv04 xv01) => <False>
(< xv04 xv01) => <False>
(<= xv04 xv01) => <False>
(> xv04 xv01) => <True>
(>= xv04 xv01) => <True>
Testing xv04 xv02
(= xv04 xv02) => <False>
(< xv04 xv02) => <False>
(<= xv04 xv02) => <False>
(> xv04 xv02) => <True>
(>= xv04 xv02) => <True>
Testing xv04 xv03
(= xv04 xv03) => <False>
(< xv04 xv03) => <False>
(<= xv04 xv03) => <False>
(> xv04 xv03) => <True>
(>= xv04 xv03) => <True>
Testing xv04 xv04
(= xv04 xv04) => <True>
(< xv04 xv04) => <False>
(<= xv04 xv04) => <True>
(> xv04 xv04) => <False>
(>= xv04 xv04) => <True>
Testing xv04 xv05
(= xv04 xv05) => <False>
(< xv04 xv05) => <False>
(<= xv04 xv05) => <False>
(> xv04 xv05) => <True>
(>= xv04 xv05) => <True>
Testing xv04 xv06
(= xv04 xv06) => <False>
(< xv04 xv06) => <False>
(<= xv04 xv06) => <False>
(> xv04 xv06) => <True>
(>= xv04 xv06) => <True>
Testing xv04 xv07
(= xv04 xv07) => <False>
(< xv04 xv07) => <True>
(<= xv04 xv07) => <True>
(> xv04 xv07) => <False>
(>= xv04 xv07) => <False>
Testing xv04 xv08
(= xv04 xv08) => <False>
(< xv04 xv08) => <False>
(<= xv04 xv08) => <False>
(> xv04 xv08) => <True>
(>= xv04 xv08) => <True>
Testing xv04 xv09
(= xv04 xv09) => <False>
(< xv04 xv09) => <False>
(<= xv04 xv09) => <False>
(> xv04 xv09) => <True>
(>= xv04 xv09) => <True>
Testing xv04 xv10
(= xv04 xv10) => <False>
(< xv04 xv10) => <False>
(<= xv04 xv10) => <False>
(> xv04 xv10) => <True>
(>= xv04 xv10) => <True>
Testing xv04 xv11
(= xv04 xv11) => <False>
(< xv04 xv11) => <False>
(<= xv04 xv11) => <False>
(> xv04 xv11) => <True>
(>= xv04 xv11) => <True>
Testing xv04 xv12
(= xv04 xv12) => <False>
(< xv04 xv12) => <False>
(<= xv04 xv12) => <False>
(> xv04 xv12) => <True>
(>= xv04 xv12) => <True>
Testing xv04 xv13
(= xv04 xv13) => <False>
(< xv04 xv13) => <False>
(<= xv04 xv13) => <False>
(> xv04 xv13) => <True>
(>= xv04 xv13) => <True>
Testing xv04 xv14
(= xv04 xv14) => <False>
(< xv04 xv14) => <False>
(<= xv04 xv14) => <False>
(> xv04 xv14) => <True>
(>= xv04 xv14) => <True>
Testing xv04 xv15
(= xv04 xv15) => <False>
(< xv04 xv15) => <False>
(<= xv04 xv15) => <True>
(> xv04 xv15) => <False>
(>= xv04 xv15) => <True>
Testing xv04 xv16
(= xv04 xv16) => <False>
(< xv04 xv16) => <False>
(<= xv04 xv16) => <False>
(> xv04 xv16) => <True>
(>= xv04 xv16) => <True>
Testing xv04 xv17
(= xv04 xv17) => <False>
(< xv04 xv17) => <False>
(<= xv04 xv17) => <False>
(> xv04 xv17) => <True>
(>= xv04 xv17) => <True>
Testing xv04 xv18
(= xv04 xv18) => <False>
(< xv04 xv18) => <False>
(<= xv04 xv18) => <False>
(> xv04 xv18) => <True>
(>= xv04 xv18) => <True>
Testing xv04 xv19
(= xv04 xv19) => <False>
(< xv04 xv19) => <False>
(<= xv04 xv19) => <False>
(> xv04 xv19) => <True>
(>= xv04 xv19) => <True>
Testing xv04 xv20
(= xv04 xv20) => <False>
(< xv04 xv20) => <False>
(<= xv04 xv20) => <False>
(> xv04 xv20) => <True>
(>= xv04 xv20) => <True>
Testing xv05 xv01
(= xv05 xv01) => <False>
(< xv05 xv01) => <True>
(<= xv05 xv01) => <True>
(> xv05 xv01) => <False>
(>= xv05 xv01) => <False>
Testing xv05 xv02
(= xv05 xv02) => <False>
(< xv05 xv02) => <True>
(<= xv05 xv02) => <True>
(> xv05 xv02) => <False>
(>= xv05 xv02) => <False>
Testing xv05 xv03
(= xv05 xv03) => <False>
(< xv05 xv03) => <True>
(<= xv05 xv03) => <True>
(> xv05 xv03) => <False>
(>= xv05 xv03) => <False>
Testing xv05 xv04
(= xv05 xv04) => <False>
(< xv05 xv04) => <True>
(<= xv05 xv04) => <True>
(> xv05 xv04) => <False>
(>= xv05 xv04) => <False>
Testing xv05 xv05
(= xv05 xv05) => <True>
(< xv05 xv05) => <False>
(<= xv05 xv05) => <True>
(> xv05 xv05) => <False>
(>= xv05 xv05) => <True>
Testing xv05 xv06
(= xv05 xv06) => <False>
(< xv05 xv06) => <True>
(<= xv05 xv06) => <True>
(> xv05 xv06) => <False>
(>= xv05 xv06) => <False>
Testing xv05 xv07
(= xv05 xv07) => <False>
(< xv05 xv07) => <True>
(<= xv05 xv07) => <True>
(> xv05 xv07) => <False>
(>= xv05 xv07) => <False>
Testing xv05 xv08
(= xv05 xv08) => <False>
(< xv05 xv08) => <True>
(<= xv05 xv08) => <True>
(> xv05 xv08) => <False>
(>= xv05 xv08) => <False>
Testing xv05 xv09
(= xv05 xv09) => <False>
(< xv05 xv09) => <False>
(<= xv05 xv09) => <True>
(> xv05 xv09) => <False>
(>= xv05 xv09) => <True>
Testing xv05 xv10
(= xv05 xv10) => <False>
(< xv05 xv10) => <True>
(<= xv05 xv10) => <True>
(> xv05 xv10) => <False>
(>= xv05 xv10) => <False>
Testing xv05 xv11
(= xv05 xv11) => <False>
(< xv05 xv11) => <True>
(<= xv05 xv11) => <True>
(> xv05 xv11) => <False>
(>= xv05 xv11) => <False>
Testing xv05 xv12
(= xv05 xv12) => <False>
(< xv05 xv12) => <True>
(<= xv05 xv12) => <True>
(> xv05 xv12) => <False>
(>= xv05 xv12) => <False>
Testing xv05 xv13
(= xv05 xv13) => <False>
(< xv05 xv13) => <True>
(<= xv05 xv13) => <True>
(> xv05 xv13) => <False>
(>= xv05 xv13) => <False>
Testing xv05 xv14
(= xv05 xv14) => <False>
(< xv05 xv14) => <True>
(<= xv05 xv14) => <True>
(> xv05 xv14) => <False>
(>= xv05 xv14) => <False>
Testing xv05 xv15
(= xv05 xv15) => <False>
(< xv05 xv15) => <True>
(<= xv05 xv15) => <True>
(> xv05 xv15) => <False>
(>= xv05 xv15) => <False>
Testing xv05 xv16
(= xv05 xv16) => <False>
(< xv05 xv16) => <True>
(<= xv05 xv16) => <True>
(> xv05 xv16) => <False>
(>= xv05 xv16) => <False>
Testing xv05 xv17
(= xv05 xv17) => <False>
(< xv05 xv17) => <True>
(<= xv05 xv17) => <True>
(> xv05 xv17) => <False>
(>= xv05 xv17) => <False>
Testing xv05 xv18
(= xv05 xv18) => <False>
(< xv05 xv18) => <True>
(<= xv05 xv18) => <True>
(> xv05 xv18) => <False>
(>= xv05 xv18) => <False>
Testing xv05 xv19
(= xv05 xv19) => <False>
(< xv05 xv19) => <True>
(<= xv05 xv19) => <True>
(> xv05 xv19) => <False>
(>= xv05 xv19) => <False>
Testing xv05 xv20
(= xv05 xv20) => <False>
(< xv05 xv20) => <True>
(<= xv05 xv20) => <True>
(> xv05 xv20) => <False>
(>= xv05 xv20) => <False>
Testing xv06 xv01
(= xv06 xv01) => <False>
(< xv06 xv01) => <False>
(<= xv06 xv01) => <False>
(> xv06 xv01) => <True>
(>= xv06 xv01) => <True>
Testing xv06 xv02
(= xv06 xv02) => <False>
(< xv06 xv02) => <False>
(<= xv06 xv02) => <False>
(> xv06 xv02) => <True>
(>= xv06 xv02) => <True>
Testing xv06 xv03
(= xv06 xv03) => <False>
(< xv06 xv03) => <False>
(<= xv06 xv03) => <False>
(> xv06 xv03) => <True>
(>= xv06 xv03) => <True>
Testing xv06 xv04
(= xv06 xv04) => <False>
(< xv06 xv04) => <True>
(<= xv06 xv04) => <True>
(> xv06 xv04) => <False>
(>= xv06 xv04) => <False>
Testing xv06 xv05
(= xv06 xv05) => <False>
(< xv06 xv05) => <False>
(<= xv06 xv05) => <False>
(> xv06 xv05) => <True>
(>= xv06 xv05) => <True>
Testing xv06 xv07
(= xv06 xv07) => <False>
(< xv06 xv07) => <True>
(<= xv06 xv07) => <True>
(> xv06 xv07) => <False>
(>= xv06 xv07) => <False>
Testing xv06 xv08
(= xv06 xv08) => <False>
(< xv06 xv08) => <False>
(<= xv06 xv08) => <False>
(> xv06 xv08) => <True>
(>= xv06 xv08) => <True>
Testing xv06 xv09
(= xv06 xv09) => <False>
(< xv06 xv09) => <False>
(<= xv06 xv09) => <False>
(> xv06 xv09) => <True>
(>= xv06 xv09) => <True>
Testing xv06 xv11
(= xv06 xv11) => <False>
(< xv06 xv11) => <False>
(<= xv06 xv11) => <False>
(> xv06 xv11) => <True>
(>= xv06 xv11) => <True>
Testing xv06 xv12
(= xv06 xv12) => <False>
(< xv06 xv12) => <False>
(<= xv06 xv12) => <False>
(> xv06 xv12) => <True>
(>= xv06 xv12) => <True>
Testing xv06 xv13
(= xv06 xv13) => <False>
(< xv06 xv13) => <False>
(<= xv06 xv13) => <False>
(> xv06 xv13) => <True>
(>= xv06 xv13) => <True>
Testing xv06 xv14
(= xv06 xv14) => <False>
(< xv06 xv14) => <False>
(<= xv06 xv14) => <False>
(> xv06 xv14) => <True>
(>= xv06 xv14) => <True>
Testing xv06 xv15
(= xv06 xv15) => <False>
(< xv06 xv15) => <True>
(<= xv06 xv15) => <True>
(> xv06 xv15) => <False>
(>= xv06 xv15) => <False>
Testing xv06 xv16
(= xv06 xv16) => <False>
(< xv06 xv16) => <False>
(<= xv06 xv16) => <False>
(> xv06 xv16) => <True>
(>= xv06 xv16) => <True>
Testing xv06 xv18
(= xv06 xv18) => <False>
(< xv06 xv18) => <False>
(<= xv06 xv18) => <False>
(> xv06 xv18) => <True>
(>= xv06 xv18) => <True>
Testing xv06 xv19
(= xv06 xv19) => <False>
(< xv06 xv19) => <False>
(<= xv06 xv19) => <False>
(> xv06 xv19) => <True>
(>= xv06 xv19) => <True>
Testing xv07 xv01
(= xv07 xv01) => <False>
(< xv07 xv01) => <False>
(<= xv07 xv01) => <False>
(> xv07 xv01) => <True>
(>= xv07 xv01) => <True>
Testing xv07 xv02
(= xv07 xv02) => <False>
(< xv07 xv02) => <False>
(<= xv07 xv02) => <False>
(> xv07 xv02) => <True>
(>= xv07 xv02) => <True>
Testing xv07 xv03
(= xv07 xv03) => <False>
(< xv07 xv03) => <False>
(<= xv07 xv03) => <False>
(> xv07 xv03) => <True>
(>= xv07 xv03) => <True>
Testing xv07 xv04
(= xv07 xv04) => <False>
(< xv07 xv04) => <False>
(<= xv07 xv04) => <False>
(> xv07 xv04) => <True>
(>= xv07 xv04) => <True>
Testing xv07 xv05
(= xv07 xv05) => <False>
(< xv07 xv05) => <False>
(<= xv07 xv05) => <False>
(> xv07 xv05) => <True>
(>= xv07 xv05) => <True>
Testing xv07 xv06
(= xv07 xv06) => <False>
(< xv07 xv06) => <False>
(<= xv07 xv06) => <False>
(> xv07 xv06) => <True>
(>= xv07 xv06) => <True>
Testing xv07 xv07
(= xv07 xv07) => <True>
(< xv07 xv07) => <False>
(<= xv07 xv07) => <True>
(> xv07 xv07) => <False>
(>= xv07 xv07) => <True>
Testing xv07 xv08
(= xv07 xv08) => <False>
(< xv07 xv08) => <False>
(<= xv07 xv08) => <False>
(> xv07 xv08) => <True>
(>= xv07 xv08) => <True>
Testing xv07 xv09
(= xv07 xv09) => <False>
(< xv07 xv09) => <False>
(<= xv07 xv09) => <False>
(> xv07 xv09) => <True>
(>= xv07 xv09) => <True>
Testing xv07 xv10
(= xv07 xv10) => <False>
(< xv07 xv10) => <False>
(<= xv07 xv10) => <False>
(> xv07 xv10) => <True>
(>= xv07 xv10) => <True>
Testing xv07 xv11
(= xv07 xv11) => <False>
(< xv07 xv11) => <False>
(<= xv07 xv11) => <False>
(> xv07 xv11) => <True>
(>= xv07 xv11) => <True>
Testing xv07 xv12
(= xv07 xv12) => <False>
(< xv07 xv12) => <False>
(<= xv07 xv12) => <False>
(> xv07 xv12) => <True>
(>= xv07 xv12) => <True>
Testing xv07 xv13
(= xv07 xv13) => <False>
(< xv07 xv13) => <False>
(<= xv07 xv13) => <False>
(> xv07 xv13) => <True>
(>= xv07 xv13) => <True>
Testing xv07 xv14
(= xv07 xv14) => <False>
(< xv07 xv14) => <False>
(<= xv07 xv14) => <False>
(> xv07 xv14) => <True>
(>= xv07 xv14) => <True>
Testing xv07 xv15
(= xv07 xv15) => <False>
(< xv07 xv15) => <False>
(<= xv07 xv15) => <False>
(> xv07 xv15) => <True>
(>= xv07 xv15) => <True>
Testing xv07 xv16
(= xv07 xv16) => <False>
(< xv07 xv16) => <False>
(<= xv07 xv16) => <False>
(> xv07 xv16) => <True>
(>= xv07 xv16) => <True>
Testing xv07 xv17
(= xv07 xv17) => <False>
(< xv07 xv17) => <False>
(<= xv07 xv17) => <False>
(> xv07 xv17) => <True>
(>= xv07 xv17) => <True>
Testing xv07 xv18
(= xv07 xv18) => <False>
(< xv07 xv18) => <False>
(<= xv07 xv18) => <False>
(> xv07 xv18) => <True>
(>= xv07 xv18) => <True>
Testing xv07 xv19
(= xv07 xv19) => <False>
(< xv07 xv19) => <False>
(<= xv07 xv19) => <False>
(> xv07 xv19) => <True>
(>= xv07 xv19) => <True>
Testing xv07 xv20
(= xv07 xv20) => <False>
(< xv07 xv20) => <False>
(<= xv07 xv20) => <False>
(> xv07 xv20) => <True>
(>= xv07 xv20) => <True>
Testing xv08 xv01
(= xv08 xv01) => <False>
(< xv08 xv01) => <True>
(<= xv08 xv01) => <True>
(> xv08 xv01) => <False>
(>= xv08 xv01) => <False>
Testing xv08 xv02
(= xv08 xv02) => <False>
(< xv08 xv02) => <False>
(<= xv08 xv02) => <False>
(> xv08 xv02) => <True>
(>= xv08 xv02) => <True>
Testing xv08 xv03
(= xv08 xv03) => <False>
(< xv08 xv03) => <True>
(<= xv08 xv03) => <True>
(> xv08 xv03) => <False>
(>= xv08 xv03) => <False>
Testing xv08 xv04
(= xv08 xv04) => <False>
(< xv08 xv04) => <True>
(<= xv08 xv04) => <True>
(> xv08 xv04) => <False>
(>= xv08 xv04) => <False>
Testing xv08 xv05
(= xv08 xv05) => <False>
(< xv08 xv05) => <False>
(<= xv08 xv05) => <False>
(> xv08 xv05) => <True>
(>= xv08 xv05) => <True>
Testing xv08 xv06
(= xv08 xv06) => <False>
(< xv08 xv06) => <True>
(<= xv08 xv06) => <True>
(> xv08 xv06) => <False>
(>= xv08 xv06) => <False>
Testing xv08 xv07
(= xv08 xv07) => <False>
(< xv08 xv07) => <True>
(<= xv08 xv07) => <True>
(> xv08 xv07) => <False>
(>= xv08 xv07) => <False>
Testing xv08 xv08
(= xv08 xv08) => <True>
(< xv08 xv08) => <False>
(<= xv08 xv08) => <True>
(> xv08 xv08) => <False>
(>= xv08 xv08) => <True>
Testing xv08 xv09
(= xv08 xv09) => <False>
(< xv08 xv09) => <False>
(<= xv08 xv09) => <False>
(> xv08 xv09) => <True>
(>= xv08 xv09) => <True>
Testing xv08 xv10
(= xv08 xv10) => <False>
(< xv08 xv10) => <True>
(<= xv08 xv10) => <True>
(> xv08 xv10) => <False>
(>= xv08 xv10) => <False>
Testing xv08 xv11
(= xv08 xv11) => <False>
(< xv08 xv11) => <False>
(<= xv08 xv11) => <True>
(> xv08 xv11) => <False>
(>= xv08 xv11) => <True>
Testing xv08 xv12
(= xv08 xv12) => <False>
(< xv08 xv12) => <True>
(<= xv08 xv12) => <True>
(> xv08 xv12) => <False>
(>= xv08 xv12) => <False>
Testing xv08 xv13
(= xv08 xv13) => <False>
(< xv08 xv13) => <True>
(<= xv08 xv13) => <True>
(> xv08 xv13) => <False>
(>= xv08 xv13) => <False>
Testing xv08 xv14
(= xv08 xv14) => <False>
(< xv08 xv14) => <True>
(<= xv08 xv14) => <True>
(> xv08 xv14) => <False>
(>= xv08 xv14) => <False>
Testing xv08 xv15
(= xv08 xv15) => <False>
(< xv08 xv15) => <True>
(<= xv08 xv15) => <True>
(> xv08 xv15) => <False>
(>= xv08 xv15) => <False>
Testing xv08 xv16
(= xv08 xv16) => <False>
(< xv08 xv16) => <True>
(<= xv08 xv16) => <True>
(> xv08 xv16) => <False>
(>= xv08 xv16) => <False>
Testing xv08 xv17
(= xv08 xv17) => <False>
(< xv08 xv17) => <True>
(<= xv08 xv17) => <True>
(> xv08 xv17) => <False>
(>= xv08 xv17) => <False>
Testing xv08 xv18
(= xv08 xv18) => <False>
(< xv08 xv18) => <True>
(<= xv08 xv18) => <True>
(> xv08 xv18) => <False>
(>= xv08 xv18) => <False>
Testing xv08 xv19
(= xv08 xv19) => <False>
(< xv08 xv19) => <True>
(<= xv08 xv19) => <True>
(> xv08 xv19) => <False>
(>= xv08 xv19) => <False>
Testing xv08 xv20
(= xv08 xv20) => <False>
(< xv08 xv20) => <True>
(<= xv08 xv20) => <True>
(> xv08 xv20) => <False>
(>= xv08 xv20) => <False>
Testing xv09 xv01
(= xv09 xv01) => <False>
(< xv09 xv01) => <True>
(<= xv09 xv01) => <True>
(> xv09 xv01) => <False>
(>= xv09 xv01) => <False>
Testing xv09 xv02
(= xv09 xv02) => <False>
(< xv09 xv02) => <True>
(<= xv09 xv02) => <True>
(> xv09 xv02) => <False>
(>= xv09 xv02) => <False>
Testing xv09 xv03
(= xv09 xv03) => <False>
(< xv09 xv03) => <True>
(<= xv09 xv03) => <True>
(> xv09 xv03) => <False>
(>= xv09 xv03) => <False>
Testing xv09 xv04
(= xv09 xv04) => <False>
(< xv09 xv04) => <True>
(<= xv09 xv04) => <True>
(> xv09 xv04) => <False>
(>= xv09 xv04) => <False>
Testing xv09 xv05
(= xv09 xv05) => <False>
(< xv09 xv05) => <False>
(<= xv09 xv05) => <True>
(> xv09 xv05) => <False>
(>= xv09 xv05) => <True>
Testing xv09 xv06
(= xv09 xv06) => <False>
(< xv09 xv06) => <True>
(<= xv09 xv06) => <True>
(> xv09 xv06) => <False>
(>= xv09 xv06) => <False>
Testing xv09 xv07
(= xv09 xv07) => <False>
(< xv09 xv07) => <True>
(<= xv09 xv07) => <True>
(> xv09 xv07) => <False>
(>= xv09 xv07) => <False>
Testing xv09 xv08
(= xv09 xv08) => <False>
(< xv09 xv08) => <True>
(<= xv09 xv08) => <True>
(> xv09 xv08) => <False>
(>= xv09 xv08) => <False>
Testing xv09 xv09
(= xv09 xv09) => <True>
(< xv09 xv09) => <False>
(<= xv09 xv09) => <True>
(> xv09 xv09) => <False>
(>= xv09 xv09) => <True>
Testing xv09 xv10
(= xv09 xv10) => <False>
(< xv09 xv10) => <True>
(<= xv09 xv10) => <True>
(> xv09 xv10) => <False>
(>= xv09 xv10) => <False>
Testing xv09 xv11
(= xv09 xv11) => <False>
(< xv09 xv11) => <True>
(<= xv09 xv11) => <True>
(> xv09 xv11) => <False>
(>= xv09 xv11) => <False>
Testing xv09 xv12
(= xv09 xv12) => <False>
(< xv09 xv12) => <True>
(<= xv09 xv12) => <True>
(> xv09 xv12) => <False>
(>= xv09 xv12) => <False>
Testing xv09 xv13
(= xv09 xv13) => <False>
(< xv09 xv13) => <True>
(<= xv09 xv13) => <True>
(> xv09 xv13) => <False>
(>= xv09 xv13) => <False>
Testing xv09 xv14
(= xv09 xv14) => <False>
(< xv09 xv14) => <True>
(<= xv09 xv14) => <True>
(> xv09 xv14) => <False>
(>= xv09 xv14) => <False>
Testing xv09 xv15
(= xv09 xv15) => <False>
(< xv09 xv15) => <True>
(<= xv09 xv15) => <True>
(> xv09 xv15) => <False>
(>= xv09 xv15) => <False>
Testing xv09 xv16
(= xv09 xv16) => <False>
(< xv09 xv16) => <True>
(<= xv09 xv16) => <True>
(> xv09 xv16) => <False>
(>= xv09 xv16) => <False>
Testing xv09 xv17
(= xv09 xv17) => <False>
(< xv09 xv17) => <True>
(<= xv09 xv17) => <True>
(> xv09 xv17) => <False>
(>= xv09 xv17) => <False>
Testing xv09 xv18
(= xv09 xv18) => <False>
(< xv09 xv18) => <True>
(<= xv09 xv18) => <True>
(> xv09 xv18) => <False>
(>= xv09 xv18) => <False>
Testing xv09 xv19
(= xv09 xv19) => <False>
(< xv09 xv19) => <True>
(<= xv09 xv19) => <True>
(> xv09 xv19) => <False>
(>= xv09 xv19) => <False>
Testing xv09 xv20
(= xv09 xv20) => <False>
(< xv09 xv20) => <True>
(<= xv09 xv20) => <True>
(> xv09 xv20) => <False>
(>= xv09 xv20) => <False>
Testing xv10 xv01
(= xv10 xv01) => <False>
(< xv10 xv01) => <True>
(<= xv10 xv01) => <True>
(> xv10 xv01) => <False>
(>= xv10 xv01) => <False>
Testing xv10 xv02
(= xv10 xv02) => <False>
(< xv10 xv02) => <False>
(<= xv10 xv02) => <False>
(> xv10 xv02) => <True>
(>= xv10 xv02) => <True>
Testing xv10 xv03
(= xv10 xv03) => <False>
(< xv10 xv03) => <True>
(<= xv10 xv03) => <True>
(> xv10 xv03) => <False>
(>= xv10 xv03) => <False>
Testing xv10 xv04
(= xv10 xv04) => <False>
(< xv10 xv04) => <True>
(<= xv10 xv04) => <True>
(> xv10 xv04) => <False>
(>= xv10 xv04) => <False>
Testing xv10 xv05
(= xv10 xv05) => <False>
(< xv10 xv05) => <False>
(<= xv10 xv05) => <False>
(> xv10 xv05) => <True>
(>= xv10 xv05) => <True>
Testing xv10 xv07
(= xv10 xv07) => <False>
(< xv10 xv07) => <True>
(<= xv10 xv07) => <True>
(> xv10 xv07) => <False>
(>= xv10 xv07) => <False>
Testing xv10 xv08
(= xv10 xv08) => <False>
(< xv10 xv08) => <False>
(<= xv10 xv08) => <False>
(> xv10 xv08) => <True>
(>= xv10 xv08) => <True>
Testing xv10 xv09
(= xv10 xv09) => <False>
(< xv10 xv09) => <False>
(<= xv10 xv09) => <False>
(> xv10 xv09) => <True>
(>= xv10 xv09) => <True>
Testing xv10 xv11
(= xv10 xv11) => <False>
(< xv10 xv11) => <False>
(<= xv10 xv11) => <False>
(> xv10 xv11) => <True>
(>= xv10 xv11) => <True>
Testing xv10 xv12
(= xv10 xv12) => <False>
(< xv10 xv12) => <True>
(<= xv10 xv12) => <True>
(> xv10 xv12) => <False>
(>= xv10 xv12) => <False>
Testing xv10 xv13
(= xv10 xv13) => <False>
(< xv10 xv13) => <True>
(<= xv10 xv13) => <True>
(> xv10 xv13) => <False>
(>= xv10 xv13) => <False>
Testing xv10 xv14
(= xv10 xv14) => <False>
(< xv10 xv14) => <True>
(<= xv10 xv14) => <True>
(> xv10 xv14) => <False>
(>= xv10 xv14) => <False>
Testing xv10 xv15
(= xv10 xv15) => <False>
(< xv10 xv15) => <True>
(<= xv10 xv15) => <True>
(> xv10 xv15) => <False>
(>= xv10 xv15) => <False>
Testing xv10 xv16
(= xv10 xv16) => <False>
(< xv10 xv16) => <True>
(<= xv10 xv16) => <True>
(> xv10 xv16) => <False>
(>= xv10 xv16) => <False>
Testing xv10 xv18
(= xv10 xv18) => <False>
(< xv10 xv18) => <True>
(<= xv10 xv18) => <True>
(> xv10 xv18) => <False>
(>= xv10 xv18) => <False>
Testing xv10 xv19
(= xv10 xv19) => <False>
(< xv10 xv19) => <True>
(<= xv10 xv19) => <True>
(> xv10 xv19) => <False>
(>= xv10 xv19) => <False>
Testing xv11 xv01
(= xv11 xv01) => <False>
(< xv11 xv01) => <True>
(<= xv11 xv01) => <True>
(> xv11 xv01) => <False>
(>= xv11 xv01) => <False>
Testing xv11 xv02
(= xv11 xv02) => <False>
(< xv11 xv02) => <False>
(<= xv11 xv02) => <False>
(> xv11 xv02) => <True>
(>= xv11 xv02) => <True>
Testing xv11 xv03
(= xv11 xv03) => <False>
(< xv11 xv03) => <True>
(<= xv11 xv03) => <True>
(> xv11 xv03) => <False>
(>= xv11 xv03) => <False>
Testing xv11 xv04
(= xv11 xv04) => <False>
(< xv11 xv04) => <True>
(<= xv11 xv04) => <True>
(> xv11 xv04) => <False>
(>= xv11 xv04) => <False>
Testing xv11 xv05
(= xv11 xv05) => <False>
(< xv11 xv05) => <False>
(<= xv11 xv05) => <False>
(> xv11 xv05) => <True>
(>= xv11 xv05) => <True>
Testing xv11 xv06
(= xv11 xv06) => <False>
(< xv11 xv06) => <True>
(<= xv11 xv06) => <True>
(> xv11 xv06) => <False>
(>= xv11 xv06) => <False>
Testing xv11 xv07
(= xv11 xv07) => <False>
(< xv11 xv07) => <True>
(<= xv11 xv07) => <True>
(> xv11 xv07) => <False>
(>= xv11 xv07) => <False>
Testing xv11 xv08
(= xv11 xv08) => <False>
(< xv11 xv08) => <False>
(<= xv11 xv08) => <True>
(> xv11 xv08) => <False>
(>= xv11 xv08) => <True>
Testing xv11 xv09
(= xv11 xv09) => <False>
(< xv11 xv09) => <False>
(<= xv11 xv09) => <False>
(> xv11 xv09) => <True>
(>= xv11 xv09) => <True>
Testing xv11 xv10
(= xv11 xv10) => <False>
(< xv11 xv10) => <True>
(<= xv11 xv10) => <True>
(> xv11 xv10) => <False>
(>= xv11 xv10) => <False>
Testing xv11 xv11
(= xv11 xv11) => <True>
(< xv11 xv11) => <False>
(<= xv11 xv11) => <True>
(> xv11 xv11) => <False>
(>= xv11 xv11) => <True>
Testing xv11 xv12
(= xv11 xv12) => <False>
(< xv11 xv12) => <True>
(<= xv11 xv12) => <True>
(> xv11 xv12) => <False>
(>= xv11 xv12) => <False>
Testing xv11 xv13
(= xv11 xv13) => <False>
(< xv11 xv13) => <True>
(<= xv11 xv13) => <True>
(> xv11 xv13) => <False>
(>= xv11 xv13) => <False>
Testing xv11 xv14
(= xv11 xv14) => <False>
(< xv11 xv14) => <True>
(<= xv11 xv14) => <True>
(> xv11 xv14) => <False>
(>= xv11 xv14) => <False>
Testing xv11 xv15
(= xv11 xv15) => <False>
(< xv11 xv15) => <True>
(<= xv11 xv15) => <True>
(> xv11 xv15) => <False>
(>= xv11 xv15) => <False>
Testing xv11 xv16
(= xv11 xv16) => <False>
(< xv11 xv16) => <True>
(<= xv11 xv16) => <True>
(> xv11 xv16) => <False>
(>= xv11 xv16) => <False>
Testing xv11 xv17
(= xv11 xv17) => <False>
(< xv11 xv17) => <True>
(<= xv11 xv17) => <True>
(> xv11 xv17) => <False>
(>= xv11 xv17) => <False>
Testing xv11 xv18
(= xv11 xv18) => <False>
(< xv11 xv18) => <True>
(<= xv11 xv18) => <True>
(> xv11 xv18) => <False>
(>= xv11 xv18) => <False>
Testing xv11 xv19
(= xv11 xv19) => <False>
(< xv11 xv19) => <True>
(<= xv11 xv19) => <True>
(> xv11 xv19) => <False>
(>= xv11 xv19) => <False>
Testing xv11 xv20
(= xv11 xv20) => <False>
(< xv11 xv20) => <True>
(<= xv11 xv20) => <True>
(> xv11 xv20) => <False>
(>= xv11 xv20) => <False>
Testing xv12 xv01
(= xv12 xv01) => <False>
(< xv12 xv01) => <True>
(<= xv12 xv01) => <True>
(> xv12 xv01) => <False>
(>= xv12 xv01) => <False>
Testing xv12 xv02
(= xv12 xv02) => <False>
(< xv12 xv02) => <False>
(<= xv12 xv02) => <False>
(> xv12 xv02) => <True>
(>= xv12 xv02) => <True>
Testing xv12 xv03
(= xv12 xv03) => <False>
(< xv12 xv03) => <True>
(<= xv12 xv03) => <True>
(> xv12 xv03) => <False>
(>= xv12 xv03) => <False>
Testing xv12 xv04
(= xv12 xv04) => <False>
(< xv12 xv04) => <True>
(<= xv12 xv04) => <True>
(> xv12 xv04) => <False>
(>= xv12 xv04) => <False>
Testing xv12 xv05
(= xv12 xv05) => <False>
(< xv12 xv05) => <False>
(<= xv12 xv05) => <False>
(> xv12 xv05) => <True>
(>= xv12 xv05) => <True>
Testing xv12 xv06
(= xv12 xv06) => <False>
(< xv12 xv06) => <True>
(<= xv12 xv06) => <True>
(> xv12 xv06) => <False>
(>= xv12 xv06) => <False>
Testing xv12 xv07
(= xv12 xv07) => <False>
(< xv12 xv07) => <True>
(<= xv12 xv07) => <True>
(> xv12 xv07) => <False>
(>= xv12 xv07) => <False>
Testing xv12 xv08
(= xv12 xv08) => <False>
(< xv12 xv08) => <False>
(<= xv12 xv08) => <False>
(> xv12 xv08) => <True>
(>= xv12 xv08) => <True>
Testing xv12 xv09
(= xv12 xv09) => <False>
(< xv12 xv09) => <False>
(<= xv12 xv09) => <False>
(> xv12 xv09) => <True>
(>= xv12 xv09) => <True>
Testing xv12 xv10
(= xv12 xv10) => <False>
(< xv12 xv10) => <False>
(<= xv12 xv10) => <False>
(> xv12 xv10) => <True>
(>= xv12 xv10) => <True>
Testing xv12 xv11
(= xv12 xv11) => <False>
(< xv12 xv11) => <False>
(<= xv12 xv11) => <False>
(> xv12 xv11) => <True>
(>= xv12 xv11) => <True>
Testing xv12 xv12
(= xv12 xv12) => <True>
(< xv12 xv12) => <False>
(<= xv12 xv12) => <True>
(> xv12 xv12) => <False>
(>= xv12 xv12) => <True>
Testing xv12 xv13
(= xv12 xv13) => <False>
(< xv12 xv13) => <True>
(<= xv12 xv13) => <True>
(> xv12 xv13) => <False>
(>= xv12 xv13) => <False>
Testing xv12 xv14
(= xv12 xv14) => <False>
(< xv12 xv14) => <True>
(<= xv12 xv14) => <True>
(> xv12 xv14) => <False>
(>= xv12 xv14) => <False>
Testing xv12 xv15
(= xv12 xv15) => <False>
(< xv12 xv15) => <True>
(<= xv12 xv15) => <True>
(> xv12 xv15) => <False>
(>= xv12 xv15) => <False>
Testing xv12 xv16
(= xv12 xv16) => <False>
(< xv12 xv16) => <True>
(<= xv12 xv16) => <True>
(> xv12 xv16) => <False>
(>= xv12 xv16) => <False>
Testing xv12 xv17
(= xv12 xv17) => <False>
(< xv12 xv17) => <False>
(<= xv12 xv17) => <False>
(> xv12 xv17) => <True>
(>= xv12 xv17) => <True>
Testing xv12 xv18
(= xv12 xv18) => <False>
(< xv12 xv18) => <False>
(<= xv12 xv18) => <False>
(> xv12 xv18) => <True>
(>= xv12 xv18) => <True>
Testing xv12 xv19
(= xv12 xv19) => <False>
(< xv12 xv19) => <False>
(<= xv12 xv19) => <False>
(> xv12 xv19) => <True>
(>= xv12 xv19) => <True>
Testing xv12 xv20
(= xv12 xv20) => <False>
(< xv12 xv20) => <True>
(<= xv12 xv20) => <True>
(> xv12 xv20) => <False>
(>= xv12 xv20) => <False>
Testing xv13 xv01
(= xv13 xv01) => <False>
(< xv13 xv01) => <True>
(<= xv13 xv01) => <True>
(> xv13 xv01) => <False>
(>= xv13 xv01) => <False>
Testing xv13 xv02
(= xv13 xv02) => <False>
(< xv13 xv02) => <False>
(<= xv13 xv02) => <False>
(> xv13 xv02) => <True>
(>= xv13 xv02) => <True>
Testing xv13 xv03
(= xv13 xv03) => <False>
(< xv13 xv03) => <True>
(<= xv13 xv03) => <True>
(> xv13 xv03) => <False>
(>= xv13 xv03) => <False>
Testing xv13 xv04
(= xv13 xv04) => <False>
(< xv13 xv04) => <True>
(<= xv13 xv04) => <True>
(> xv13 xv04) => <False>
(>= xv13 xv04) => <False>
Testing xv13 xv05
(= xv13 xv05) => <False>
(< xv13 xv05) => <False>
(<= xv13 xv05) => <False>
(> xv13 xv05) => <True>
(>= xv13 xv05) => <True>
Testing xv13 xv06
(= xv13 xv06) => <False>
(< xv13 xv06) => <True>
(<= xv13 xv06) => <True>
(> xv13 xv06) => <False>
(>= xv13 xv06) => <False>
Testing xv13 xv07
(= xv13 xv07) => <False>
(< xv13 xv07) => <True>
(<= xv13 xv07) => <True>
(> xv13 xv07) => <False>
(>= xv13 xv07) => <False>
Testing xv13 xv08
(= xv13 xv08) => <False>
(< xv13 xv08) => <False>
(<= xv13 xv08) => <False>
(> xv13 xv08) => <True>
(>= xv13 xv08) => <True>
Testing xv13 xv09
(= xv13 xv09) => <False>
(< xv13 xv09) => <False>
(<= xv13 xv09) => <False>
(> xv13 xv09) => <True>
(>= xv13 xv09) => <True>
Testing xv13 xv10
(= xv13 xv10) => <False>
(< xv13 xv10) => <False>
(<= xv13 xv10) => <False>
(> xv13 xv10) => <True>
(>= xv13 xv10) => <True>
Testing xv13 xv11
(= xv13 xv11) => <False>
(< xv13 xv11) => <False>
(<= xv13 xv11) => <False>
(> xv13 xv11) => <True>
(>= xv13 xv11) => <True>
Testing xv13 xv12
(= xv13 xv12) => <False>
(< xv13 xv12) => <False>
(<= xv13 xv12) => <False>
(> xv13 xv12) => <True>
(>= xv13 xv12) => <True>
Testing xv13 xv13
(= xv13 xv13) => <True>
(< xv13 xv13) => <False>
(<= xv13 xv13) => <True>
(> xv13 xv13) => <False>
(>= xv13 xv13) => <True>
Testing xv13 xv14
(= xv13 xv14) => <False>
(< xv13 xv14) => <False>
(<= xv13 xv14) => <True>
(> xv13 xv14) => <False>
(>= xv13 xv14) => <True>
Testing xv13 xv15
(= xv13 xv15) => <False>
(< xv13 xv15) => <True>
(<= xv13 xv15) => <True>
(> xv13 xv15) => <False>
(>= xv13 xv15) => <False>
Testing xv13 xv16
(= xv13 xv16) => <False>
(< xv13 xv16) => <False>
(<= xv13 xv16) => <True>
(> xv13 xv16) => <False>
(>= xv13 xv16) => <True>
Testing xv13 xv17
(= xv13 xv17) => <False>
(< xv13 xv17) => <False>
(<= xv13 xv17) => <False>
(> xv13 xv17) => <True>
(>= xv13 xv17) => <True>
Testing xv13 xv18
(= xv13 xv18) => <False>
(< xv13 xv18) => <False>
(<= xv13 xv18) => <False>
(> xv13 xv18) => <True>
(>= xv13 xv18) => <True>
Testing xv13 xv19
(= xv13 xv19) => <False>
(< xv13 xv19) => <False>
(<= xv13 xv19) => <False>
(> xv13 xv19) => <True>
(>= xv13 xv19) => <True>
Testing xv13 xv20
(= xv13 xv20) => <False>
(< xv13 xv20) => <True>
(<= xv13 xv20) => <True>
(> xv13 xv20) => <False>
(>= xv13 xv20) => <False>
Testing xv14 xv01
(= xv14 xv01) => <False>
(< xv14 xv01) => <True>
(<= xv14 xv01) => <True>
(> xv14 xv01) => <False>
(>= xv14 xv01) => <False>
Testing xv14 xv02
(= xv14 xv02) => <False>
(< xv14 xv02) => <False>
(<= xv14 xv02) => <False>
(> xv14 xv02) => <True>
(>= xv14 xv02) => <True>
Testing xv14 xv03
(= xv14 xv03) => <False>
(< xv14 xv03) => <True>
(<= xv14 xv03) => <True>
(> xv14 xv03) => <False>
(>= xv14 xv03) => <False>
Testing xv14 xv04
(= xv14 xv04) => <False>
(< xv14 xv04) => <True>
(<= xv14 xv04) => <True>
(> xv14 xv04) => <False>
(>= xv14 xv04) => <False>
Testing xv14 xv05
(= xv14 xv05) => <False>
(< xv14 xv05) => <False>
(<= xv14 xv05) => <False>
(> xv14 xv05) => <True>
(>= xv14 xv05) => <True>
Testing xv14 xv06
(= xv14 xv06) => <False>
(< xv14 xv06) => <True>
(<= xv14 xv06) => <True>
(> xv14 xv06) => <False>
(>= xv14 xv06) => <False>
Testing xv14 xv07
(= xv14 xv07) => <False>
(< xv14 xv07) => <True>
(<= xv14 xv07) => <True>
(> xv14 xv07) => <False>
(>= xv14 xv07) => <False>
Testing xv14 xv08
(= xv14 xv08) => <False>
(< xv14 xv08) => <False>
(<= xv14 xv08) => <False>
(> xv14 xv08) => <True>
(>= xv14 xv08) => <True>
Testing xv14 xv09
(= xv14 xv09) => <False>
(< xv14 xv09) => <False>
(<= xv14 xv09) => <False>
(> xv14 xv09) => <True>
(>= xv14 xv09) => <True>
Testing xv14 xv10
(= xv14 xv10) => <False>
(< xv14 xv10) => <False>
(<= xv14 xv10) => <False>
(> xv14 xv10) => <True>
(>= xv14 xv10) => <True>
Testing xv14 xv11
(= xv14 xv11) => <False>
(< xv14 xv11) => <False>
(<= xv14 xv11) => <False>
(> xv14 xv11) => <True>
(>= xv14 xv11) => <True>
Testing xv14 xv12
(= xv14 xv12) => <False>
(< xv14 xv12) => <False>
(<= xv14 xv12) => <False>
(> xv14 xv12) => <True>
(>= xv14 xv12) => <True>
Testing xv14 xv13
(= xv14 xv13) => <False>
(< xv14 xv13) => <False>
(<= xv14 xv13) => <True>
(> xv14 xv13) => <False>
(>= xv14 xv13) => <True>
Testing xv14 xv14
(= xv14 xv14) => <True>
(< xv14 xv14) => <False>
(<= xv14 xv14) => <True>
(> xv14 xv14) => <False>
(>= xv14 xv14) => <True>
Testing xv14 xv15
(= xv14 xv15) => <False>
(< xv14 xv15) => <True>
(<= xv14 xv15) => <True>
(> xv14 xv15) => <False>
(>= xv14 xv15) => <False>
Testing xv14 xv16
(= xv14 xv16) => <False>
(< xv14 xv16) => <False>
(<= xv14 xv16) => <True>
(> xv14 xv16) => <False>
(>= xv14 xv16) => <True>
Testing xv14 xv17
(= xv14 xv17) => <False>
(< xv14 xv17) => <False>
(<= xv14 xv17) => <False>
(> xv14 xv17) => <True>
(>= xv14 xv17) => <True>
Testing xv14 xv18
(= xv14 xv18) => <False>
(< xv14 xv18) => <False>
(<= xv14 xv18) => <False>
(> xv14 xv18) => <True>
(>= xv14 xv18) => <True>
Testing xv14 xv19
(= xv14 xv19) => <False>
(< xv14 xv19) => <False>
(<= xv14 xv19) => <False>
(> xv14 xv19) => <True>
(>= xv14 xv19) => <True>
Testing xv14 xv20
(= xv14 xv20) => <False>
(< xv14 xv20) => <True>
(<= xv14 xv20) => <True>
(> xv14 xv20) => <False>
(>= xv14 xv20) => <False>
Testing xv15 xv01
(= xv15 xv01) => <False>
(< xv15 xv01) => <False>
(<= xv15 xv01) => <False>
(> xv15 xv01) => <True>
(>= xv15 xv01) => <True>
Testing xv15 xv02
(= xv15 xv02) => <False>
(< xv15 xv02) => <False>
(<= xv15 xv02) => <False>
(> xv15 xv02) => <True>
(>= xv15 xv02) => <True>
Testing xv15 xv03
(= xv15 xv03) => <False>
(< xv15 xv03) => <False>
(<= xv15 xv03) => <False>
(> xv15 xv03) => <True>
(>= xv15 xv03) => <True>
Testing xv15 xv04
(= xv15 xv04) => <False>
(< xv15 xv04) => <False>
(<= xv15 xv04) => <True>
(> xv15 xv04) => <False>
(>= xv15 xv04) => <True>
Testing xv15 xv05
(= xv15 xv05) => <False>
(< xv15 xv05) => <False>
(<= xv15 xv05) => <False>
(> xv15 xv05) => <True>
(>= xv15 xv05) => <True>
Testing xv15 xv06
(= xv15 xv06) => <False>
(< xv15 xv06) => <False>
(<= xv15 xv06) => <False>
(> xv15 xv06) => <True>
(>= xv15 xv06) => <True>
Testing xv15 xv07
(= xv15 xv07) => <False>
(< xv15 xv07) => <True>
(<= xv15 xv07) => <True>
(> xv15 xv07) => <False>
(>= xv15 xv07) => <False>
Testing xv15 xv08
(= xv15 xv08) => <False>
(< xv15 xv08) => <False>
(<= xv15 xv08) => <False>
(> xv15 xv08) => <True>
(>= xv15 xv08) => <True>
Testing xv15 xv09
(= xv15 xv09) => <False>
(< xv15 xv09) => <False>
(<= xv15 xv09) => <False>
(> xv15 xv09) => <True>
(>= xv15 xv09) => <True>
Testing xv15 xv10
(= xv15 xv10) => <False>
(< xv15 xv10) => <False>
(<= xv15 xv10) => <False>
(> xv15 xv10) => <True>
(>= xv15 xv10) => <True>
Testing xv15 xv11
(= xv15 xv11) => <False>
(< xv15 xv11) => <False>
(<= xv15 xv11) => <False>
(> xv15 xv11) => <True>
(>= xv15 xv11) => <True>
Testing xv15 xv12
(= xv15 xv12) => <False>
(< xv15 xv12) => <False>
(<= xv15 xv12) => <False>
(> xv15 xv12) => <True>
(>= xv15 xv12) => <True>
Testing xv15 xv13
(= xv15 xv13) => <False>
(< xv15 xv13) => <False>
(<= xv15 xv13) => <False>
(> xv15 xv13) => <True>
(>= xv15 xv13) => <True>
Testing xv15 xv14
(= xv15 xv14) => <False>
(< xv15 xv14) => <False>
(<= xv15 xv14) => <False>
(> xv15 xv14) => <True>
(>= xv15 xv14) => <True>
Testing xv15 xv15
(= xv15 xv15) => <True>
(< xv15 xv15) => <False>
(<= xv15 xv15) => <True>
(> xv15 xv15) => <False>
(>= xv15 xv15) => <True>
Testing xv15 xv16
(= xv15 xv16) => <False>
(< xv15 xv16) => <False>
(<= xv15 xv16) => <False>
(> xv15 xv16) => <True>
(>= xv15 xv16) => <True>
Testing xv15 xv17
(= xv15 xv17) => <False>
(< xv15 xv17) => <False>
(<= xv15 xv17) => <False>
(> xv15 xv17) => <True>
(>= xv15 xv17) => <True>
Testing xv15 xv18
(= xv15 xv18) => <False>
(< xv15 xv18) => <False>
(<= xv15 xv18) => <False>
(> xv15 xv18) => <True>
(>= xv15 xv18) => <True>
Testing xv15 xv19
(= xv15 xv19) => <False>
(< xv15 xv19) => <False>
(<= xv15 xv19) => <False>
(> xv15 xv19) => <True>
(>= xv15 xv19) => <True>
Testing xv15 xv20
(= xv15 xv20) => <False>
(< xv15 xv20) => <False>
(<= xv15 xv20) => <False>
(> xv15 xv20) => <True>
(>= xv15 xv20) => <True>
Testing xv16 xv01
(= xv16 xv01) => <False>
(< xv16 xv01) => <True>
(<= xv16 xv01) => <True>
(> xv16 xv01) => <False>
(>= xv16 xv01) => <False>
Testing xv16 xv02
(= xv16 xv02) => <False>
(< xv16 xv02) => <False>
(<= xv16 xv02) => <False>
(> xv16 xv02) => <True>
(>= xv16 xv02) => <True>
Testing xv16 xv03
(= xv16 xv03) => <False>
(< xv16 xv03) => <True>
(<= xv16 xv03) => <True>
(> xv16 xv03) => <False>
(>= xv16 xv03) => <False>
Testing xv16 xv04
(= xv16 xv04) => <False>
(< xv16 xv04) => <True>
(<= xv16 xv04) => <True>
(> xv16 xv04) => <False>
(>= xv16 xv04) => <False>
Testing xv16 xv05
(= xv16 xv05) => <False>
(< xv16 xv05) => <False>
(<= xv16 xv05) => <False>
(> xv16 xv05) => <True>
(>= xv16 xv05) => <True>
Testing xv16 xv06
(= xv16 xv06) => <False>
(< xv16 xv06) => <True>
(<= xv16 xv06) => <True>
(> xv16 xv06) => <False>
(>= xv16 xv06) => <False>
Testing xv16 xv07
(= xv16 xv07) => <False>
(< xv16 xv07) => <True>
(<= xv16 xv07) => <True>
(> xv16 xv07) => <False>
(>= xv16 xv07) => <False>
Testing xv16 xv08
(= xv16 xv08) => <False>
(< xv16 xv08) => <False>
(<= xv16 xv08) => <False>
(> xv16 xv08) => <True>
(>= xv16 xv08) => <True>
Testing xv16 xv09
(= xv16 xv09) => <False>
(< xv16 xv09) => <False>
(<= xv16 xv09) => <False>
(> xv16 xv09) => <True>
(>= xv16 xv09) => <True>
Testing xv16 xv10
(= xv16 xv10) => <False>
(< xv16 xv10) => <False>
(<= xv16 xv10) => <False>
(> xv16 xv10) => <True>
(>= xv16 xv10) => <True>
Testing xv16 xv11
(= xv16 xv11) => <False>
(< xv16 xv11) => <False>
(<= xv16 xv11) => <False>
(> xv16 xv11) => <True>
(>= xv16 xv11) => <True>
Testing xv16 xv12
(= xv16 xv12) => <False>
(< xv16 xv12) => <False>
(<= xv16 xv12) => <False>
(> xv16 xv12) => <True>
(>= xv16 xv12) => <True>
Testing xv16 xv13
(= xv16 xv13) => <False>
(< xv16 xv13) => <False>
(<= xv16 xv13) => <True>
(> xv16 xv13) => <False>
(>= xv16 xv13) => <True>
Testing xv16 xv14
(= xv16 xv14) => <False>
(< xv16 xv14) => <False>
(<= xv16 xv14) => <True>
(> xv16 xv14) => <False>
(>= xv16 xv14) => <True>
Testing xv16 xv15
(= xv16 xv15) => <False>
(< xv16 xv15) => <True>
(<= xv16 xv15) => <True>
(> xv16 xv15) => <False>
(>= xv16 xv15) => <False>
Testing xv16 xv16
(= xv16 xv16) => <True>
(< xv16 xv16) => <False>
(<= xv16 xv16) => <True>
(> xv16 xv16) => <False>
(>= xv16 xv16) => <True>
Testing xv16 xv17
(= xv16 xv17) => <False>
(< xv16 xv17) => <False>
(<= xv16 xv17) => <False>
(> xv16 xv17) => <True>
(>= xv16 xv17) => <True>
Testing xv16 xv18
(= xv16 xv18) => <False>
(< xv16 xv18) => <False>
(<= xv16 xv18) => <False>
(> xv16 xv18) => <True>
(>= xv16 xv18) => <True>
Testing xv16 xv19
(= xv16 xv19) => <False>
(< xv16 xv19) => <False>
(<= xv16 xv19) => <False>
(> xv16 xv19) => <True>
(>= xv16 xv19) => <True>
Testing xv16 xv20
(= xv16 xv20) => <False>
(< xv16 xv20) => <True>
(<= xv16 xv20) => <True>
(> xv16 xv20) => <False>
(>= xv16 xv20) => <False>
Testing xv17 xv01
(= xv17 xv01) => <False>
(< xv17 xv01) => <True>
(<= xv17 xv01) => <True>
(> xv17 xv01) => <False>
(>= xv17 xv01) => <False>
Testing xv17 xv02
(= xv17 xv02) => <False>
(< xv17 xv02) => <False>
(<= xv17 xv02) => <False>
(> xv17 xv02) => <True>
(>= xv17 xv02) => <True>
Testing xv17 xv03
(= xv17 xv03) => <False>
(< xv17 xv03) => <True>
(<= xv17 xv03) => <True>
(> xv17 xv03) => <False>
(>= xv17 xv03) => <False>
Testing xv17 xv04
(= xv17 xv04) => <False>
(< xv17 xv04) => <True>
(<= xv17 xv04) => <True>
(> xv17 xv04) => <False>
(>= xv17 xv04) => <False>
Testing xv17 xv05
(= xv17 xv05) => <False>
(< xv17 xv05) => <False>
(<= xv17 xv05) => <False>
(> xv17 xv05) => <True>
(>= xv17 xv05) => <True>
Testing xv17 xv07
(= xv17 xv07) => <False>
(< xv17 xv07) => <True>
(<= xv17 xv07) => <True>
(> xv17 xv07) => <False>
(>= xv17 xv07) => <False>
Testing xv17 xv08
(= xv17 xv08) => <False>
(< xv17 xv08) => <False>
(<= xv17 xv08) => <False>
(> xv17 xv08) => <True>
(>= xv17 xv08) => <True>
Testing xv17 xv09
(= xv17 xv09) => <False>
(< xv17 xv09) => <False>
(<= xv17 xv09) => <False>
(> xv17 xv09) => <True>
(>= xv17 xv09) => <True>
Testing xv17 xv11
(= xv17 xv11) => <False>
(< xv17 xv11) => <False>
(<= xv17 xv11) => <False>
(> xv17 xv11) => <True>
(>= xv17 xv11) => <True>
Testing xv17 xv12
(= xv17 xv12) => <False>
(< xv17 xv12) => <True>
(<= xv17 xv12) => <True>
(> xv17 xv12) => <False>
(>= xv17 xv12) => <False>
Testing xv17 xv13
(= xv17 xv13) => <False>
(< xv17 xv13) => <True>
(<= xv17 xv13) => <True>
(> xv17 xv13) => <False>
(>= xv17 xv13) => <False>
Testing xv17 xv14
(= xv17 xv14) => <False>
(< xv17 xv14) => <True>
(<= xv17 xv14) => <True>
(> xv17 xv14) => <False>
(>= xv17 xv14) => <False>
Testing xv17 xv15
(= xv17 xv15) => <False>
(< xv17 xv15) => <True>
(<= xv17 xv15) => <True>
(> xv17 xv15) => <False>
(>= xv17 xv15) => <False>
Testing xv17 xv16
(= xv17 xv16) => <False>
(< xv17 xv16) => <True>
(<= xv17 xv16) => <True>
(> xv17 xv16) => <False>
(>= xv17 xv16) => <False>
Testing xv17 xv18
(= xv17 xv18) => <False>
(< xv17 xv18) => <True>
(<= xv17 xv18) => <True>
(> xv17 xv18) => <False>
(>= xv17 xv18) => <False>
Testing xv17 xv19
(= xv17 xv19) => <False>
(< xv17 xv19) => <True>
(<= xv17 xv19) => <True>
(> xv17 xv19) => <False>
(>= xv17 xv19) => <False>
Testing xv18 xv01
(= xv18 xv01) => <False>
(< xv18 xv01) => <True>
(<= xv18 xv01) => <True>
(> xv18 xv01) => <False>
(>= xv18 xv01) => <False>
Testing xv18 xv02
(= xv18 xv02) => <False>
(< xv18 xv02) => <False>
(<= xv18 xv02) => <False>
(> xv18 xv02) => <True>
(>= xv18 xv02) => <True>
Testing xv18 xv03
(= xv18 xv03) => <False>
(< xv18 xv03) => <True>
(<= xv18 xv03) => <True>
(> xv18 xv03) => <False>
(>= xv18 xv03) => <False>
Testing xv18 xv04
(= xv18 xv04) => <False>
(< xv18 xv04) => <True>
(<= xv18 xv04) => <True>
(> xv18 xv04) => <False>
(>= xv18 xv04) => <False>
Testing xv18 xv05
(= xv18 xv05) => <False>
(< xv18 xv05) => <False>
(<= xv18 xv05) => <False>
(> xv18 xv05) => <True>
(>= xv18 xv05) => <True>
Testing xv18 xv06
(= xv18 xv06) => <False>
(< xv18 xv06) => <True>
(<= xv18 xv06) => <True>
(> xv18 xv06) => <False>
(>= xv18 xv06) => <False>
Testing xv18 xv07
(= xv18 xv07) => <False>
(< xv18 xv07) => <True>
(<= xv18 xv07) => <True>
(> xv18 xv07) => <False>
(>= xv18 xv07) => <False>
Testing xv18 xv08
(= xv18 xv08) => <False>
(< xv18 xv08) => <False>
(<= xv18 xv08) => <False>
(> xv18 xv08) => <True>
(>= xv18 xv08) => <True>
Testing xv18 xv09
(= xv18 xv09) => <False>
(< xv18 xv09) => <False>
(<= xv18 xv09) => <False>
(> xv18 xv09) => <True>
(>= xv18 xv09) => <True>
Testing xv18 xv10
(= xv18 xv10) => <False>
(< xv18 xv10) => <False>
(<= xv18 xv10) => <False>
(> xv18 xv10) => <True>
(>= xv18 xv10) => <True>
Testing xv18 xv11
(= xv18 xv11) => <False>
(< xv18 xv11) => <False>
(<= xv18 xv11) => <False>
(> xv18 xv11) => <True>
(>= xv18 xv11) => <True>
Testing xv18 xv12
(= xv18 xv12) => <False>
(< xv18 xv12) => <True>
(<= xv18 xv12) => <True>
(> xv18 xv12) => <False>
(>= xv18 xv12) => <False>
Testing xv18 xv13
(= xv18 xv13) => <False>
(< xv18 xv13) => <True>
(<= xv18 xv13) => <True>
(> xv18 xv13) => <False>
(>= xv18 xv13) => <False>
Testing xv18 xv14
(= xv18 xv14) => <False>
(< xv18 xv14) => <True>
(<= xv18 xv14) => <True>
(> xv18 xv14) => <False>
(>= xv18 xv14) => <False>
Testing xv18 xv15
(= xv18 xv15) => <False>
(< xv18 xv15) => <True>
(<= xv18 xv15) => <True>
(> xv18 xv15) => <False>
(>= xv18 xv15) => <False>
Testing xv18 xv16
(= xv18 xv16) => <False>
(< xv18 xv16) => <True>
(<= xv18 xv16) => <True>
(> xv18 xv16) => <False>
(>= xv18 xv16) => <False>
Testing xv18 xv17
(= xv18 xv17) => <False>
(< xv18 xv17) => <False>
(<= xv18 xv17) => <False>
(> xv18 xv17) => <True>
(>= xv18 xv17) => <True>
Testing xv18 xv18
(= xv18 xv18) => <True>
(< xv18 xv18) => <False>
(<= xv18 xv18) => <True>
(> xv18 xv18) => <False>
(>= xv18 xv18) => <True>
Testing xv18 xv19
(= xv18 xv19) => <False>
(< xv18 xv19) => <True>
(<= xv18 xv19) => <True>
(> xv18 xv19) => <False>
(>= xv18 xv19) => <False>
Testing xv18 xv20
(= xv18 xv20) => <False>
(< xv18 xv20) => <True>
(<= xv18 xv20) => <True>
(> xv18 xv20) => <False>
(>= xv18 xv20) => <False>
Testing xv19 xv01
(= xv19 xv01) => <False>
(< xv19 xv01) => <True>
(<= xv19 xv01) => <True>
(> xv19 xv01) => <False>
(>= xv19 xv01) => <False>
Testing xv19 xv02
(= xv19 xv02) => <False>
(< xv19 xv02) => <False>
(<= xv19 xv02) => <False>
(> xv19 xv02) => <True>
(>= xv19 xv02) => <True>
Testing xv19 xv03
(= xv19 xv03) => <False>
(< xv19 xv03) => <True>
(<= xv19 xv03) => <True>
(> xv19 xv03) => <False>
(>= xv19 xv03) => <False>
Testing xv19 xv04
(= xv19 xv04) => <False>
(< xv19 xv04) => <True>
(<= xv19 xv04) => <True>
(> xv19 xv04) => <False>
(>= xv19 xv04) => <False>
Testing xv19 xv05
(= xv19 xv05) => <False>
(< xv19 xv05) => <False>
(<= xv19 xv05) => <False>
(> xv19 xv05) => <True>
(>= xv19 xv05) => <True>
Testing xv19 xv06
(= xv19 xv06) => <False>
(< xv19 xv06) => <True>
(<= xv19 xv06) => <True>
(> xv19 xv06) => <False>
(>= xv19 xv06) => <False>
Testing xv19 xv07
(= xv19 xv07) => <False>
(< xv19 xv07) => <True>
(<= xv19 xv07) => <True>
(> xv19 xv07) => <False>
(>= xv19 xv07) => <False>
Testing xv19 xv08
(= xv19 xv08) => <False>
(< xv19 xv08) => <False>
(<= xv19 xv08) => <False>
(> xv19 xv08) => <True>
(>= xv19 xv08) => <True>
Testing xv19 xv09
(= xv19 xv09) => <False>
(< xv19 xv09) => <False>
(<= xv19 xv09) => <False>
(> xv19 xv09) => <True>
(>= xv19 xv09) => <True>
Testing xv19 xv10
(= xv19 xv10) => <False>
(< xv19 xv10) => <False>
(<= xv19 xv10) => <False>
(> xv19 xv10) => <True>
(>= xv19 xv10) => <True>
Testing xv19 xv11
(= xv19 xv11) => <False>
(< xv19 xv11) => <False>
(<= xv19 xv11) => <False>
(> xv19 xv11) => <True>
(>= xv19 xv11) => <True>
Testing xv19 xv12
(= xv19 xv12) => <False>
(< xv19 xv12) => <True>
(<= xv19 xv12) => <True>
(> xv19 xv12) => <False>
(>= xv19 xv12) => <False>
Testing xv19 xv13
(= xv19 xv13) => <False>
(< xv19 xv13) => <True>
(<= xv19 xv13) => <True>
(> xv19 xv13) => <False>
(>= xv19 xv13) => <False>
Testing xv19 xv14
(= xv19 xv14) => <False>
(< xv19 xv14) => <True>
(<= xv19 xv14) => <True>
(> xv19 xv14) => <False>
(>= xv19 xv14) => <False>
Testing xv19 xv15
(= xv19 xv15) => <False>
(< xv19 xv15) => <True>
(<= xv19 xv15) => <True>
(> xv19 xv15) => <False>
(>= xv19 xv15) => <False>
Testing xv19 xv16
(= xv19 xv16) => <False>
(< xv19 xv16) => <True>
(<= xv19 xv16) => <True>
(> xv19 xv16) => <False>
(>= xv19 xv16) => <False>
Testing xv19 xv17
(= xv19 xv17) => <False>
(< xv19 xv17) => <False>
(<= xv19 xv17) => <False>
(> xv19 xv17) => <True>
(>= xv19 xv17) => <True>
Testing xv19 xv18
(= xv19 xv18) => <False>
(< xv19 xv18) => <False>
(<= xv19 xv18) => <False>
(> xv19 xv18) => <True>
(>= xv19 xv18) => <True>
Testing xv19 xv19
(= xv19 xv19) => <True>
(< xv19 xv19) => <False>
(<= xv19 xv19) => <True>
(> xv19 xv19) => <False>
(>= xv19 xv19) => <True>
Testing xv19 xv20
(= xv19 xv20) => <False>
(< xv19 xv20) => <True>
(<= xv19 xv20) => <True>
(> xv19 xv20) => <False>
(>= xv19 xv20) => <False>
Testing xv20 xv01
(= xv20 xv01) => <False>
(< xv20 xv01) => <False>
(<= xv20 xv01) => <False>
(> xv20 xv01) => <True>
(>= xv20 xv01) => <True>
Testing xv20 xv02
(= xv20 xv02) => <False>
(< xv20 xv02) => <False>
(<= xv20 xv02) => <False>
(> xv20 xv02) => <True>
(>= xv20 xv02) => <True>
Testing xv20 xv03
(= xv20 xv03) => <False>
(< xv20 xv03) => <False>
(<= xv20 xv03) => <False>
(> xv20 xv03) => <True>
(>= xv20 xv03) => <True>
Testing xv20 xv04
(= xv20 xv04) => <False>
(< xv20 xv04) => <True>
(<= xv20 xv04) => <True>
(> xv20 xv04) => <False>
(>= xv20 xv04) => <False>
Testing xv20 xv05
(= xv20 xv05) => <False>
(< xv20 xv05) => <False>
(<= xv20 xv05) => <False>
(> xv20 xv05) => <True>
(>= xv20 xv05) => <True>
Testing xv20 xv07
(= xv20 xv07) => <False>
(< xv20 xv07) => <True>
(<= xv20 xv07) => <True>
(> xv20 xv07) => <False>
(>= xv20 xv07) => <False>
Testing xv20 xv08
(= xv20 xv08) => <False>
(< xv20 xv08) => <False>
(<= xv20 xv08) => <False>
(> xv20 xv08) => <True>
(>= xv20 xv08) => <True>
Testing xv20 xv09
(= xv20 xv09) => <False>
(< xv20 xv09) => <False>
(<= xv20 xv09) => <False>
(> xv20 xv09) => <True>
(>= xv20 xv09) => <True>
Testing xv20 xv11
(= xv20 xv11) => <False>
(< xv20 xv11) => <False>
(<= xv20 xv11) => <False>
(> xv20 xv11) => <True>
(>= xv20 xv11) => <True>
Testing xv20 xv12
(= xv20 xv12) => <False>
(< xv20 xv12) => <False>
(<= xv20 xv12) => <False>
(> xv20 xv12) => <True>
(>= xv20 xv12) => <True>
Testing xv20 xv13
(= xv20 xv13) => <False>
(< xv20 xv13) => <False>
(<= xv20 xv13) => <False>
(> xv20 xv13) => <True>
(>= xv20 xv13) => <True>
Testing xv20 xv14
(= xv20 xv14) => <False>
(< xv20 xv14) => <False>
(<= xv20 xv14) => <False>
(> xv20 xv14) => <True>
(>= xv20 xv14) => <True>
Testing xv20 xv15
(= xv20 xv15) => <False>
(< xv20 xv15) => <True>
(<= xv20 xv15) => <True>
(> xv20 xv15) => <False>
(>= xv20 xv15) => <False>
Testing xv20 xv16
(= xv20 xv16) => <False>
(< xv20 xv16) => <False>
(<= xv20 xv16) => <False>
(> xv20 xv16) => <True>
(>= xv20 xv16) => <True>
Testing xv20 xv18
(= xv20 xv18) => <False>
(< xv20 xv18) => <False>
(<= xv20 xv18) => <False>
(> xv20 xv18) => <True>
(>= xv20 xv18) => <True>
Testing xv20 xv19
(= xv20 xv19) => <False>
(< xv20 xv19) => <False>
(<= xv20 xv19) => <False>
(> xv20 xv19) => <True>
(>= xv20 xv19) => <True>

##########
Testing xv21
(debug xv21) => BlockXVector(10,<BlockFn3>)
(size xv21) => 10
(print xv21) => << 1/1 1/2 1/3 1/4 1/5 1/6 1/7 1/8 1/9 1/10 >>
(at:ifAbsent: xv21 xv21 0) => 1/1
(at:ifAbsent: xv21 xv21 1) => 1/2
(at:ifAbsent: xv21 xv21 2) => 1/3
(at:ifAbsent: xv21 xv21 3) => 1/4
(at:ifAbsent: xv21 xv21 4) => 1/5
(at:ifAbsent: xv21 xv21 5) => 1/6
(at:ifAbsent: xv21 7) => 1/8
(at:ifAbsent: xv21 8) => 1/9
(at:ifAbsent: xv21 9) => 1/10
(at:ifAbsent: xv21 1073741823) => nil
(at:ifAbsent: xv21 1073741824) => nil
(at:ifAbsent: xv21 1073741825) => nil
(at:ifAbsent: xv21 -5) => 1/6
(at:ifAbsent: xv21 -4) => 1/7
(at:ifAbsent: xv21 -3) => 1/8
(at:ifAbsent: xv21 -2) => 1/9
(at:ifAbsent: xv21 -1) => 1/10
(at:ifAbsent: xv21 -1073741825) => nil
(at:ifAbsent: xv21 -1073741824) => nil
(at:ifAbsent: xv21 -1073741823) => nil
(at:ifAbsent: xv21 -9) => 1/2
(at:ifAbsent: xv21 -8) => 1/3
(at:ifAbsent: xv21 -7) => 1/4
(allMag xv21) => <True>
(allNum xv21) => <True>
(allInt xv21) => <False>
(allFrac xv21) => <True>
(someFrac xv21) => <True>
(allFloat xv21) => <False>
(someFloat xv21) => <False>
(min xv21) => 1/10
(max xv21) => 1/1
(sum xv21) => 7381/2520
(product xv21) => 1/3628800
(detect:ifNone: xv21 negative) => nil
(detect:ifNone: xv21 nonnegative) => 1/1
(detect:ifNone: xv21 strictlyPositive) => 1/1
(= xv21 xv21) => <True>
(< xv21 xv21) => <False>
(<= xv21 xv21) => <True>
(> xv21 xv21) => <False>
(>= xv21 xv21) => <True>
(= xv21 nil) => <False>
(= xv21 nil) => <False>
(= xv21 <True>) => <False>
(= xv21 <False>) => <False>
(= xv21 0) => <False>
(= xv21 1) => <False>
(= xv21 42) => <False>
(fromIndex:toIndex: xv21 0 0) => << 1/1 >>
(fromIndex:toIndex: xv21 0 1) => << 1/1 1/2 >>
(fromIndex:toIndex: xv21 0 2) => << 1/1 1/2 1/3 >>
(fromIndex:toIndex: xv21 0 4) => << 1/1 1/2 1/3 1/4 1/5 >>
(fromIndex:toIndex: xv21 1 1) => << 1/2 >>
(fromIndex:toIndex: xv21 1 3) => << 1/2 1/3 1/4 >>
(fromIndex:toIndex: xv21 -1 -1) => << 1/10 >>
(fromIndex:toIndex: xv21 -2 -1) => << 1/9 1/10 >>
(fromIndex:toIndex: xv21 -3 -1) => << 1/8 1/9 1/10 >>
(fromIndex:toIndex: xv21 -5 -1) => << 1/6 1/7 1/8 1/9 1/10 >>
(fromIndex:toIndex: xv21 -2 -2) => << 1/9 >>
(fromIndex:toIndex: xv21 -4 -2) => << 1/7 1/8 1/9 >>
(fromIndex:toIndex: xv21 -1 0) => << 1/10 1/1 >>
(fromIndex:toIndex: xv21 -2 1) => << 1/9 1/10 1/1 1/2 >>
(fromIndex:toIndex: xv21 -3 2) => << 1/8 1/9 1/10 1/1 1/2 1/3 >>
(fromIndex:toIndex: xv21 -4 3) => << 1/7 1/8 1/9 1/10 1/1 1/2 1/3 1/4 >>
(fromIndex:toIndex: xv21 -5 4) => << 1/6 1/7 1/8 1/9 1/10 1/1 1/2 1/3 1/4 1/5 >>

##########
Testing xv22
(debug xv22) => BlockXVector(15,<BlockFn4>)
(size xv22) => 15
(print xv22) => << 0/1 1/2 4/1 1/6 8/1 1/10 12/1 1/14 16/1 1/18 20/1 1/22 24/1 1/26 28/1 >>
(at:ifAbsent: xv22 xv22 0) => 0/1
(at:ifAbsent: xv22 xv22 1) => 1/2
(at:ifAbsent: xv22 xv22 2) => 4/1
(at:ifAbsent: xv22 xv22 3) => 1/6
(at:ifAbsent: xv22 xv22 4) => 8/1
(at:ifAbsent: xv22 xv22 5) => 1/10
(at:ifAbsent: xv22 7) => 1/14
(at:ifAbsent: xv22 8) => 16/1
(at:ifAbsent: xv22 9) => 1/18
(at:ifAbsent: xv22 1073741823) => nil
(at:ifAbsent: xv22 1073741824) => nil
(at:ifAbsent: xv22 1073741825) => nil
(at:ifAbsent: xv22 -5) => 20/1
(at:ifAbsent: xv22 -4) => 1/22
(at:ifAbsent: xv22 -3) => 24/1
(at:ifAbsent: xv22 -2) => 1/26
(at:ifAbsent: xv22 -1) => 28/1
(at:ifAbsent: xv22 -1073741825) => nil
(at:ifAbsent: xv22 -1073741824) => nil
(at:ifAbsent: xv22 -1073741823) => nil
(at:ifAbsent: xv22 -9) => 12/1
(at:ifAbsent: xv22 -8) => 1/14
(at:ifAbsent: xv22 -7) => 16/1
(allMag xv22) => <True>
(allNum xv22) => <True>
(allInt xv22) => <False>
(allFrac xv22) => <True>
(someFrac xv22) => <True>
(allFloat xv22) => <False>
(someFloat xv22) => <False>
(min xv22) => 0/1
(max xv22) => 28/1
(sum xv22) => 10178149/90090
(product xv22) => 0/1
(detect:ifNone: xv22 negative) => nil
(detect:ifNone: xv22 nonnegative) => 0/1
(detect:ifNone: xv22 strictlyPositive) => 1/2
(= xv22 xv22) => <True>
(< xv22 xv22) => <False>
(<= xv22 xv22) => <True>
(> xv22 xv22) => <False>
(>= xv22 xv22) => <True>
(= xv22 nil) => <False>
(= xv22 nil) => <False>
(= xv22 <True>) => <False>
(= xv22 <False>) => <False>
(= xv22 0) => <False>
(= xv22 1) => <False>
(= xv22 42) => <False>
(fromIndex:toIndex: xv22 0 0) => << 0/1 >>
(fromIndex:toIndex: xv22 0 1) => << 0/1 1/2 >>
(fromIndex:toIndex: xv22 0 2) => << 0/1 1/2 4/1 >>
(fromIndex:toIndex: xv22 0 4) => << 0/1 1/2 4/1 1/6 8/1 >>
(fromIndex:toIndex: xv22 1 1) => << 1/2 >>
(fromIndex:toIndex: xv22 1 3) => << 1/2 4/1 1/6 >>
(fromIndex:toIndex: xv22 -1 -1) => << 28/1 >>
(fromIndex:toIndex: xv22 -2 -1) => << 1/26 28/1 >>
(fromIndex:toIndex: xv22 -3 -1) => << 24/1 1/26 28/1 >>
(fromIndex:toIndex: xv22 -5 -1) => << 20/1 1/22 24/1 1/26 28/1 >>
(fromIndex:toIndex: xv22 -2 -2) => << 1/26 >>
(fromIndex:toIndex: xv22 -4 -2) => << 1/22 24/1 1/26 >>
(fromIndex:toIndex: xv22 -1 0) => << 28/1 0/1 >>
(fromIndex:toIndex: xv22 -2 1) => << 1/26 28/1 0/1 1/2 >>
(fromIndex:toIndex: xv22 -3 2) => << 24/1 1/26 28/1 0/1 1/2 4/1 >>
(fromIndex:toIndex: xv22 -4 3) => << 1/22 24/1 1/26 28/1 0/1 1/2 4/1 1/6 >>
(fromIndex:toIndex: xv22 -5 4) => << 20/1 1/22 24/1 1/26 28/1 0/1 1/2 4/1 1/6 8/1 >>

##########
