<class XVector>
<class ArrayXVector>
<class ConcatXVector>
<class RepeatXVector>
<class ReverseXVector>
<class SwizzleXVector>
<class BlockXVector>
<class Unit>
<class BlockFn1>
<class BlockFn2>
<class BlockFn3>
<class BlockFn4>
<class XVectorTester>
Testing xv01
(at:ifAbsent: xv01 0 {nil}) => nil
(at:ifAbsent: xv01 1 {nil}) => nil
(at:ifAbsent: xv01 2 {nil}) => nil
(at:ifAbsent: xv01 3 {nil}) => nil
(at:ifAbsent: xv01 4 {nil}) => nil
(at:ifAbsent: xv01 5 {nil}) => nil
(at:ifAbsent: xv01 7 {nil}) => nil
(at:ifAbsent: xv01 8 {nil}) => nil
(at:ifAbsent: xv01 9 {nil}) => nil
(at:ifAbsent: xv01 1073741823 {nil}) => nil
(at:ifAbsent: xv01 1073741824 {nil}) => nil
(at:ifAbsent: xv01 1073741825 {nil}) => nil
(at:ifAbsent: xv01 -1073741825 {nil}) => nil
(at:ifAbsent: xv01 -1073741824 {nil}) => nil
(at:ifAbsent: xv01 -1073741823 {nil}) => nil
(at:ifAbsent: xv01 -9 {nil}) => nil
(at:ifAbsent: xv01 -8 {nil}) => nil
(at:ifAbsent: xv01 -7 {nil}) => nil
(at:ifAbsent: xv01 -5 {nil}) => nil
(at:ifAbsent: xv01 -4 {nil}) => nil
(at:ifAbsent: xv01 -3 {nil}) => nil
(at:ifAbsent: xv01 -2 {nil}) => nil
(at:ifAbsent: xv01 -1 {nil}) => nil
Testing xv02
(at:ifAbsent: xv02 0 {nil}) => 1
(at:ifAbsent: xv02 1 {nil}) => nil
(at:ifAbsent: xv02 2 {nil}) => nil
(at:ifAbsent: xv02 3 {nil}) => nil
(at:ifAbsent: xv02 4 {nil}) => nil
(at:ifAbsent: xv02 5 {nil}) => nil
(at:ifAbsent: xv02 7 {nil}) => nil
(at:ifAbsent: xv02 8 {nil}) => nil
(at:ifAbsent: xv02 9 {nil}) => nil
(at:ifAbsent: xv02 1073741823 {nil}) => nil
(at:ifAbsent: xv02 1073741824 {nil}) => nil
(at:ifAbsent: xv02 1073741825 {nil}) => nil
(at:ifAbsent: xv02 -1073741825 {nil}) => nil
(at:ifAbsent: xv02 -1073741824 {nil}) => nil
(at:ifAbsent: xv02 -1073741823 {nil}) => nil
(at:ifAbsent: xv02 -9 {nil}) => nil
(at:ifAbsent: xv02 -8 {nil}) => nil
(at:ifAbsent: xv02 -7 {nil}) => nil
(at:ifAbsent: xv02 -5 {nil}) => nil
(at:ifAbsent: xv02 -4 {nil}) => nil
(at:ifAbsent: xv02 -3 {nil}) => nil
(at:ifAbsent: xv02 -2 {nil}) => nil
(at:ifAbsent: xv02 -1 {nil}) => 1
Testing xv03
(at:ifAbsent: xv03 0 {nil}) => 1
(at:ifAbsent: xv03 1 {nil}) => 2
(at:ifAbsent: xv03 2 {nil}) => 3
(at:ifAbsent: xv03 3 {nil}) => nil
(at:ifAbsent: xv03 4 {nil}) => nil
(at:ifAbsent: xv03 5 {nil}) => nil
(at:ifAbsent: xv03 7 {nil}) => nil
(at:ifAbsent: xv03 8 {nil}) => nil
(at:ifAbsent: xv03 9 {nil}) => nil
(at:ifAbsent: xv03 1073741823 {nil}) => nil
(at:ifAbsent: xv03 1073741824 {nil}) => nil
(at:ifAbsent: xv03 1073741825 {nil}) => nil
(at:ifAbsent: xv03 -1073741825 {nil}) => nil
(at:ifAbsent: xv03 -1073741824 {nil}) => nil
(at:ifAbsent: xv03 -1073741823 {nil}) => nil
(at:ifAbsent: xv03 -9 {nil}) => nil
(at:ifAbsent: xv03 -8 {nil}) => nil
(at:ifAbsent: xv03 -7 {nil}) => nil
(at:ifAbsent: xv03 -5 {nil}) => nil
(at:ifAbsent: xv03 -4 {nil}) => nil
(at:ifAbsent: xv03 -3 {nil}) => 1
(at:ifAbsent: xv03 -2 {nil}) => 2
(at:ifAbsent: xv03 -1 {nil}) => 3
Testing xv04
(at:ifAbsent: xv04 0 {nil}) => 1
(at:ifAbsent: xv04 1 {nil}) => 2
(at:ifAbsent: xv04 2 {nil}) => 3
(at:ifAbsent: xv04 3 {nil}) => 4
(at:ifAbsent: xv04 4 {nil}) => 5
(at:ifAbsent: xv04 5 {nil}) => 6
(at:ifAbsent: xv04 7 {nil}) => nil
(at:ifAbsent: xv04 8 {nil}) => nil
(at:ifAbsent: xv04 9 {nil}) => nil
(at:ifAbsent: xv04 1073741823 {nil}) => nil
(at:ifAbsent: xv04 1073741824 {nil}) => nil
(at:ifAbsent: xv04 1073741825 {nil}) => nil
(at:ifAbsent: xv04 -1073741825 {nil}) => nil
(at:ifAbsent: xv04 -1073741824 {nil}) => nil
(at:ifAbsent: xv04 -1073741823 {nil}) => nil
(at:ifAbsent: xv04 -9 {nil}) => nil
(at:ifAbsent: xv04 -8 {nil}) => nil
(at:ifAbsent: xv04 -7 {nil}) => nil
(at:ifAbsent: xv04 -5 {nil}) => 2
(at:ifAbsent: xv04 -4 {nil}) => 3
(at:ifAbsent: xv04 -3 {nil}) => 4
(at:ifAbsent: xv04 -2 {nil}) => 5
(at:ifAbsent: xv04 -1 {nil}) => 6
Testing xv05
(at:ifAbsent: xv05 0 {nil}) => -6
(at:ifAbsent: xv05 1 {nil}) => nil
(at:ifAbsent: xv05 2 {nil}) => nil
(at:ifAbsent: xv05 3 {nil}) => nil
(at:ifAbsent: xv05 4 {nil}) => nil
(at:ifAbsent: xv05 5 {nil}) => nil
(at:ifAbsent: xv05 7 {nil}) => nil
(at:ifAbsent: xv05 8 {nil}) => nil
(at:ifAbsent: xv05 9 {nil}) => nil
(at:ifAbsent: xv05 1073741823 {nil}) => nil
(at:ifAbsent: xv05 1073741824 {nil}) => nil
(at:ifAbsent: xv05 1073741825 {nil}) => nil
(at:ifAbsent: xv05 -1073741825 {nil}) => nil
(at:ifAbsent: xv05 -1073741824 {nil}) => nil
(at:ifAbsent: xv05 -1073741823 {nil}) => nil
(at:ifAbsent: xv05 -9 {nil}) => nil
(at:ifAbsent: xv05 -8 {nil}) => nil
(at:ifAbsent: xv05 -7 {nil}) => nil
(at:ifAbsent: xv05 -5 {nil}) => nil
(at:ifAbsent: xv05 -4 {nil}) => nil
(at:ifAbsent: xv05 -3 {nil}) => nil
(at:ifAbsent: xv05 -2 {nil}) => nil
(at:ifAbsent: xv05 -1 {nil}) => -6
Testing xv06
(at:ifAbsent: xv06 0 {nil}) => -6
(at:ifAbsent: xv06 1 {nil}) => -5
(at:ifAbsent: xv06 2 {nil}) => -4
(at:ifAbsent: xv06 3 {nil}) => nil
(at:ifAbsent: xv06 4 {nil}) => nil
(at:ifAbsent: xv06 5 {nil}) => nil
(at:ifAbsent: xv06 7 {nil}) => nil
(at:ifAbsent: xv06 8 {nil}) => nil
(at:ifAbsent: xv06 9 {nil}) => nil
(at:ifAbsent: xv06 1073741823 {nil}) => nil
(at:ifAbsent: xv06 1073741824 {nil}) => nil
(at:ifAbsent: xv06 1073741825 {nil}) => nil
(at:ifAbsent: xv06 -1073741825 {nil}) => nil
(at:ifAbsent: xv06 -1073741824 {nil}) => nil
(at:ifAbsent: xv06 -1073741823 {nil}) => nil
(at:ifAbsent: xv06 -9 {nil}) => nil
(at:ifAbsent: xv06 -8 {nil}) => nil
(at:ifAbsent: xv06 -7 {nil}) => nil
(at:ifAbsent: xv06 -5 {nil}) => nil
(at:ifAbsent: xv06 -4 {nil}) => nil
(at:ifAbsent: xv06 -3 {nil}) => -6
(at:ifAbsent: xv06 -2 {nil}) => -5
(at:ifAbsent: xv06 -1 {nil}) => -4
Testing xv07
(at:ifAbsent: xv07 0 {nil}) => -6
(at:ifAbsent: xv07 1 {nil}) => -5
(at:ifAbsent: xv07 2 {nil}) => -4
(at:ifAbsent: xv07 3 {nil}) => -3
(at:ifAbsent: xv07 4 {nil}) => -2
(at:ifAbsent: xv07 5 {nil}) => -1
(at:ifAbsent: xv07 7 {nil}) => nil
(at:ifAbsent: xv07 8 {nil}) => nil
(at:ifAbsent: xv07 9 {nil}) => nil
(at:ifAbsent: xv07 1073741823 {nil}) => nil
(at:ifAbsent: xv07 1073741824 {nil}) => nil
(at:ifAbsent: xv07 1073741825 {nil}) => nil
(at:ifAbsent: xv07 -1073741825 {nil}) => nil
(at:ifAbsent: xv07 -1073741824 {nil}) => nil
(at:ifAbsent: xv07 -1073741823 {nil}) => nil
(at:ifAbsent: xv07 -9 {nil}) => nil
(at:ifAbsent: xv07 -8 {nil}) => nil
(at:ifAbsent: xv07 -7 {nil}) => nil
(at:ifAbsent: xv07 -5 {nil}) => -5
(at:ifAbsent: xv07 -4 {nil}) => -4
(at:ifAbsent: xv07 -3 {nil}) => -3
(at:ifAbsent: xv07 -2 {nil}) => -2
(at:ifAbsent: xv07 -1 {nil}) => -1
Testing xv08
(at:ifAbsent: xv08 0 {nil}) => 1
(at:ifAbsent: xv08 1 {nil}) => 2
(at:ifAbsent: xv08 2 {nil}) => 3
(at:ifAbsent: xv08 3 {nil}) => 4
(at:ifAbsent: xv08 4 {nil}) => 5
(at:ifAbsent: xv08 5 {nil}) => 6
(at:ifAbsent: xv08 7 {nil}) => 8
(at:ifAbsent: xv08 8 {nil}) => 9
(at:ifAbsent: xv08 9 {nil}) => 10
(at:ifAbsent: xv08 1073741823 {nil}) => nil
(at:ifAbsent: xv08 1073741824 {nil}) => nil
(at:ifAbsent: xv08 1073741825 {nil}) => nil
(at:ifAbsent: xv08 -1073741825 {nil}) => nil
(at:ifAbsent: xv08 -1073741824 {nil}) => nil
(at:ifAbsent: xv08 -1073741823 {nil}) => nil
(at:ifAbsent: xv08 -9 {nil}) => 7
(at:ifAbsent: xv08 -8 {nil}) => 8
(at:ifAbsent: xv08 -7 {nil}) => 9
(at:ifAbsent: xv08 -5 {nil}) => 11
(at:ifAbsent: xv08 -4 {nil}) => 12
(at:ifAbsent: xv08 -3 {nil}) => 13
(at:ifAbsent: xv08 -2 {nil}) => 14
(at:ifAbsent: xv08 -1 {nil}) => 15
Testing xv09
(at:ifAbsent: xv09 0 {nil}) => 1
(at:ifAbsent: xv09 1 {nil}) => 4
(at:ifAbsent: xv09 2 {nil}) => 9
(at:ifAbsent: xv09 3 {nil}) => 16
(at:ifAbsent: xv09 4 {nil}) => 25
(at:ifAbsent: xv09 5 {nil}) => 5
(at:ifAbsent: xv09 7 {nil}) => 2
(at:ifAbsent: xv09 8 {nil}) => 19
(at:ifAbsent: xv09 9 {nil}) => 7
(at:ifAbsent: xv09 1073741823 {nil}) => nil
(at:ifAbsent: xv09 1073741824 {nil}) => nil
(at:ifAbsent: xv09 1073741825 {nil}) => nil
(at:ifAbsent: xv09 -1073741825 {nil}) => nil
(at:ifAbsent: xv09 -1073741824 {nil}) => nil
(at:ifAbsent: xv09 -1073741823 {nil}) => nil
(at:ifAbsent: xv09 -9 {nil}) => 18
(at:ifAbsent: xv09 -8 {nil}) => 2
(at:ifAbsent: xv09 -7 {nil}) => 19
(at:ifAbsent: xv09 -5 {nil}) => 28
(at:ifAbsent: xv09 -4 {nil}) => 20
(at:ifAbsent: xv09 -3 {nil}) => 14
(at:ifAbsent: xv09 -2 {nil}) => 10
(at:ifAbsent: xv09 -1 {nil}) => 8
Testing xv10
(at:ifAbsent: xv10 0 {nil}) => 1/2
(at:ifAbsent: xv10 1 {nil}) => 1/3
(at:ifAbsent: xv10 2 {nil}) => 1/4
(at:ifAbsent: xv10 3 {nil}) => 1/5
(at:ifAbsent: xv10 4 {nil}) => 1/6
(at:ifAbsent: xv10 5 {nil}) => nil
(at:ifAbsent: xv10 7 {nil}) => nil
(at:ifAbsent: xv10 8 {nil}) => nil
(at:ifAbsent: xv10 9 {nil}) => nil
(at:ifAbsent: xv10 1073741823 {nil}) => nil
(at:ifAbsent: xv10 1073741824 {nil}) => nil
(at:ifAbsent: xv10 1073741825 {nil}) => nil
(at:ifAbsent: xv10 -1073741825 {nil}) => nil
(at:ifAbsent: xv10 -1073741824 {nil}) => nil
(at:ifAbsent: xv10 -1073741823 {nil}) => nil
(at:ifAbsent: xv10 -9 {nil}) => nil
(at:ifAbsent: xv10 -8 {nil}) => nil
(at:ifAbsent: xv10 -7 {nil}) => nil
(at:ifAbsent: xv10 -5 {nil}) => 1/2
(at:ifAbsent: xv10 -4 {nil}) => 1/3
(at:ifAbsent: xv10 -3 {nil}) => 1/4
(at:ifAbsent: xv10 -2 {nil}) => 1/5
(at:ifAbsent: xv10 -1 {nil}) => 1/6
Testing xv11
(at:ifAbsent: xv11 0 {nil}) => 1/2
(at:ifAbsent: xv11 1 {nil}) => 4/1
(at:ifAbsent: xv11 2 {nil}) => 1/6
(at:ifAbsent: xv11 3 {nil}) => 8/1
(at:ifAbsent: xv11 4 {nil}) => 1/10
(at:ifAbsent: xv11 5 {nil}) => 12/1
(at:ifAbsent: xv11 7 {nil}) => 16/1
(at:ifAbsent: xv11 8 {nil}) => 1/18
(at:ifAbsent: xv11 9 {nil}) => 20/1
(at:ifAbsent: xv11 1073741823 {nil}) => nil
(at:ifAbsent: xv11 1073741824 {nil}) => nil
(at:ifAbsent: xv11 1073741825 {nil}) => nil
(at:ifAbsent: xv11 -1073741825 {nil}) => nil
(at:ifAbsent: xv11 -1073741824 {nil}) => nil
(at:ifAbsent: xv11 -1073741823 {nil}) => nil
(at:ifAbsent: xv11 -9 {nil}) => 4/1
(at:ifAbsent: xv11 -8 {nil}) => 1/6
(at:ifAbsent: xv11 -7 {nil}) => 8/1
(at:ifAbsent: xv11 -5 {nil}) => 12/1
(at:ifAbsent: xv11 -4 {nil}) => 1/14
(at:ifAbsent: xv11 -3 {nil}) => 16/1
(at:ifAbsent: xv11 -2 {nil}) => 1/18
(at:ifAbsent: xv11 -1 {nil}) => 20/1
Testing xv12
(at:ifAbsent: xv12 0 {nil}) => <True>
(at:ifAbsent: xv12 1 {nil}) => <False>
(at:ifAbsent: xv12 2 {nil}) => nil
(at:ifAbsent: xv12 3 {nil}) => nil
(at:ifAbsent: xv12 4 {nil}) => nil
(at:ifAbsent: xv12 5 {nil}) => nil
(at:ifAbsent: xv12 7 {nil}) => nil
(at:ifAbsent: xv12 8 {nil}) => nil
(at:ifAbsent: xv12 9 {nil}) => nil
(at:ifAbsent: xv12 1073741823 {nil}) => nil
(at:ifAbsent: xv12 1073741824 {nil}) => nil
(at:ifAbsent: xv12 1073741825 {nil}) => nil
(at:ifAbsent: xv12 -1073741825 {nil}) => nil
(at:ifAbsent: xv12 -1073741824 {nil}) => nil
(at:ifAbsent: xv12 -1073741823 {nil}) => nil
(at:ifAbsent: xv12 -9 {nil}) => nil
(at:ifAbsent: xv12 -8 {nil}) => nil
(at:ifAbsent: xv12 -7 {nil}) => nil
(at:ifAbsent: xv12 -5 {nil}) => nil
(at:ifAbsent: xv12 -4 {nil}) => nil
(at:ifAbsent: xv12 -3 {nil}) => nil
(at:ifAbsent: xv12 -2 {nil}) => <True>
(at:ifAbsent: xv12 -1 {nil}) => <False>
Testing xv13
(at:ifAbsent: xv13 0 {nil}) => nil
(at:ifAbsent: xv13 1 {nil}) => nil
(at:ifAbsent: xv13 2 {nil}) => nil
(at:ifAbsent: xv13 3 {nil}) => nil
(at:ifAbsent: xv13 4 {nil}) => nil
(at:ifAbsent: xv13 5 {nil}) => nil
(at:ifAbsent: xv13 7 {nil}) => nil
(at:ifAbsent: xv13 8 {nil}) => nil
(at:ifAbsent: xv13 9 {nil}) => nil
(at:ifAbsent: xv13 1073741823 {nil}) => nil
(at:ifAbsent: xv13 1073741824 {nil}) => nil
(at:ifAbsent: xv13 1073741825 {nil}) => nil
(at:ifAbsent: xv13 -1073741825 {nil}) => nil
(at:ifAbsent: xv13 -1073741824 {nil}) => nil
(at:ifAbsent: xv13 -1073741823 {nil}) => nil
(at:ifAbsent: xv13 -9 {nil}) => nil
(at:ifAbsent: xv13 -8 {nil}) => nil
(at:ifAbsent: xv13 -7 {nil}) => nil
(at:ifAbsent: xv13 -5 {nil}) => nil
(at:ifAbsent: xv13 -4 {nil}) => nil
(at:ifAbsent: xv13 -3 {nil}) => nil
(at:ifAbsent: xv13 -2 {nil}) => nil
(at:ifAbsent: xv13 -1 {nil}) => nil
Testing xv01
(print xv01) => << >>
(detect:ifNone: xv01 negative) => nil
(detect:ifNone: xv01 nonnegative) => nil
(detect:ifNone: xv01 strictlyPositive) => nil
Testing xv02
(print xv02) => << 1 >>
(includes: xv02 nil) => <False>
(occurrencesOf: xv02 nil) => 0
(includes: xv02 <True>) => <False>
(occurrencesOf: xv02 <True>) => 0
(includes: xv02 <False>) => <False>
(occurrencesOf: xv02 <False>) => 0
(includes: xv02 0) => <False>
(occurrencesOf: xv02 0) => 0
(includes: xv02 1) => <True>
(occurrencesOf: xv02 1) => 1
(includes: xv02 2) => <False>
(occurrencesOf: xv02 2) => 0
(includes: xv02 42) => <False>
(occurrencesOf: xv02 42) => 0
(detect:ifNone: xv02 negative) => nil
(detect:ifNone: xv02 nonnegative) => 1
(detect:ifNone: xv02 strictlyPositive) => 1
Testing xv03
(print xv03) => << 1 2 3 >>
(includes: xv03 nil) => <False>
(occurrencesOf: xv03 nil) => 0
(includes: xv03 <True>) => <False>
(occurrencesOf: xv03 <True>) => 0
(includes: xv03 <False>) => <False>
(occurrencesOf: xv03 <False>) => 0
(includes: xv03 0) => <False>
(occurrencesOf: xv03 0) => 0
(includes: xv03 1) => <True>
(occurrencesOf: xv03 1) => 1
(includes: xv03 2) => <True>
(occurrencesOf: xv03 2) => 1
(includes: xv03 42) => <False>
(occurrencesOf: xv03 42) => 0
(detect:ifNone: xv03 negative) => nil
(detect:ifNone: xv03 nonnegative) => 1
(detect:ifNone: xv03 strictlyPositive) => 1
Testing xv04
(print xv04) => << 1 2 3 4 5 6 >>
(includes: xv04 nil) => <False>
(occurrencesOf: xv04 nil) => 0
(includes: xv04 <True>) => <False>
(occurrencesOf: xv04 <True>) => 0
(includes: xv04 <False>) => <False>
(occurrencesOf: xv04 <False>) => 0
(includes: xv04 0) => <False>
(occurrencesOf: xv04 0) => 0
(includes: xv04 1) => <True>
(occurrencesOf: xv04 1) => 1
(includes: xv04 2) => <True>
(occurrencesOf: xv04 2) => 1
(includes: xv04 42) => <False>
(occurrencesOf: xv04 42) => 0
(detect:ifNone: xv04 negative) => nil
(detect:ifNone: xv04 nonnegative) => 1
(detect:ifNone: xv04 strictlyPositive) => 1
Testing xv05
(print xv05) => << -6 >>
(includes: xv05 nil) => <False>
(occurrencesOf: xv05 nil) => 0
(includes: xv05 <True>) => <False>
(occurrencesOf: xv05 <True>) => 0
(includes: xv05 <False>) => <False>
(occurrencesOf: xv05 <False>) => 0
(includes: xv05 0) => <False>
(occurrencesOf: xv05 0) => 0
(includes: xv05 1) => <False>
(occurrencesOf: xv05 1) => 0
(includes: xv05 2) => <False>
(occurrencesOf: xv05 2) => 0
(includes: xv05 42) => <False>
(occurrencesOf: xv05 42) => 0
(detect:ifNone: xv05 negative) => -6
(detect:ifNone: xv05 nonnegative) => nil
(detect:ifNone: xv05 strictlyPositive) => nil
Testing xv06
(print xv06) => << -6 -5 -4 >>
(includes: xv06 nil) => <False>
(occurrencesOf: xv06 nil) => 0
(includes: xv06 <True>) => <False>
(occurrencesOf: xv06 <True>) => 0
(includes: xv06 <False>) => <False>
(occurrencesOf: xv06 <False>) => 0
(includes: xv06 0) => <False>
(occurrencesOf: xv06 0) => 0
(includes: xv06 1) => <False>
(occurrencesOf: xv06 1) => 0
(includes: xv06 2) => <False>
(occurrencesOf: xv06 2) => 0
(includes: xv06 42) => <False>
(occurrencesOf: xv06 42) => 0
(detect:ifNone: xv06 negative) => -6
(detect:ifNone: xv06 nonnegative) => nil
(detect:ifNone: xv06 strictlyPositive) => nil
Testing xv07
(print xv07) => << -6 -5 -4 -3 -2 -1 >>
(includes: xv07 nil) => <False>
(occurrencesOf: xv07 nil) => 0
(includes: xv07 <True>) => <False>
(occurrencesOf: xv07 <True>) => 0
(includes: xv07 <False>) => <False>
(occurrencesOf: xv07 <False>) => 0
(includes: xv07 0) => <False>
(occurrencesOf: xv07 0) => 0
(includes: xv07 1) => <False>
(occurrencesOf: xv07 1) => 0
(includes: xv07 2) => <False>
(occurrencesOf: xv07 2) => 0
(includes: xv07 42) => <False>
(occurrencesOf: xv07 42) => 0
(detect:ifNone: xv07 negative) => -6
(detect:ifNone: xv07 nonnegative) => nil
(detect:ifNone: xv07 strictlyPositive) => nil
Testing xv08
(print xv08) => << 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 >>
(includes: xv08 nil) => <False>
(occurrencesOf: xv08 nil) => 0
(includes: xv08 <True>) => <False>
(occurrencesOf: xv08 <True>) => 0
(includes: xv08 <False>) => <False>
(occurrencesOf: xv08 <False>) => 0
(includes: xv08 0) => <False>
(occurrencesOf: xv08 0) => 0
(includes: xv08 1) => <True>
(occurrencesOf: xv08 1) => 1
(includes: xv08 2) => <True>
(occurrencesOf: xv08 2) => 1
(includes: xv08 42) => <False>
(occurrencesOf: xv08 42) => 0
(detect:ifNone: xv08 negative) => nil
(detect:ifNone: xv08 nonnegative) => 1
(detect:ifNone: xv08 strictlyPositive) => 1
Testing xv09
(print xv09) => << 1 4 9 16 25 5 18 2 19 7 28 20 14 10 8 >>
(includes: xv09 nil) => <False>
(occurrencesOf: xv09 nil) => 0
(includes: xv09 <True>) => <False>
(occurrencesOf: xv09 <True>) => 0
(includes: xv09 <False>) => <False>
(occurrencesOf: xv09 <False>) => 0
(includes: xv09 0) => <False>
(occurrencesOf: xv09 0) => 0
(includes: xv09 1) => <True>
(occurrencesOf: xv09 1) => 1
(includes: xv09 2) => <True>
(occurrencesOf: xv09 2) => 1
(includes: xv09 42) => <False>
(occurrencesOf: xv09 42) => 0
(detect:ifNone: xv09 negative) => nil
(detect:ifNone: xv09 nonnegative) => 1
(detect:ifNone: xv09 strictlyPositive) => 1
Testing xv10
(print xv10) => << 1/2 1/3 1/4 1/5 1/6 >>
(detect:ifNone: xv10 negative) => nil
(detect:ifNone: xv10 nonnegative) => 1/2
(detect:ifNone: xv10 strictlyPositive) => 1/2
Testing xv11
(print xv11) => << 1/2 4/1 1/6 8/1 1/10 12/1 1/14 16/1 1/18 20/1 >>
(detect:ifNone: xv11 negative) => nil
(detect:ifNone: xv11 nonnegative) => 1/2
(detect:ifNone: xv11 strictlyPositive) => 1/2
Testing xv12
(print xv12) => << <True> <False> >>
(includes: xv12 nil) => <False>
(occurrencesOf: xv12 nil) => 0
(includes: xv12 <True>) => <True>
(occurrencesOf: xv12 <True>) => 1
(includes: xv12 <False>) => <True>
(occurrencesOf: xv12 <False>) => 1
(includes: xv12 0) => <False>
(occurrencesOf: xv12 0) => 0
(includes: xv12 1) => <False>
(occurrencesOf: xv12 1) => 0
(includes: xv12 2) => <False>
(occurrencesOf: xv12 2) => 0
(includes: xv12 42) => <False>
(occurrencesOf: xv12 42) => 0
Testing xv13
(print xv13) => << nil >>
(includes: xv13 nil) => <True>
(occurrencesOf: xv13 nil) => 1
(includes: xv13 <True>) => <False>
(occurrencesOf: xv13 <True>) => 0
(includes: xv13 <False>) => <False>
(occurrencesOf: xv13 <False>) => 0
(includes: xv13 0) => <False>
(occurrencesOf: xv13 0) => 0
(includes: xv13 1) => <False>
(occurrencesOf: xv13 1) => 0
(includes: xv13 2) => <False>
(occurrencesOf: xv13 2) => 0
(includes: xv13 42) => <False>
(occurrencesOf: xv13 42) => 0
Testing xv01
(sum xv01) => 0
Testing xv02
(sum xv02) => 1
Testing xv03
(sum xv03) => 6
Testing xv04
(sum xv04) => 21
Testing xv05
(sum xv05) => -6
Testing xv06
(sum xv06) => -15
Testing xv07
(sum xv07) => -21
Testing xv08
(sum xv08) => 120
Testing xv09
(sum xv09) => 186
Testing xv10
(sum xv10) => 29/20
Testing xv11
(sum xv11) => 38363/630
Testing xv12
Testing xv13
Testing xv01
(product xv01) => 1
Testing xv02
(product xv02) => 1
Testing xv03
(product xv03) => 6
Testing xv04
(product xv04) => 720
Testing xv05
(product xv05) => -6
Testing xv06
(product xv06) => -120
Testing xv07
(product xv07) => 720
Testing xv08
Testing xv09
Testing xv10
(product xv10) => 1/720
Testing xv11
(product xv11) => 256/63
Testing xv12
Testing xv13
Testing xv01
Testing xv02
(min xv02) => 1
Testing xv03
(min xv03) => 1
Testing xv04
(min xv04) => 1
Testing xv05
(min xv05) => -6
Testing xv06
(min xv06) => -6
Testing xv07
(min xv07) => -6
Testing xv08
(min xv08) => 1
Testing xv09
(min xv09) => 1
Testing xv10
(min xv10) => 1/6
Testing xv11
(min xv11) => 1/18
Testing xv12
Testing xv13
Testing xv01
Testing xv02
(max xv02) => 1
Testing xv03
(max xv03) => 3
Testing xv04
(max xv04) => 6
Testing xv05
(max xv05) => -6
Testing xv06
(max xv06) => -4
Testing xv07
(max xv07) => -1
Testing xv08
(max xv08) => 15
Testing xv09
(max xv09) => 28
Testing xv10
(max xv10) => 1/2
Testing xv11
(max xv11) => 20/1
Testing xv12
Testing xv13
Testing xv01
(similar: xv01 nil) => <False>
(similar: xv01 <True>) => <False>
(similar: xv01 <False>) => <False>
(similar: xv01 0) => <False>
(similar: xv01 1) => <False>
(similar: xv01 2) => <False>
(similar: xv01 42) => <False>
(similar: xv01 xv01) => <True>
(similar: xv01 xv02) => <False>
(similar: xv01 xv03) => <False>
(similar: xv01 xv04) => <False>
(similar: xv01 xv05) => <False>
(similar: xv01 xv06) => <False>
(similar: xv01 xv07) => <False>
(similar: xv01 xv08) => <False>
(similar: xv01 xv09) => <False>
(similar: xv01 xv10) => <False>
(similar: xv01 xv11) => <False>
(similar: xv01 xv12) => <False>
(similar: xv01 xv13) => <False>
Testing xv02
(similar: xv02 nil) => <False>
(similar: xv02 <True>) => <False>
(similar: xv02 <False>) => <False>
(similar: xv02 0) => <False>
(similar: xv02 1) => <False>
(similar: xv02 2) => <False>
(similar: xv02 42) => <False>
(similar: xv02 xv01) => <False>
(similar: xv02 xv02) => <True>
(similar: xv02 xv03) => <False>
(similar: xv02 xv04) => <False>
(similar: xv02 xv05) => <False>
(similar: xv02 xv06) => <False>
(similar: xv02 xv07) => <False>
(similar: xv02 xv08) => <False>
(similar: xv02 xv09) => <False>
(similar: xv02 xv12) => <False>
(similar: xv02 xv13) => <False>
Testing xv03
(similar: xv03 nil) => <False>
(similar: xv03 <True>) => <False>
(similar: xv03 <False>) => <False>
(similar: xv03 0) => <False>
(similar: xv03 1) => <False>
(similar: xv03 2) => <False>
(similar: xv03 42) => <False>
(similar: xv03 xv01) => <False>
(similar: xv03 xv02) => <False>
(similar: xv03 xv03) => <True>
(similar: xv03 xv04) => <False>
(similar: xv03 xv05) => <False>
(similar: xv03 xv06) => <False>
(similar: xv03 xv07) => <False>
(similar: xv03 xv08) => <False>
(similar: xv03 xv09) => <False>
(similar: xv03 xv12) => <False>
(similar: xv03 xv13) => <False>
Testing xv04
(similar: xv04 nil) => <False>
(similar: xv04 <True>) => <False>
(similar: xv04 <False>) => <False>
(similar: xv04 0) => <False>
(similar: xv04 1) => <False>
(similar: xv04 2) => <False>
(similar: xv04 42) => <False>
(similar: xv04 xv01) => <False>
(similar: xv04 xv02) => <False>
(similar: xv04 xv03) => <False>
(similar: xv04 xv04) => <True>
(similar: xv04 xv05) => <False>
(similar: xv04 xv06) => <False>
(similar: xv04 xv07) => <False>
(similar: xv04 xv08) => <False>
(similar: xv04 xv09) => <False>
(similar: xv04 xv12) => <False>
(similar: xv04 xv13) => <False>
Testing xv05
(similar: xv05 nil) => <False>
(similar: xv05 <True>) => <False>
(similar: xv05 <False>) => <False>
(similar: xv05 0) => <False>
(similar: xv05 1) => <False>
(similar: xv05 2) => <False>
(similar: xv05 42) => <False>
(similar: xv05 xv01) => <False>
(similar: xv05 xv02) => <False>
(similar: xv05 xv03) => <False>
(similar: xv05 xv04) => <False>
(similar: xv05 xv05) => <True>
(similar: xv05 xv06) => <False>
(similar: xv05 xv07) => <False>
(similar: xv05 xv08) => <False>
(similar: xv05 xv09) => <False>
(similar: xv05 xv12) => <False>
(similar: xv05 xv13) => <False>
Testing xv06
(similar: xv06 nil) => <False>
(similar: xv06 <True>) => <False>
(similar: xv06 <False>) => <False>
(similar: xv06 0) => <False>
(similar: xv06 1) => <False>
(similar: xv06 2) => <False>
(similar: xv06 42) => <False>
(similar: xv06 xv01) => <False>
(similar: xv06 xv02) => <False>
(similar: xv06 xv03) => <False>
(similar: xv06 xv04) => <False>
(similar: xv06 xv05) => <False>
(similar: xv06 xv06) => <True>
(similar: xv06 xv07) => <False>
(similar: xv06 xv08) => <False>
(similar: xv06 xv09) => <False>
(similar: xv06 xv12) => <False>
(similar: xv06 xv13) => <False>
Testing xv07
(similar: xv07 nil) => <False>
(similar: xv07 <True>) => <False>
(similar: xv07 <False>) => <False>
(similar: xv07 0) => <False>
(similar: xv07 1) => <False>
(similar: xv07 2) => <False>
(similar: xv07 42) => <False>
(similar: xv07 xv01) => <False>
(similar: xv07 xv02) => <False>
(similar: xv07 xv03) => <False>
(similar: xv07 xv04) => <False>
(similar: xv07 xv05) => <False>
(similar: xv07 xv06) => <False>
(similar: xv07 xv07) => <True>
(similar: xv07 xv08) => <False>
(similar: xv07 xv09) => <False>
(similar: xv07 xv12) => <False>
(similar: xv07 xv13) => <False>
Testing xv08
(similar: xv08 nil) => <False>
(similar: xv08 <True>) => <False>
(similar: xv08 <False>) => <False>
(similar: xv08 0) => <False>
(similar: xv08 1) => <False>
(similar: xv08 2) => <False>
(similar: xv08 42) => <False>
(similar: xv08 xv01) => <False>
(similar: xv08 xv02) => <False>
(similar: xv08 xv03) => <False>
(similar: xv08 xv04) => <False>
(similar: xv08 xv05) => <False>
(similar: xv08 xv06) => <False>
(similar: xv08 xv07) => <False>
(similar: xv08 xv08) => <True>
(similar: xv08 xv09) => <False>
(similar: xv08 xv12) => <False>
(similar: xv08 xv13) => <False>
Testing xv09
(similar: xv09 nil) => <False>
(similar: xv09 <True>) => <False>
(similar: xv09 <False>) => <False>
(similar: xv09 0) => <False>
(similar: xv09 1) => <False>
(similar: xv09 2) => <False>
(similar: xv09 42) => <False>
(similar: xv09 xv01) => <False>
(similar: xv09 xv02) => <False>
(similar: xv09 xv03) => <False>
(similar: xv09 xv04) => <False>
(similar: xv09 xv05) => <False>
(similar: xv09 xv06) => <False>
(similar: xv09 xv07) => <False>
(similar: xv09 xv08) => <False>
(similar: xv09 xv09) => <True>
(similar: xv09 xv12) => <False>
(similar: xv09 xv13) => <False>
Testing xv10
(similar: xv10 nil) => <False>
(similar: xv10 <True>) => <False>
(similar: xv10 <False>) => <False>
(similar: xv10 0) => <False>
(similar: xv10 1) => <False>
(similar: xv10 2) => <False>
(similar: xv10 42) => <False>
(similar: xv10 xv01) => <False>
(similar: xv10 xv10) => <True>
(similar: xv10 xv11) => <False>
Testing xv11
(similar: xv11 nil) => <False>
(similar: xv11 <True>) => <False>
(similar: xv11 <False>) => <False>
(similar: xv11 0) => <False>
(similar: xv11 1) => <False>
(similar: xv11 2) => <False>
(similar: xv11 42) => <False>
(similar: xv11 xv01) => <False>
(similar: xv11 xv10) => <False>
(similar: xv11 xv11) => <True>
Testing xv12
(similar: xv12 nil) => <False>
(similar: xv12 <True>) => <False>
(similar: xv12 <False>) => <False>
(similar: xv12 0) => <False>
(similar: xv12 1) => <False>
(similar: xv12 2) => <False>
(similar: xv12 42) => <False>
(similar: xv12 xv01) => <False>
(similar: xv12 xv02) => <False>
(similar: xv12 xv03) => <False>
(similar: xv12 xv04) => <False>
(similar: xv12 xv05) => <False>
(similar: xv12 xv06) => <False>
(similar: xv12 xv07) => <False>
(similar: xv12 xv08) => <False>
(similar: xv12 xv09) => <False>
(similar: xv12 xv12) => <True>
(similar: xv12 xv13) => <False>
Testing xv13
(similar: xv13 nil) => <False>
(similar: xv13 <True>) => <False>
(similar: xv13 <False>) => <False>
(similar: xv13 0) => <False>
(similar: xv13 1) => <False>
(similar: xv13 2) => <False>
(similar: xv13 42) => <False>
(similar: xv13 xv01) => <False>
(similar: xv13 xv02) => <False>
(similar: xv13 xv03) => <False>
(similar: xv13 xv04) => <False>
(similar: xv13 xv05) => <False>
(similar: xv13 xv06) => <False>
(similar: xv13 xv07) => <False>
(similar: xv13 xv08) => <False>
(similar: xv13 xv09) => <False>
(similar: xv13 xv12) => <False>
(similar: xv13 xv13) => <True>
Testing xv01
(< xv01 xv01) => <False>
(< xv01 xv02) => <True>
(< xv01 xv03) => <True>
(< xv01 xv04) => <True>
(< xv01 xv05) => <True>
(< xv01 xv06) => <True>
(< xv01 xv07) => <True>
(< xv01 xv08) => <True>
(< xv01 xv09) => <True>
(< xv01 xv10) => <True>
(< xv01 xv11) => <True>
Testing xv02
(< xv02 xv01) => <False>
(< xv02 xv02) => <False>
(< xv02 xv03) => <True>
(< xv02 xv04) => <True>
(< xv02 xv05) => <False>
(< xv02 xv06) => <False>
(< xv02 xv07) => <False>
(< xv02 xv08) => <True>
(< xv02 xv09) => <True>
Testing xv03
(< xv03 xv01) => <False>
(< xv03 xv02) => <False>
(< xv03 xv03) => <False>
(< xv03 xv04) => <True>
(< xv03 xv05) => <False>
(< xv03 xv06) => <False>
(< xv03 xv07) => <False>
(< xv03 xv08) => <True>
(< xv03 xv09) => <True>
Testing xv04
(< xv04 xv01) => <False>
(< xv04 xv02) => <False>
(< xv04 xv03) => <False>
(< xv04 xv04) => <False>
(< xv04 xv05) => <False>
(< xv04 xv06) => <False>
(< xv04 xv07) => <False>
(< xv04 xv08) => <True>
(< xv04 xv09) => <True>
Testing xv05
(< xv05 xv01) => <False>
(< xv05 xv02) => <True>
(< xv05 xv03) => <True>
(< xv05 xv04) => <True>
(< xv05 xv05) => <False>
(< xv05 xv06) => <True>
(< xv05 xv07) => <True>
(< xv05 xv08) => <True>
(< xv05 xv09) => <True>
Testing xv06
(< xv06 xv01) => <False>
(< xv06 xv02) => <True>
(< xv06 xv03) => <True>
(< xv06 xv04) => <True>
(< xv06 xv05) => <False>
(< xv06 xv06) => <False>
(< xv06 xv07) => <True>
(< xv06 xv08) => <True>
(< xv06 xv09) => <True>
Testing xv07
(< xv07 xv01) => <False>
(< xv07 xv02) => <True>
(< xv07 xv03) => <True>
(< xv07 xv04) => <True>
(< xv07 xv05) => <False>
(< xv07 xv06) => <False>
(< xv07 xv07) => <False>
(< xv07 xv08) => <True>
(< xv07 xv09) => <True>
Testing xv08
(< xv08 xv01) => <False>
(< xv08 xv02) => <False>
(< xv08 xv03) => <False>
(< xv08 xv04) => <False>
(< xv08 xv05) => <False>
(< xv08 xv06) => <False>
(< xv08 xv07) => <False>
(< xv08 xv08) => <False>
(< xv08 xv09) => <True>
Testing xv09
(< xv09 xv01) => <False>
(< xv09 xv02) => <False>
(< xv09 xv03) => <False>
(< xv09 xv04) => <False>
(< xv09 xv05) => <False>
(< xv09 xv06) => <False>
(< xv09 xv07) => <False>
(< xv09 xv08) => <False>
(< xv09 xv09) => <False>
Testing xv10
(< xv10 xv01) => <False>
(< xv10 xv10) => <False>
(< xv10 xv11) => <True>
Testing xv11
(< xv11 xv01) => <False>
(< xv11 xv10) => <False>
(< xv11 xv11) => <False>
Testing xv12
Testing xv13
Testing xv01
Testing xv02
Testing xv03
Testing xv04
(fromIndex:toIndex: xv04 0 0) => << 1 >>
(fromIndex:toIndex: xv04 0 1) => << 1 2 >>
(fromIndex:toIndex: xv04 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv04 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv04 1 1) => << 2 >>
(fromIndex:toIndex: xv04 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv04 -1 -1) => << 6 >>
(fromIndex:toIndex: xv04 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv04 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv04 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv04 -2 -2) => << 5 >>
(fromIndex:toIndex: xv04 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv04 -1 0) => << 6 1 >>
(fromIndex:toIndex: xv04 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: xv04 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: xv04 -4 3) => << 3 4 >>
(fromIndex:toIndex: xv04 -5 4) => << 2 3 4 5 >>
Testing xv05
Testing xv06
Testing xv07
(fromIndex:toIndex: xv07 0 0) => << -6 >>
(fromIndex:toIndex: xv07 0 1) => << -6 -5 >>
(fromIndex:toIndex: xv07 0 2) => << -6 -5 -4 >>
(fromIndex:toIndex: xv07 0 4) => << -6 -5 -4 -3 -2 >>
(fromIndex:toIndex: xv07 1 1) => << -5 >>
(fromIndex:toIndex: xv07 1 3) => << -5 -4 -3 >>
(fromIndex:toIndex: xv07 -1 -1) => << -1 >>
(fromIndex:toIndex: xv07 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv07 -3 -1) => << -3 -2 -1 >>
(fromIndex:toIndex: xv07 -5 -1) => << -5 -4 -3 -2 -1 >>
(fromIndex:toIndex: xv07 -2 -2) => << -2 >>
(fromIndex:toIndex: xv07 -4 -2) => << -4 -3 -2 >>
(fromIndex:toIndex: xv07 -1 0) => << -1 -6 >>
(fromIndex:toIndex: xv07 -2 1) => << -2 -1 -6 -5 >>
(fromIndex:toIndex: xv07 -3 2) => << -3 -2 -1 -6 -5 -4 >>
(fromIndex:toIndex: xv07 -4 3) => << -4 -3 >>
(fromIndex:toIndex: xv07 -5 4) => << -5 -4 -3 -2 >>
Testing xv08
(fromIndex:toIndex: xv08 0 0) => << 1 >>
(fromIndex:toIndex: xv08 0 1) => << 1 2 >>
(fromIndex:toIndex: xv08 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv08 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv08 1 1) => << 2 >>
(fromIndex:toIndex: xv08 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv08 -1 -1) => << 15 >>
(fromIndex:toIndex: xv08 -2 -1) => << 14 15 >>
(fromIndex:toIndex: xv08 -3 -1) => << 13 14 15 >>
(fromIndex:toIndex: xv08 -5 -1) => << 11 12 13 14 15 >>
(fromIndex:toIndex: xv08 -2 -2) => << 14 >>
(fromIndex:toIndex: xv08 -4 -2) => << 12 13 14 >>
(fromIndex:toIndex: xv08 -1 0) => << 15 1 >>
(fromIndex:toIndex: xv08 -2 1) => << 14 15 1 2 >>
(fromIndex:toIndex: xv08 -3 2) => << 13 14 15 1 2 3 >>
(fromIndex:toIndex: xv08 -4 3) => << 12 13 14 15 1 2 3 4 >>
(fromIndex:toIndex: xv08 -5 4) => << 11 12 13 14 15 1 2 3 4 5 >>
Testing xv09
(fromIndex:toIndex: xv09 0 0) => << 1 >>
(fromIndex:toIndex: xv09 0 1) => << 1 4 >>
(fromIndex:toIndex: xv09 0 2) => << 1 4 9 >>
(fromIndex:toIndex: xv09 0 4) => << 1 4 9 16 25 >>
(fromIndex:toIndex: xv09 1 1) => << 4 >>
(fromIndex:toIndex: xv09 1 3) => << 4 9 16 >>
(fromIndex:toIndex: xv09 -1 -1) => << 8 >>
(fromIndex:toIndex: xv09 -2 -1) => << 10 8 >>
(fromIndex:toIndex: xv09 -3 -1) => << 14 10 8 >>
(fromIndex:toIndex: xv09 -5 -1) => << 28 20 14 10 8 >>
(fromIndex:toIndex: xv09 -2 -2) => << 10 >>
(fromIndex:toIndex: xv09 -4 -2) => << 20 14 10 >>
(fromIndex:toIndex: xv09 -1 0) => << 8 1 >>
(fromIndex:toIndex: xv09 -2 1) => << 10 8 1 4 >>
(fromIndex:toIndex: xv09 -3 2) => << 14 10 8 1 4 9 >>
(fromIndex:toIndex: xv09 -4 3) => << 20 14 10 8 1 4 9 16 >>
(fromIndex:toIndex: xv09 -5 4) => << 28 20 14 10 8 1 4 9 16 25 >>
Testing xv10
Testing xv11
(fromIndex:toIndex: xv11 0 0) => << 1/2 >>
(fromIndex:toIndex: xv11 0 1) => << 1/2 4/1 >>
(fromIndex:toIndex: xv11 0 2) => << 1/2 4/1 1/6 >>
(fromIndex:toIndex: xv11 0 4) => << 1/2 4/1 1/6 8/1 1/10 >>
(fromIndex:toIndex: xv11 1 1) => << 4/1 >>
(fromIndex:toIndex: xv11 1 3) => << 4/1 1/6 8/1 >>
(fromIndex:toIndex: xv11 -1 -1) => << 20/1 >>
(fromIndex:toIndex: xv11 -2 -1) => << 1/18 20/1 >>
(fromIndex:toIndex: xv11 -3 -1) => << 16/1 1/18 20/1 >>
(fromIndex:toIndex: xv11 -5 -1) => << 12/1 1/14 16/1 1/18 20/1 >>
(fromIndex:toIndex: xv11 -2 -2) => << 1/18 >>
(fromIndex:toIndex: xv11 -4 -2) => << 1/14 16/1 1/18 >>
(fromIndex:toIndex: xv11 -1 0) => << 20/1 1/2 >>
(fromIndex:toIndex: xv11 -2 1) => << 1/18 20/1 1/2 4/1 >>
(fromIndex:toIndex: xv11 -3 2) => << 16/1 1/18 20/1 1/2 4/1 1/6 >>
(fromIndex:toIndex: xv11 -4 3) => << 1/14 16/1 1/18 20/1 1/2 4/1 1/6 8/1 >>
(fromIndex:toIndex: xv11 -5 4) => << 12/1 1/14 16/1 1/18 20/1 1/2 4/1 1/6 8/1 1/10 >>
Testing xv12
Testing xv13
<class Array>
Testing xv01
Testing xv02
Testing xv03
Testing xv04
(fromIndex:toIndex: xv04 0 0) => << 1 >>
(fromIndex:toIndex: xv04 0 1) => << 1 2 >>
(fromIndex:toIndex: xv04 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv04 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv04 1 1) => << 2 >>
(fromIndex:toIndex: xv04 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv04 -1 -1) => << 6 >>
(fromIndex:toIndex: xv04 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv04 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv04 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv04 -2 -2) => << 5 >>
(fromIndex:toIndex: xv04 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv04 -1 0) => << 6 1 >>
(fromIndex:toIndex: xv04 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: xv04 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: xv04 -4 3) => << 3 4 >>
(fromIndex:toIndex: xv04 -5 4) => << 2 3 4 5 >>
Testing xv05
Testing xv06
Testing xv07
(fromIndex:toIndex: xv07 0 0) => << -6 >>
(fromIndex:toIndex: xv07 0 1) => << -6 -5 >>
(fromIndex:toIndex: xv07 0 2) => << -6 -5 -4 >>
(fromIndex:toIndex: xv07 0 4) => << -6 -5 -4 -3 -2 >>
(fromIndex:toIndex: xv07 1 1) => << -5 >>
(fromIndex:toIndex: xv07 1 3) => << -5 -4 -3 >>
(fromIndex:toIndex: xv07 -1 -1) => << -1 >>
(fromIndex:toIndex: xv07 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv07 -3 -1) => << -3 -2 -1 >>
(fromIndex:toIndex: xv07 -5 -1) => << -5 -4 -3 -2 -1 >>
(fromIndex:toIndex: xv07 -2 -2) => << -2 >>
(fromIndex:toIndex: xv07 -4 -2) => << -4 -3 -2 >>
(fromIndex:toIndex: xv07 -1 0) => << -1 -6 >>
(fromIndex:toIndex: xv07 -2 1) => << -2 -1 -6 -5 >>
(fromIndex:toIndex: xv07 -3 2) => << -3 -2 -1 -6 -5 -4 >>
(fromIndex:toIndex: xv07 -4 3) => << -4 -3 >>
(fromIndex:toIndex: xv07 -5 4) => << -5 -4 -3 -2 >>
Testing xv08
(fromIndex:toIndex: xv08 0 0) => << 1 >>
(fromIndex:toIndex: xv08 0 1) => << 1 2 >>
(fromIndex:toIndex: xv08 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv08 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv08 1 1) => << 2 >>
(fromIndex:toIndex: xv08 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv08 -1 -1) => << 15 >>
(fromIndex:toIndex: xv08 -2 -1) => << 14 15 >>
(fromIndex:toIndex: xv08 -3 -1) => << 13 14 15 >>
(fromIndex:toIndex: xv08 -5 -1) => << 11 12 13 14 15 >>
(fromIndex:toIndex: xv08 -2 -2) => << 14 >>
(fromIndex:toIndex: xv08 -4 -2) => << 12 13 14 >>
(fromIndex:toIndex: xv08 -1 0) => << 15 1 >>
(fromIndex:toIndex: xv08 -2 1) => << 14 15 1 2 >>
(fromIndex:toIndex: xv08 -3 2) => << 13 14 15 1 2 3 >>
(fromIndex:toIndex: xv08 -4 3) => << 12 13 14 15 1 2 3 4 >>
(fromIndex:toIndex: xv08 -5 4) => << 11 12 13 14 15 1 2 3 4 5 >>
Testing xv09
(fromIndex:toIndex: xv09 0 0) => << 1 >>
(fromIndex:toIndex: xv09 0 1) => << 1 4 >>
(fromIndex:toIndex: xv09 0 2) => << 1 4 9 >>
(fromIndex:toIndex: xv09 0 4) => << 1 4 9 16 25 >>
(fromIndex:toIndex: xv09 1 1) => << 4 >>
(fromIndex:toIndex: xv09 1 3) => << 4 9 16 >>
(fromIndex:toIndex: xv09 -1 -1) => << 8 >>
(fromIndex:toIndex: xv09 -2 -1) => << 10 8 >>
(fromIndex:toIndex: xv09 -3 -1) => << 14 10 8 >>
(fromIndex:toIndex: xv09 -5 -1) => << 28 20 14 10 8 >>
(fromIndex:toIndex: xv09 -2 -2) => << 10 >>
(fromIndex:toIndex: xv09 -4 -2) => << 20 14 10 >>
(fromIndex:toIndex: xv09 -1 0) => << 8 1 >>
(fromIndex:toIndex: xv09 -2 1) => << 10 8 1 4 >>
(fromIndex:toIndex: xv09 -3 2) => << 14 10 8 1 4 9 >>
(fromIndex:toIndex: xv09 -4 3) => << 20 14 10 8 1 4 9 16 >>
(fromIndex:toIndex: xv09 -5 4) => << 28 20 14 10 8 1 4 9 16 25 >>
Testing xv10
Testing xv11
(fromIndex:toIndex: xv11 0 0) => << 1/2 >>
(fromIndex:toIndex: xv11 0 1) => << 1/2 4/1 >>
(fromIndex:toIndex: xv11 0 2) => << 1/2 4/1 1/6 >>
(fromIndex:toIndex: xv11 0 4) => << 1/2 4/1 1/6 8/1 1/10 >>
(fromIndex:toIndex: xv11 1 1) => << 4/1 >>
(fromIndex:toIndex: xv11 1 3) => << 4/1 1/6 8/1 >>
(fromIndex:toIndex: xv11 -1 -1) => << 20/1 >>
(fromIndex:toIndex: xv11 -2 -1) => << 1/18 20/1 >>
(fromIndex:toIndex: xv11 -3 -1) => << 16/1 1/18 20/1 >>
(fromIndex:toIndex: xv11 -5 -1) => << 12/1 1/14 16/1 1/18 20/1 >>
(fromIndex:toIndex: xv11 -2 -2) => << 1/18 >>
(fromIndex:toIndex: xv11 -4 -2) => << 1/14 16/1 1/18 >>
(fromIndex:toIndex: xv11 -1 0) => << 20/1 1/2 >>
(fromIndex:toIndex: xv11 -2 1) => << 1/18 20/1 1/2 4/1 >>
(fromIndex:toIndex: xv11 -3 2) => << 16/1 1/18 20/1 1/2 4/1 1/6 >>
(fromIndex:toIndex: xv11 -4 3) => << 1/14 16/1 1/18 20/1 1/2 4/1 1/6 8/1 >>
(fromIndex:toIndex: xv11 -5 4) => << 12/1 1/14 16/1 1/18 20/1 1/2 4/1 1/6 8/1 1/10 >>
Testing xv12
Testing xv13
<class Array>
Testing cxv01
(debug cxv01) => ConcatXVector(ArrayXVector(( )),ArrayXVector(( )))
Testing cxv02
(debug cxv02) => ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -4 -3 -2 -1 )))
Testing cxv03
(debug cxv03) => ConcatXVector(ArrayXVector(( -6 -5 -4 )),ArrayXVector(( 1 2 3 )))
Testing mxv01
(debug mxv01) => RepeatXVector(ArrayXVector(( )),10)
Testing mxv02
(debug mxv02) => RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),0)
Testing mxv03
(debug mxv03) => RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),10)
Testing mxv04
(debug mxv04) => RepeatXVector(ArrayXVector(( -6 -5 -4 -3 -2 -1 )),100)
Testing rxv01
(debug rxv01) => ReverseXVector(ArrayXVector(( )))
Testing rxv02
(debug rxv02) => ReverseXVector(ArrayXVector(( 1 )))
Testing rxv03
(debug rxv03) => ReverseXVector(ArrayXVector(( 1 2 3 )))
Testing rxv04
(debug rxv04) => ReverseXVector(ArrayXVector(( 1 2 3 4 5 6 )))
Testing rxv05
(debug rxv05) => ReverseXVector(ArrayXVector(( -6 -5 -4 -3 -2 -1 )))
Testing sxv01
(debug sxv01) => SwizzleXVector(ArrayXVector(( )),ArrayXVector(( )))
Testing sxv02
(debug sxv02) => SwizzleXVector(ArrayXVector(( )),ArrayXVector(( 1 2 3 4 5 6 )))
Testing sxv03
(debug sxv03) => SwizzleXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( )))
Testing sxv04
(debug sxv04) => SwizzleXVector(ArrayXVector(( 1 2 3 )),ArrayXVector(( 1 2 3 )))
Testing sxv05
(debug sxv05) => SwizzleXVector(ArrayXVector(( 1 2 3 )),ArrayXVector(( -6 -5 -4 -3 -2 -1 )))
Testing sxv06
(debug sxv06) => SwizzleXVector(ArrayXVector(( -6 -5 -4 -3 -2 -1 )),ArrayXVector(( 1 2 3 )))
Testing sxv07
(debug sxv07) => SwizzleXVector(ArrayXVector(( -6 -5 -4 -3 -2 -1 )),ArrayXVector(( -6 -5 -4 -3 -2 -1 )))
Testing bxv01
(debug bxv01) => BlockXVector(100,<BlockFn1>)
Testing bxv02
(debug bxv02) => BlockXVector(100,<BlockFn2>)
Testing cxv01
(size cxv01) => 0
Testing cxv02
(size cxv02) => 12
Testing cxv03
(size cxv03) => 6
Testing mxv01
(size mxv01) => 0
Testing mxv02
(size mxv02) => 0
Testing mxv03
(size mxv03) => 60
Testing mxv04
(size mxv04) => 600
Testing rxv01
(size rxv01) => 0
Testing rxv02
(size rxv02) => 1
Testing rxv03
(size rxv03) => 3
Testing rxv04
(size rxv04) => 6
Testing rxv05
(size rxv05) => 6
Testing sxv01
(size sxv01) => 0
Testing sxv02
(size sxv02) => 6
Testing sxv03
(size sxv03) => 6
Testing sxv04
(size sxv04) => 6
Testing sxv05
(size sxv05) => 9
Testing sxv06
(size sxv06) => 9
Testing sxv07
(size sxv07) => 12
Testing bxv01
(size bxv01) => 100
Testing bxv02
(size bxv02) => 100
Testing cxv01
Testing cxv02
(elem cxv02 0) => 1
(elem cxv02 1) => 2
(elem cxv02 2) => 3
(elem cxv02 3) => 4
(elem cxv02 4) => 5
(elem cxv02 5) => 6
(elem cxv02 6) => -6
(elem cxv02 7) => -5
(elem cxv02 8) => -4
(elem cxv02 9) => -3
(elem cxv02 10) => -2
Testing cxv03
(elem cxv03 0) => -6
(elem cxv03 1) => -5
(elem cxv03 2) => -4
(elem cxv03 3) => 1
(elem cxv03 4) => 2
(elem cxv03 5) => 3
Testing mxv01
Testing mxv02
Testing mxv03
(elem mxv03 0) => 1
(elem mxv03 1) => 2
(elem mxv03 2) => 3
(elem mxv03 3) => 4
(elem mxv03 4) => 5
(elem mxv03 5) => 6
(elem mxv03 6) => 1
(elem mxv03 7) => 2
(elem mxv03 8) => 3
(elem mxv03 9) => 4
(elem mxv03 10) => 5
(elem mxv03 15) => 4
(elem mxv03 16) => 5
(elem mxv03 17) => 6
(elem mxv03 18) => 1
(elem mxv03 19) => 2
(elem mxv03 20) => 3
(elem mxv03 51) => 4
(elem mxv03 52) => 5
(elem mxv03 53) => 6
(elem mxv03 54) => 1
(elem mxv03 55) => 2
Testing mxv04
(elem mxv04 0) => -6
(elem mxv04 1) => -5
(elem mxv04 2) => -4
(elem mxv04 3) => -3
(elem mxv04 4) => -2
(elem mxv04 5) => -1
(elem mxv04 6) => -6
(elem mxv04 7) => -5
(elem mxv04 8) => -4
(elem mxv04 9) => -3
(elem mxv04 10) => -2
(elem mxv04 15) => -3
(elem mxv04 16) => -2
(elem mxv04 17) => -1
(elem mxv04 18) => -6
(elem mxv04 19) => -5
(elem mxv04 20) => -4
(elem mxv04 51) => -3
(elem mxv04 52) => -2
(elem mxv04 53) => -1
(elem mxv04 54) => -6
(elem mxv04 55) => -5
(elem mxv04 101) => -1
(elem mxv04 102) => -6
(elem mxv04 103) => -5
(elem mxv04 104) => -4
(elem mxv04 105) => -3
(elem mxv04 501) => -3
(elem mxv04 502) => -2
(elem mxv04 503) => -1
(elem mxv04 504) => -6
(elem mxv04 505) => -5
Testing rxv01
Testing rxv02
(elem rxv02 0) => 1
Testing rxv03
(elem rxv03 0) => 3
(elem rxv03 1) => 2
(elem rxv03 2) => 1
Testing rxv04
(elem rxv04 0) => 6
(elem rxv04 1) => 5
(elem rxv04 2) => 4
(elem rxv04 3) => 3
(elem rxv04 4) => 2
(elem rxv04 5) => 1
Testing rxv05
(elem rxv05 0) => -1
(elem rxv05 1) => -2
(elem rxv05 2) => -3
(elem rxv05 3) => -4
(elem rxv05 4) => -5
(elem rxv05 5) => -6
Testing sxv01
Testing sxv02
(elem sxv02 0) => 1
(elem sxv02 1) => 2
(elem sxv02 2) => 3
(elem sxv02 3) => 4
(elem sxv02 4) => 5
(elem sxv02 5) => 6
Testing sxv03
(elem sxv03 0) => 1
(elem sxv03 1) => 2
(elem sxv03 2) => 3
(elem sxv03 3) => 4
(elem sxv03 4) => 5
(elem sxv03 5) => 6
Testing sxv04
(elem sxv04 0) => 1
(elem sxv04 1) => 1
(elem sxv04 2) => 2
(elem sxv04 3) => 2
(elem sxv04 4) => 3
(elem sxv04 5) => 3
Testing sxv05
(elem sxv05 0) => 1
(elem sxv05 1) => -6
(elem sxv05 2) => 2
(elem sxv05 3) => -5
(elem sxv05 4) => 3
(elem sxv05 5) => -4
(elem sxv05 6) => -3
(elem sxv05 7) => -2
(elem sxv05 8) => -1
Testing sxv06
(elem sxv06 0) => -6
(elem sxv06 1) => 1
(elem sxv06 2) => -5
(elem sxv06 3) => 2
(elem sxv06 4) => -4
(elem sxv06 5) => 3
(elem sxv06 6) => -3
(elem sxv06 7) => -2
(elem sxv06 8) => -1
Testing sxv07
(elem sxv07 0) => -6
(elem sxv07 1) => -6
(elem sxv07 2) => -5
(elem sxv07 3) => -5
(elem sxv07 4) => -4
(elem sxv07 5) => -4
(elem sxv07 6) => -3
(elem sxv07 7) => -3
(elem sxv07 8) => -2
(elem sxv07 9) => -2
(elem sxv07 10) => -1
Testing bxv01
(elem bxv01 0) => 0
(elem bxv01 1) => 1
(elem bxv01 2) => 2
(elem bxv01 3) => 3
(elem bxv01 4) => 4
(elem bxv01 5) => 5
(elem bxv01 6) => 6
(elem bxv01 7) => 7
(elem bxv01 8) => 8
(elem bxv01 9) => 9
(elem bxv01 10) => 10
(elem bxv01 15) => 15
(elem bxv01 16) => 16
(elem bxv01 17) => 17
(elem bxv01 18) => 18
(elem bxv01 19) => 19
(elem bxv01 20) => 20
(elem bxv01 51) => 20
(elem bxv01 52) => 21
(elem bxv01 53) => 22
(elem bxv01 54) => 23
(elem bxv01 55) => 24
Testing bxv02
(elem bxv02 0) => 0
(elem bxv02 1) => 1
(elem bxv02 2) => 4
(elem bxv02 3) => 9
(elem bxv02 4) => 16
(elem bxv02 5) => 25
(elem bxv02 6) => 5
(elem bxv02 7) => 18
(elem bxv02 8) => 2
(elem bxv02 9) => 19
(elem bxv02 10) => 7
(elem bxv02 15) => 8
(elem bxv02 16) => 8
(elem bxv02 17) => 10
(elem bxv02 18) => 14
(elem bxv02 19) => 20
(elem bxv02 20) => 28
(elem bxv02 51) => 28
(elem bxv02 52) => 7
(elem bxv02 53) => 19
(elem bxv02 54) => 2
(elem bxv02 55) => 18
Testing cxv01
(at:ifAbsent: cxv01 0 {nil}) => nil
(at:ifAbsent: cxv01 1 {nil}) => nil
(at:ifAbsent: cxv01 2 {nil}) => nil
(at:ifAbsent: cxv01 3 {nil}) => nil
(at:ifAbsent: cxv01 4 {nil}) => nil
(at:ifAbsent: cxv01 5 {nil}) => nil
(at:ifAbsent: cxv01 7 {nil}) => nil
(at:ifAbsent: cxv01 8 {nil}) => nil
(at:ifAbsent: cxv01 9 {nil}) => nil
(at:ifAbsent: cxv01 1073741823 {nil}) => nil
(at:ifAbsent: cxv01 1073741824 {nil}) => nil
(at:ifAbsent: cxv01 1073741825 {nil}) => nil
(at:ifAbsent: cxv01 -1073741825 {nil}) => nil
(at:ifAbsent: cxv01 -1073741824 {nil}) => nil
(at:ifAbsent: cxv01 -1073741823 {nil}) => nil
(at:ifAbsent: cxv01 -9 {nil}) => nil
(at:ifAbsent: cxv01 -8 {nil}) => nil
(at:ifAbsent: cxv01 -7 {nil}) => nil
(at:ifAbsent: cxv01 -5 {nil}) => nil
(at:ifAbsent: cxv01 -4 {nil}) => nil
(at:ifAbsent: cxv01 -3 {nil}) => nil
(at:ifAbsent: cxv01 -2 {nil}) => nil
(at:ifAbsent: cxv01 -1 {nil}) => nil
Testing cxv01
(print cxv01) => << >>
(detect:ifNone: cxv01 negative) => nil
(detect:ifNone: cxv01 nonnegative) => nil
(detect:ifNone: cxv01 strictlyPositive) => nil
Testing cxv01
(sum cxv01) => 0
Testing cxv01
(product cxv01) => 1
Testing cxv01
Testing cxv01
Testing cxv01
(similar: cxv01 nil) => <False>
(similar: cxv01 <True>) => <False>
(similar: cxv01 <False>) => <False>
(similar: cxv01 0) => <False>
(similar: cxv01 1) => <False>
(similar: cxv01 2) => <False>
(similar: cxv01 42) => <False>
(similar: cxv01 xv01) => <True>
(similar: cxv01 xv02) => <False>
(similar: cxv01 xv03) => <False>
(similar: cxv01 xv04) => <False>
(similar: cxv01 xv05) => <False>
(similar: cxv01 xv06) => <False>
(similar: cxv01 xv07) => <False>
(similar: cxv01 xv08) => <False>
(similar: cxv01 xv09) => <False>
(similar: cxv01 xv10) => <False>
(similar: cxv01 xv11) => <False>
(similar: cxv01 xv12) => <False>
(similar: cxv01 xv13) => <False>
(similar: cxv01 cxv01) => <True>
(similar: cxv01 cxv02) => <False>
(similar: cxv01 cxv03) => <False>
(similar: cxv01 mxv01) => <True>
(similar: cxv01 mxv02) => <True>
(similar: cxv01 mxv03) => <False>
(similar: cxv01 mxv04) => <False>
(similar: cxv01 rxv01) => <True>
(similar: cxv01 rxv02) => <False>
(similar: cxv01 rxv03) => <False>
(similar: cxv01 rxv04) => <False>
(similar: cxv01 rxv05) => <False>
(similar: cxv01 sxv01) => <True>
(similar: cxv01 sxv02) => <False>
(similar: cxv01 sxv03) => <False>
(similar: cxv01 sxv04) => <False>
(similar: cxv01 sxv05) => <False>
(similar: cxv01 sxv06) => <False>
(similar: cxv01 sxv07) => <False>
(similar: cxv01 bxv01) => <False>
(similar: cxv01 bxv02) => <False>
Testing cxv01
(< cxv01 xv01) => <False>
(< cxv01 xv02) => <True>
(< cxv01 xv03) => <True>
(< cxv01 xv04) => <True>
(< cxv01 xv05) => <True>
(< cxv01 xv06) => <True>
(< cxv01 xv07) => <True>
(< cxv01 xv08) => <True>
(< cxv01 xv09) => <True>
(< cxv01 xv10) => <True>
(< cxv01 xv11) => <True>
(< cxv01 cxv01) => <False>
(< cxv01 cxv02) => <True>
(< cxv01 cxv03) => <True>
(< cxv01 mxv01) => <False>
(< cxv01 mxv02) => <False>
(< cxv01 mxv03) => <True>
(< cxv01 mxv04) => <True>
(< cxv01 rxv01) => <False>
(< cxv01 rxv02) => <True>
(< cxv01 rxv03) => <True>
(< cxv01 rxv04) => <True>
(< cxv01 rxv05) => <True>
(< cxv01 sxv01) => <False>
(< cxv01 sxv02) => <True>
(< cxv01 sxv03) => <True>
(< cxv01 sxv04) => <True>
(< cxv01 sxv05) => <True>
(< cxv01 sxv06) => <True>
(< cxv01 sxv07) => <True>
(< cxv01 bxv01) => <True>
(< cxv01 bxv02) => <True>
Testing cxv01
Testing cxv02
(at:ifAbsent: cxv02 0 {nil}) => 1
(at:ifAbsent: cxv02 1 {nil}) => 2
(at:ifAbsent: cxv02 2 {nil}) => 3
(at:ifAbsent: cxv02 3 {nil}) => 4
(at:ifAbsent: cxv02 4 {nil}) => 5
(at:ifAbsent: cxv02 5 {nil}) => 6
(at:ifAbsent: cxv02 7 {nil}) => -5
(at:ifAbsent: cxv02 8 {nil}) => -4
(at:ifAbsent: cxv02 9 {nil}) => -3
(at:ifAbsent: cxv02 1073741823 {nil}) => nil
(at:ifAbsent: cxv02 1073741824 {nil}) => nil
(at:ifAbsent: cxv02 1073741825 {nil}) => nil
(at:ifAbsent: cxv02 -1073741825 {nil}) => nil
(at:ifAbsent: cxv02 -1073741824 {nil}) => nil
(at:ifAbsent: cxv02 -1073741823 {nil}) => nil
(at:ifAbsent: cxv02 -9 {nil}) => 4
(at:ifAbsent: cxv02 -8 {nil}) => 5
(at:ifAbsent: cxv02 -7 {nil}) => 6
(at:ifAbsent: cxv02 -5 {nil}) => -5
(at:ifAbsent: cxv02 -4 {nil}) => -4
(at:ifAbsent: cxv02 -3 {nil}) => -3
(at:ifAbsent: cxv02 -2 {nil}) => -2
(at:ifAbsent: cxv02 -1 {nil}) => -1
Testing cxv02
(print cxv02) => << 1 2 3 4 5 6 -6 -5 -4 -3 -2 -1 >>
(includes: cxv02 nil) => <False>
(occurrencesOf: cxv02 nil) => 0
(includes: cxv02 <True>) => <False>
(occurrencesOf: cxv02 <True>) => 0
(includes: cxv02 <False>) => <False>
(occurrencesOf: cxv02 <False>) => 0
(includes: cxv02 0) => <False>
(occurrencesOf: cxv02 0) => 0
(includes: cxv02 1) => <True>
(occurrencesOf: cxv02 1) => 1
(includes: cxv02 2) => <True>
(occurrencesOf: cxv02 2) => 1
(includes: cxv02 42) => <False>
(occurrencesOf: cxv02 42) => 0
(detect:ifNone: cxv02 negative) => -6
(detect:ifNone: cxv02 nonnegative) => 1
(detect:ifNone: cxv02 strictlyPositive) => 1
Testing cxv02
(sum cxv02) => 0
Testing cxv02
(product cxv02) => 518400
Testing cxv02
(min cxv02) => -6
Testing cxv02
(max cxv02) => 6
Testing cxv02
(similar: cxv02 nil) => <False>
(similar: cxv02 <True>) => <False>
(similar: cxv02 <False>) => <False>
(similar: cxv02 0) => <False>
(similar: cxv02 1) => <False>
(similar: cxv02 2) => <False>
(similar: cxv02 42) => <False>
(similar: cxv02 xv01) => <False>
(similar: cxv02 xv02) => <False>
(similar: cxv02 xv03) => <False>
(similar: cxv02 xv04) => <False>
(similar: cxv02 xv05) => <False>
(similar: cxv02 xv06) => <False>
(similar: cxv02 xv07) => <False>
(similar: cxv02 xv08) => <False>
(similar: cxv02 xv09) => <False>
(similar: cxv02 xv12) => <False>
(similar: cxv02 xv13) => <False>
(similar: cxv02 cxv01) => <False>
(similar: cxv02 cxv02) => <True>
(similar: cxv02 cxv03) => <False>
(similar: cxv02 mxv01) => <False>
(similar: cxv02 mxv02) => <False>
(similar: cxv02 mxv03) => <False>
(similar: cxv02 mxv04) => <False>
(similar: cxv02 rxv01) => <False>
(similar: cxv02 rxv02) => <False>
(similar: cxv02 rxv03) => <False>
(similar: cxv02 rxv04) => <False>
(similar: cxv02 rxv05) => <False>
(similar: cxv02 sxv01) => <False>
(similar: cxv02 sxv02) => <False>
(similar: cxv02 sxv03) => <False>
(similar: cxv02 sxv04) => <False>
(similar: cxv02 sxv05) => <False>
(similar: cxv02 sxv06) => <False>
(similar: cxv02 sxv07) => <False>
(similar: cxv02 bxv01) => <False>
(similar: cxv02 bxv02) => <False>
Testing cxv02
(< cxv02 xv01) => <False>
(< cxv02 xv02) => <False>
(< cxv02 xv03) => <False>
(< cxv02 xv04) => <False>
(< cxv02 xv05) => <False>
(< cxv02 xv06) => <False>
(< cxv02 xv07) => <False>
(< cxv02 xv08) => <True>
(< cxv02 xv09) => <True>
(< cxv02 cxv01) => <False>
(< cxv02 cxv02) => <False>
(< cxv02 cxv03) => <False>
(< cxv02 mxv01) => <False>
(< cxv02 mxv02) => <False>
(< cxv02 mxv03) => <True>
(< cxv02 mxv04) => <False>
(< cxv02 rxv01) => <False>
(< cxv02 rxv02) => <False>
(< cxv02 rxv03) => <True>
(< cxv02 rxv04) => <True>
(< cxv02 rxv05) => <False>
(< cxv02 sxv01) => <False>
(< cxv02 sxv02) => <False>
(< cxv02 sxv03) => <False>
(< cxv02 sxv04) => <False>
(< cxv02 sxv05) => <False>
(< cxv02 sxv06) => <False>
(< cxv02 sxv07) => <False>
(< cxv02 bxv01) => <False>
(< cxv02 bxv02) => <False>
Testing cxv02
(fromIndex:toIndex: cxv02 0 0) => << 1 >>
(fromIndex:toIndex: cxv02 0 1) => << 1 2 >>
(fromIndex:toIndex: cxv02 0 2) => << 1 2 3 >>
(fromIndex:toIndex: cxv02 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: cxv02 1 1) => << 2 >>
(fromIndex:toIndex: cxv02 1 3) => << 2 3 4 >>
(fromIndex:toIndex: cxv02 -1 -1) => << -1 >>
(fromIndex:toIndex: cxv02 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: cxv02 -3 -1) => << -3 -2 -1 >>
(fromIndex:toIndex: cxv02 -5 -1) => << -5 -4 -3 -2 -1 >>
(fromIndex:toIndex: cxv02 -2 -2) => << -2 >>
(fromIndex:toIndex: cxv02 -4 -2) => << -4 -3 -2 >>
(fromIndex:toIndex: cxv02 -1 0) => << -1 1 >>
(fromIndex:toIndex: cxv02 -2 1) => << -2 -1 1 2 >>
(fromIndex:toIndex: cxv02 -3 2) => << -3 -2 -1 1 2 3 >>
(fromIndex:toIndex: cxv02 -4 3) => << -4 -3 -2 -1 1 2 3 4 >>
(fromIndex:toIndex: cxv02 -5 4) => << -5 -4 -3 -2 -1 1 2 3 4 5 >>
Testing cxv03
(at:ifAbsent: cxv03 0 {nil}) => -6
(at:ifAbsent: cxv03 1 {nil}) => -5
(at:ifAbsent: cxv03 2 {nil}) => -4
(at:ifAbsent: cxv03 3 {nil}) => 1
(at:ifAbsent: cxv03 4 {nil}) => 2
(at:ifAbsent: cxv03 5 {nil}) => 3
(at:ifAbsent: cxv03 7 {nil}) => nil
(at:ifAbsent: cxv03 8 {nil}) => nil
(at:ifAbsent: cxv03 9 {nil}) => nil
(at:ifAbsent: cxv03 1073741823 {nil}) => nil
(at:ifAbsent: cxv03 1073741824 {nil}) => nil
(at:ifAbsent: cxv03 1073741825 {nil}) => nil
(at:ifAbsent: cxv03 -1073741825 {nil}) => nil
(at:ifAbsent: cxv03 -1073741824 {nil}) => nil
(at:ifAbsent: cxv03 -1073741823 {nil}) => nil
(at:ifAbsent: cxv03 -9 {nil}) => nil
(at:ifAbsent: cxv03 -8 {nil}) => nil
(at:ifAbsent: cxv03 -7 {nil}) => nil
(at:ifAbsent: cxv03 -5 {nil}) => -5
(at:ifAbsent: cxv03 -4 {nil}) => -4
(at:ifAbsent: cxv03 -3 {nil}) => 1
(at:ifAbsent: cxv03 -2 {nil}) => 2
(at:ifAbsent: cxv03 -1 {nil}) => 3
Testing cxv03
(print cxv03) => << -6 -5 -4 1 2 3 >>
(includes: cxv03 nil) => <False>
(occurrencesOf: cxv03 nil) => 0
(includes: cxv03 <True>) => <False>
(occurrencesOf: cxv03 <True>) => 0
(includes: cxv03 <False>) => <False>
(occurrencesOf: cxv03 <False>) => 0
(includes: cxv03 0) => <False>
(occurrencesOf: cxv03 0) => 0
(includes: cxv03 1) => <True>
(occurrencesOf: cxv03 1) => 1
(includes: cxv03 2) => <True>
(occurrencesOf: cxv03 2) => 1
(includes: cxv03 42) => <False>
(occurrencesOf: cxv03 42) => 0
(detect:ifNone: cxv03 negative) => -6
(detect:ifNone: cxv03 nonnegative) => 1
(detect:ifNone: cxv03 strictlyPositive) => 1
Testing cxv03
(sum cxv03) => -9
Testing cxv03
(product cxv03) => -720
Testing cxv03
(min cxv03) => -6
Testing cxv03
(max cxv03) => 3
Testing cxv03
(similar: cxv03 nil) => <False>
(similar: cxv03 <True>) => <False>
(similar: cxv03 <False>) => <False>
(similar: cxv03 0) => <False>
(similar: cxv03 1) => <False>
(similar: cxv03 2) => <False>
(similar: cxv03 42) => <False>
(similar: cxv03 xv01) => <False>
(similar: cxv03 xv02) => <False>
(similar: cxv03 xv03) => <False>
(similar: cxv03 xv04) => <False>
(similar: cxv03 xv05) => <False>
(similar: cxv03 xv06) => <False>
(similar: cxv03 xv07) => <False>
(similar: cxv03 xv08) => <False>
(similar: cxv03 xv09) => <False>
(similar: cxv03 xv12) => <False>
(similar: cxv03 xv13) => <False>
(similar: cxv03 cxv01) => <False>
(similar: cxv03 cxv02) => <False>
(similar: cxv03 cxv03) => <True>
(similar: cxv03 mxv01) => <False>
(similar: cxv03 mxv02) => <False>
(similar: cxv03 mxv03) => <False>
(similar: cxv03 mxv04) => <False>
(similar: cxv03 rxv01) => <False>
(similar: cxv03 rxv02) => <False>
(similar: cxv03 rxv03) => <False>
(similar: cxv03 rxv04) => <False>
(similar: cxv03 rxv05) => <False>
(similar: cxv03 sxv01) => <False>
(similar: cxv03 sxv02) => <False>
(similar: cxv03 sxv03) => <False>
(similar: cxv03 sxv04) => <False>
(similar: cxv03 sxv05) => <False>
(similar: cxv03 sxv06) => <False>
(similar: cxv03 sxv07) => <False>
(similar: cxv03 bxv01) => <False>
(similar: cxv03 bxv02) => <False>
Testing cxv03
(< cxv03 xv01) => <False>
(< cxv03 xv02) => <True>
(< cxv03 xv03) => <True>
(< cxv03 xv04) => <True>
(< cxv03 xv05) => <False>
(< cxv03 xv06) => <False>
(< cxv03 xv07) => <False>
(< cxv03 xv08) => <True>
(< cxv03 xv09) => <True>
(< cxv03 cxv01) => <False>
(< cxv03 cxv02) => <True>
(< cxv03 cxv03) => <False>
(< cxv03 mxv01) => <False>
(< cxv03 mxv02) => <False>
(< cxv03 mxv03) => <True>
(< cxv03 mxv04) => <False>
(< cxv03 rxv01) => <False>
(< cxv03 rxv02) => <True>
(< cxv03 rxv03) => <True>
(< cxv03 rxv04) => <True>
(< cxv03 rxv05) => <True>
(< cxv03 sxv01) => <False>
(< cxv03 sxv02) => <True>
(< cxv03 sxv03) => <True>
(< cxv03 sxv04) => <True>
(< cxv03 sxv05) => <True>
(< cxv03 sxv06) => <True>
(< cxv03 sxv07) => <False>
(< cxv03 bxv01) => <True>
(< cxv03 bxv02) => <True>
Testing cxv03
(fromIndex:toIndex: cxv03 0 0) => << -6 >>
(fromIndex:toIndex: cxv03 0 1) => << -6 -5 >>
(fromIndex:toIndex: cxv03 0 2) => << -6 -5 -4 >>
(fromIndex:toIndex: cxv03 0 4) => << -6 -5 -4 1 2 >>
(fromIndex:toIndex: cxv03 1 1) => << -5 >>
(fromIndex:toIndex: cxv03 1 3) => << -5 -4 1 >>
(fromIndex:toIndex: cxv03 -1 -1) => << 3 >>
(fromIndex:toIndex: cxv03 -2 -1) => << 2 3 >>
(fromIndex:toIndex: cxv03 -3 -1) => << 1 2 3 >>
(fromIndex:toIndex: cxv03 -5 -1) => << -5 -4 1 2 3 >>
(fromIndex:toIndex: cxv03 -2 -2) => << 2 >>
(fromIndex:toIndex: cxv03 -4 -2) => << -4 1 2 >>
(fromIndex:toIndex: cxv03 -1 0) => << 3 -6 >>
(fromIndex:toIndex: cxv03 -2 1) => << 2 3 -6 -5 >>
(fromIndex:toIndex: cxv03 -3 2) => << 1 2 3 -6 -5 -4 >>
(fromIndex:toIndex: cxv03 -4 3) => << -4 1 >>
(fromIndex:toIndex: cxv03 -5 4) => << -5 -4 1 2 >>
Testing mxv01
(at:ifAbsent: mxv01 0 {nil}) => nil
(at:ifAbsent: mxv01 1 {nil}) => nil
(at:ifAbsent: mxv01 2 {nil}) => nil
(at:ifAbsent: mxv01 3 {nil}) => nil
(at:ifAbsent: mxv01 4 {nil}) => nil
(at:ifAbsent: mxv01 5 {nil}) => nil
(at:ifAbsent: mxv01 7 {nil}) => nil
(at:ifAbsent: mxv01 8 {nil}) => nil
(at:ifAbsent: mxv01 9 {nil}) => nil
(at:ifAbsent: mxv01 1073741823 {nil}) => nil
(at:ifAbsent: mxv01 1073741824 {nil}) => nil
(at:ifAbsent: mxv01 1073741825 {nil}) => nil
(at:ifAbsent: mxv01 -1073741825 {nil}) => nil
(at:ifAbsent: mxv01 -1073741824 {nil}) => nil
(at:ifAbsent: mxv01 -1073741823 {nil}) => nil
(at:ifAbsent: mxv01 -9 {nil}) => nil
(at:ifAbsent: mxv01 -8 {nil}) => nil
(at:ifAbsent: mxv01 -7 {nil}) => nil
(at:ifAbsent: mxv01 -5 {nil}) => nil
(at:ifAbsent: mxv01 -4 {nil}) => nil
(at:ifAbsent: mxv01 -3 {nil}) => nil
(at:ifAbsent: mxv01 -2 {nil}) => nil
(at:ifAbsent: mxv01 -1 {nil}) => nil
Testing mxv01
(print mxv01) => << >>
(detect:ifNone: mxv01 negative) => nil
(detect:ifNone: mxv01 nonnegative) => nil
(detect:ifNone: mxv01 strictlyPositive) => nil
Testing mxv01
(sum mxv01) => 0
Testing mxv01
(product mxv01) => 1
Testing mxv01
Testing mxv01
Testing mxv01
(similar: mxv01 nil) => <False>
(similar: mxv01 <True>) => <False>
(similar: mxv01 <False>) => <False>
(similar: mxv01 0) => <False>
(similar: mxv01 1) => <False>
(similar: mxv01 2) => <False>
(similar: mxv01 42) => <False>
(similar: mxv01 xv01) => <True>
(similar: mxv01 xv02) => <False>
(similar: mxv01 xv03) => <False>
(similar: mxv01 xv04) => <False>
(similar: mxv01 xv05) => <False>
(similar: mxv01 xv06) => <False>
(similar: mxv01 xv07) => <False>
(similar: mxv01 xv08) => <False>
(similar: mxv01 xv09) => <False>
(similar: mxv01 xv10) => <False>
(similar: mxv01 xv11) => <False>
(similar: mxv01 xv12) => <False>
(similar: mxv01 xv13) => <False>
(similar: mxv01 cxv01) => <True>
(similar: mxv01 cxv02) => <False>
(similar: mxv01 cxv03) => <False>
(similar: mxv01 mxv01) => <True>
(similar: mxv01 mxv02) => <True>
(similar: mxv01 mxv03) => <False>
(similar: mxv01 mxv04) => <False>
(similar: mxv01 rxv01) => <True>
(similar: mxv01 rxv02) => <False>
(similar: mxv01 rxv03) => <False>
(similar: mxv01 rxv04) => <False>
(similar: mxv01 rxv05) => <False>
(similar: mxv01 sxv01) => <True>
(similar: mxv01 sxv02) => <False>
(similar: mxv01 sxv03) => <False>
(similar: mxv01 sxv04) => <False>
(similar: mxv01 sxv05) => <False>
(similar: mxv01 sxv06) => <False>
(similar: mxv01 sxv07) => <False>
(similar: mxv01 bxv01) => <False>
(similar: mxv01 bxv02) => <False>
Testing mxv01
(< mxv01 xv01) => <False>
(< mxv01 xv02) => <True>
(< mxv01 xv03) => <True>
(< mxv01 xv04) => <True>
(< mxv01 xv05) => <True>
(< mxv01 xv06) => <True>
(< mxv01 xv07) => <True>
(< mxv01 xv08) => <True>
(< mxv01 xv09) => <True>
(< mxv01 xv10) => <True>
(< mxv01 xv11) => <True>
(< mxv01 cxv01) => <False>
(< mxv01 cxv02) => <True>
(< mxv01 cxv03) => <True>
(< mxv01 mxv01) => <False>
(< mxv01 mxv02) => <False>
(< mxv01 mxv03) => <True>
(< mxv01 mxv04) => <True>
(< mxv01 rxv01) => <False>
(< mxv01 rxv02) => <True>
(< mxv01 rxv03) => <True>
(< mxv01 rxv04) => <True>
(< mxv01 rxv05) => <True>
(< mxv01 sxv01) => <False>
(< mxv01 sxv02) => <True>
(< mxv01 sxv03) => <True>
(< mxv01 sxv04) => <True>
(< mxv01 sxv05) => <True>
(< mxv01 sxv06) => <True>
(< mxv01 sxv07) => <True>
(< mxv01 bxv01) => <True>
(< mxv01 bxv02) => <True>
Testing mxv01
Testing mxv02
(at:ifAbsent: mxv02 0 {nil}) => nil
(at:ifAbsent: mxv02 1 {nil}) => nil
(at:ifAbsent: mxv02 2 {nil}) => nil
(at:ifAbsent: mxv02 3 {nil}) => nil
(at:ifAbsent: mxv02 4 {nil}) => nil
(at:ifAbsent: mxv02 5 {nil}) => nil
(at:ifAbsent: mxv02 7 {nil}) => nil
(at:ifAbsent: mxv02 8 {nil}) => nil
(at:ifAbsent: mxv02 9 {nil}) => nil
(at:ifAbsent: mxv02 1073741823 {nil}) => nil
(at:ifAbsent: mxv02 1073741824 {nil}) => nil
(at:ifAbsent: mxv02 1073741825 {nil}) => nil
(at:ifAbsent: mxv02 -1073741825 {nil}) => nil
(at:ifAbsent: mxv02 -1073741824 {nil}) => nil
(at:ifAbsent: mxv02 -1073741823 {nil}) => nil
(at:ifAbsent: mxv02 -9 {nil}) => nil
(at:ifAbsent: mxv02 -8 {nil}) => nil
(at:ifAbsent: mxv02 -7 {nil}) => nil
(at:ifAbsent: mxv02 -5 {nil}) => nil
(at:ifAbsent: mxv02 -4 {nil}) => nil
(at:ifAbsent: mxv02 -3 {nil}) => nil
(at:ifAbsent: mxv02 -2 {nil}) => nil
(at:ifAbsent: mxv02 -1 {nil}) => nil
Testing mxv02
(print mxv02) => << >>
(detect:ifNone: mxv02 negative) => nil
(detect:ifNone: mxv02 nonnegative) => nil
(detect:ifNone: mxv02 strictlyPositive) => nil
Testing mxv02
(sum mxv02) => 0
Testing mxv02
(product mxv02) => 1
Testing mxv02
Testing mxv02
Testing mxv02
(similar: mxv02 nil) => <False>
(similar: mxv02 <True>) => <False>
(similar: mxv02 <False>) => <False>
(similar: mxv02 0) => <False>
(similar: mxv02 1) => <False>
(similar: mxv02 2) => <False>
(similar: mxv02 42) => <False>
(similar: mxv02 xv01) => <True>
(similar: mxv02 xv02) => <False>
(similar: mxv02 xv03) => <False>
(similar: mxv02 xv04) => <False>
(similar: mxv02 xv05) => <False>
(similar: mxv02 xv06) => <False>
(similar: mxv02 xv07) => <False>
(similar: mxv02 xv08) => <False>
(similar: mxv02 xv09) => <False>
(similar: mxv02 xv10) => <False>
(similar: mxv02 xv11) => <False>
(similar: mxv02 xv12) => <False>
(similar: mxv02 xv13) => <False>
(similar: mxv02 cxv01) => <True>
(similar: mxv02 cxv02) => <False>
(similar: mxv02 cxv03) => <False>
(similar: mxv02 mxv01) => <True>
(similar: mxv02 mxv02) => <True>
(similar: mxv02 mxv03) => <False>
(similar: mxv02 mxv04) => <False>
(similar: mxv02 rxv01) => <True>
(similar: mxv02 rxv02) => <False>
(similar: mxv02 rxv03) => <False>
(similar: mxv02 rxv04) => <False>
(similar: mxv02 rxv05) => <False>
(similar: mxv02 sxv01) => <True>
(similar: mxv02 sxv02) => <False>
(similar: mxv02 sxv03) => <False>
(similar: mxv02 sxv04) => <False>
(similar: mxv02 sxv05) => <False>
(similar: mxv02 sxv06) => <False>
(similar: mxv02 sxv07) => <False>
(similar: mxv02 bxv01) => <False>
(similar: mxv02 bxv02) => <False>
Testing mxv02
(< mxv02 xv01) => <False>
(< mxv02 xv02) => <True>
(< mxv02 xv03) => <True>
(< mxv02 xv04) => <True>
(< mxv02 xv05) => <True>
(< mxv02 xv06) => <True>
(< mxv02 xv07) => <True>
(< mxv02 xv08) => <True>
(< mxv02 xv09) => <True>
(< mxv02 xv10) => <True>
(< mxv02 xv11) => <True>
(< mxv02 cxv01) => <False>
(< mxv02 cxv02) => <True>
(< mxv02 cxv03) => <True>
(< mxv02 mxv01) => <False>
(< mxv02 mxv02) => <False>
(< mxv02 mxv03) => <True>
(< mxv02 mxv04) => <True>
(< mxv02 rxv01) => <False>
(< mxv02 rxv02) => <True>
(< mxv02 rxv03) => <True>
(< mxv02 rxv04) => <True>
(< mxv02 rxv05) => <True>
(< mxv02 sxv01) => <False>
(< mxv02 sxv02) => <True>
(< mxv02 sxv03) => <True>
(< mxv02 sxv04) => <True>
(< mxv02 sxv05) => <True>
(< mxv02 sxv06) => <True>
(< mxv02 sxv07) => <True>
(< mxv02 bxv01) => <True>
(< mxv02 bxv02) => <True>
Testing mxv02
Testing mxv03
(at:ifAbsent: mxv03 0 {nil}) => 1
(at:ifAbsent: mxv03 1 {nil}) => 2
(at:ifAbsent: mxv03 2 {nil}) => 3
(at:ifAbsent: mxv03 3 {nil}) => 4
(at:ifAbsent: mxv03 4 {nil}) => 5
(at:ifAbsent: mxv03 5 {nil}) => 6
(at:ifAbsent: mxv03 7 {nil}) => 2
(at:ifAbsent: mxv03 8 {nil}) => 3
(at:ifAbsent: mxv03 9 {nil}) => 4
(at:ifAbsent: mxv03 1073741823 {nil}) => nil
(at:ifAbsent: mxv03 1073741824 {nil}) => nil
(at:ifAbsent: mxv03 1073741825 {nil}) => nil
(at:ifAbsent: mxv03 -1073741825 {nil}) => nil
(at:ifAbsent: mxv03 -1073741824 {nil}) => nil
(at:ifAbsent: mxv03 -1073741823 {nil}) => nil
(at:ifAbsent: mxv03 -9 {nil}) => 4
(at:ifAbsent: mxv03 -8 {nil}) => 5
(at:ifAbsent: mxv03 -7 {nil}) => 6
(at:ifAbsent: mxv03 -5 {nil}) => 2
(at:ifAbsent: mxv03 -4 {nil}) => 3
(at:ifAbsent: mxv03 -3 {nil}) => 4
(at:ifAbsent: mxv03 -2 {nil}) => 5
(at:ifAbsent: mxv03 -1 {nil}) => 6
Testing mxv03
(includes: mxv03 nil) => <False>
(occurrencesOf: mxv03 nil) => 0
(includes: mxv03 <True>) => <False>
(occurrencesOf: mxv03 <True>) => 0
(includes: mxv03 <False>) => <False>
(occurrencesOf: mxv03 <False>) => 0
(includes: mxv03 0) => <False>
(occurrencesOf: mxv03 0) => 0
(includes: mxv03 1) => <True>
(occurrencesOf: mxv03 1) => 10
(includes: mxv03 2) => <True>
(occurrencesOf: mxv03 2) => 10
(includes: mxv03 42) => <False>
(occurrencesOf: mxv03 42) => 0
(detect:ifNone: mxv03 negative) => nil
(detect:ifNone: mxv03 nonnegative) => 1
(detect:ifNone: mxv03 strictlyPositive) => 1
Testing mxv03
(sum mxv03) => 210
Testing mxv03
Testing mxv03
(min mxv03) => 1
Testing mxv03
(max mxv03) => 6
Testing mxv03
(similar: mxv03 nil) => <False>
(similar: mxv03 <True>) => <False>
(similar: mxv03 <False>) => <False>
(similar: mxv03 0) => <False>
(similar: mxv03 1) => <False>
(similar: mxv03 2) => <False>
(similar: mxv03 42) => <False>
(similar: mxv03 xv01) => <False>
(similar: mxv03 xv02) => <False>
(similar: mxv03 xv03) => <False>
(similar: mxv03 xv04) => <False>
(similar: mxv03 xv05) => <False>
(similar: mxv03 xv06) => <False>
(similar: mxv03 xv07) => <False>
(similar: mxv03 xv08) => <False>
(similar: mxv03 xv09) => <False>
(similar: mxv03 xv12) => <False>
(similar: mxv03 xv13) => <False>
(similar: mxv03 cxv01) => <False>
(similar: mxv03 cxv02) => <False>
(similar: mxv03 cxv03) => <False>
(similar: mxv03 mxv01) => <False>
(similar: mxv03 mxv02) => <False>
(similar: mxv03 mxv03) => <True>
(similar: mxv03 mxv04) => <False>
(similar: mxv03 rxv01) => <False>
(similar: mxv03 rxv02) => <False>
(similar: mxv03 rxv03) => <False>
(similar: mxv03 rxv04) => <False>
(similar: mxv03 rxv05) => <False>
(similar: mxv03 sxv01) => <False>
(similar: mxv03 sxv02) => <False>
(similar: mxv03 sxv03) => <False>
(similar: mxv03 sxv04) => <False>
(similar: mxv03 sxv05) => <False>
(similar: mxv03 sxv06) => <False>
(similar: mxv03 sxv07) => <False>
(similar: mxv03 bxv01) => <False>
(similar: mxv03 bxv02) => <False>
Testing mxv03
(< mxv03 xv01) => <False>
(< mxv03 xv02) => <False>
(< mxv03 xv03) => <False>
(< mxv03 xv04) => <False>
(< mxv03 xv05) => <False>
(< mxv03 xv06) => <False>
(< mxv03 xv07) => <False>
(< mxv03 xv08) => <True>
(< mxv03 xv09) => <True>
(< mxv03 cxv01) => <False>
(< mxv03 cxv02) => <False>
(< mxv03 cxv03) => <False>
(< mxv03 mxv01) => <False>
(< mxv03 mxv02) => <False>
(< mxv03 mxv03) => <False>
(< mxv03 mxv04) => <False>
(< mxv03 rxv01) => <False>
(< mxv03 rxv02) => <False>
(< mxv03 rxv03) => <True>
(< mxv03 rxv04) => <True>
(< mxv03 rxv05) => <False>
(< mxv03 sxv01) => <False>
(< mxv03 sxv02) => <False>
(< mxv03 sxv03) => <False>
(< mxv03 sxv04) => <False>
(< mxv03 sxv05) => <False>
(< mxv03 sxv06) => <False>
(< mxv03 sxv07) => <False>
(< mxv03 bxv01) => <False>
(< mxv03 bxv02) => <False>
Testing mxv03
(fromIndex:toIndex: mxv03 0 0) => << 1 >>
(fromIndex:toIndex: mxv03 0 1) => << 1 2 >>
(fromIndex:toIndex: mxv03 0 2) => << 1 2 3 >>
(fromIndex:toIndex: mxv03 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: mxv03 1 1) => << 2 >>
(fromIndex:toIndex: mxv03 1 3) => << 2 3 4 >>
(fromIndex:toIndex: mxv03 -1 -1) => << 6 >>
(fromIndex:toIndex: mxv03 -2 -1) => << 5 6 >>
(fromIndex:toIndex: mxv03 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: mxv03 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: mxv03 -2 -2) => << 5 >>
(fromIndex:toIndex: mxv03 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: mxv03 -1 0) => << 6 1 >>
(fromIndex:toIndex: mxv03 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: mxv03 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: mxv03 -4 3) => << 3 4 5 6 1 2 3 4 >>
(fromIndex:toIndex: mxv03 -5 4) => << 2 3 4 5 6 1 2 3 4 5 >>
Testing mxv04
(at:ifAbsent: mxv04 0 {nil}) => -6
(at:ifAbsent: mxv04 1 {nil}) => -5
(at:ifAbsent: mxv04 2 {nil}) => -4
(at:ifAbsent: mxv04 3 {nil}) => -3
(at:ifAbsent: mxv04 4 {nil}) => -2
(at:ifAbsent: mxv04 5 {nil}) => -1
(at:ifAbsent: mxv04 7 {nil}) => -5
(at:ifAbsent: mxv04 8 {nil}) => -4
(at:ifAbsent: mxv04 9 {nil}) => -3
(at:ifAbsent: mxv04 1073741823 {nil}) => nil
(at:ifAbsent: mxv04 1073741824 {nil}) => nil
(at:ifAbsent: mxv04 1073741825 {nil}) => nil
(at:ifAbsent: mxv04 -1073741825 {nil}) => nil
(at:ifAbsent: mxv04 -1073741824 {nil}) => nil
(at:ifAbsent: mxv04 -1073741823 {nil}) => nil
(at:ifAbsent: mxv04 -9 {nil}) => -3
(at:ifAbsent: mxv04 -8 {nil}) => -2
(at:ifAbsent: mxv04 -7 {nil}) => -1
(at:ifAbsent: mxv04 -5 {nil}) => -5
(at:ifAbsent: mxv04 -4 {nil}) => -4
(at:ifAbsent: mxv04 -3 {nil}) => -3
(at:ifAbsent: mxv04 -2 {nil}) => -2
(at:ifAbsent: mxv04 -1 {nil}) => -1
Testing mxv04
(includes: mxv04 nil) => <False>
(occurrencesOf: mxv04 nil) => 0
(includes: mxv04 <True>) => <False>
(occurrencesOf: mxv04 <True>) => 0
(includes: mxv04 <False>) => <False>
(occurrencesOf: mxv04 <False>) => 0
(includes: mxv04 0) => <False>
(occurrencesOf: mxv04 0) => 0
(includes: mxv04 1) => <False>
(occurrencesOf: mxv04 1) => 0
(includes: mxv04 2) => <False>
(occurrencesOf: mxv04 2) => 0
(includes: mxv04 42) => <False>
(occurrencesOf: mxv04 42) => 0
(detect:ifNone: mxv04 negative) => -6
(detect:ifNone: mxv04 nonnegative) => nil
(detect:ifNone: mxv04 strictlyPositive) => nil
Testing mxv04
Testing mxv04
Testing mxv04
(min mxv04) => -6
Testing mxv04
(max mxv04) => -1
Testing mxv04
(similar: mxv04 nil) => <False>
(similar: mxv04 <True>) => <False>
(similar: mxv04 <False>) => <False>
(similar: mxv04 0) => <False>
(similar: mxv04 1) => <False>
(similar: mxv04 2) => <False>
(similar: mxv04 42) => <False>
(similar: mxv04 xv01) => <False>
(similar: mxv04 xv02) => <False>
(similar: mxv04 xv03) => <False>
(similar: mxv04 xv04) => <False>
(similar: mxv04 xv05) => <False>
(similar: mxv04 xv06) => <False>
(similar: mxv04 xv07) => <False>
(similar: mxv04 xv08) => <False>
(similar: mxv04 xv09) => <False>
(similar: mxv04 xv12) => <False>
(similar: mxv04 xv13) => <False>
(similar: mxv04 cxv01) => <False>
(similar: mxv04 cxv02) => <False>
(similar: mxv04 cxv03) => <False>
(similar: mxv04 mxv01) => <False>
(similar: mxv04 mxv02) => <False>
(similar: mxv04 mxv03) => <False>
(similar: mxv04 mxv04) => <True>
(similar: mxv04 rxv01) => <False>
(similar: mxv04 rxv02) => <False>
(similar: mxv04 rxv03) => <False>
(similar: mxv04 rxv04) => <False>
(similar: mxv04 rxv05) => <False>
(similar: mxv04 sxv01) => <False>
(similar: mxv04 sxv02) => <False>
(similar: mxv04 sxv03) => <False>
(similar: mxv04 sxv04) => <False>
(similar: mxv04 sxv05) => <False>
(similar: mxv04 sxv06) => <False>
(similar: mxv04 sxv07) => <False>
(similar: mxv04 bxv01) => <False>
(similar: mxv04 bxv02) => <False>
Testing mxv04
(< mxv04 xv01) => <False>
(< mxv04 xv02) => <True>
(< mxv04 xv03) => <True>
(< mxv04 xv04) => <True>
(< mxv04 xv05) => <False>
(< mxv04 xv06) => <False>
(< mxv04 xv07) => <False>
(< mxv04 xv08) => <True>
(< mxv04 xv09) => <True>
(< mxv04 cxv01) => <False>
(< mxv04 cxv02) => <True>
(< mxv04 cxv03) => <True>
(< mxv04 mxv01) => <False>
(< mxv04 mxv02) => <False>
(< mxv04 mxv03) => <True>
(< mxv04 mxv04) => <False>
(< mxv04 rxv01) => <False>
(< mxv04 rxv02) => <True>
(< mxv04 rxv03) => <True>
(< mxv04 rxv04) => <True>
(< mxv04 rxv05) => <True>
(< mxv04 sxv01) => <False>
(< mxv04 sxv02) => <True>
(< mxv04 sxv03) => <True>
(< mxv04 sxv04) => <True>
(< mxv04 sxv05) => <True>
(< mxv04 sxv06) => <True>
(< mxv04 sxv07) => <False>
(< mxv04 bxv01) => <True>
(< mxv04 bxv02) => <True>
Testing mxv04
(fromIndex:toIndex: mxv04 0 0) => << -6 >>
(fromIndex:toIndex: mxv04 0 1) => << -6 -5 >>
(fromIndex:toIndex: mxv04 0 2) => << -6 -5 -4 >>
(fromIndex:toIndex: mxv04 0 4) => << -6 -5 -4 -3 -2 >>
(fromIndex:toIndex: mxv04 1 1) => << -5 >>
(fromIndex:toIndex: mxv04 1 3) => << -5 -4 -3 >>
(fromIndex:toIndex: mxv04 -1 -1) => << -1 >>
(fromIndex:toIndex: mxv04 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: mxv04 -3 -1) => << -3 -2 -1 >>
(fromIndex:toIndex: mxv04 -5 -1) => << -5 -4 -3 -2 -1 >>
(fromIndex:toIndex: mxv04 -2 -2) => << -2 >>
(fromIndex:toIndex: mxv04 -4 -2) => << -4 -3 -2 >>
(fromIndex:toIndex: mxv04 -1 0) => << -1 -6 >>
(fromIndex:toIndex: mxv04 -2 1) => << -2 -1 -6 -5 >>
(fromIndex:toIndex: mxv04 -3 2) => << -3 -2 -1 -6 -5 -4 >>
(fromIndex:toIndex: mxv04 -4 3) => << -4 -3 -2 -1 -6 -5 -4 -3 >>
(fromIndex:toIndex: mxv04 -5 4) => << -5 -4 -3 -2 -1 -6 -5 -4 -3 -2 >>
Testing rxv01
(at:ifAbsent: rxv01 0 {nil}) => nil
(at:ifAbsent: rxv01 1 {nil}) => nil
(at:ifAbsent: rxv01 2 {nil}) => nil
(at:ifAbsent: rxv01 3 {nil}) => nil
(at:ifAbsent: rxv01 4 {nil}) => nil
(at:ifAbsent: rxv01 5 {nil}) => nil
(at:ifAbsent: rxv01 7 {nil}) => nil
(at:ifAbsent: rxv01 8 {nil}) => nil
(at:ifAbsent: rxv01 9 {nil}) => nil
(at:ifAbsent: rxv01 1073741823 {nil}) => nil
(at:ifAbsent: rxv01 1073741824 {nil}) => nil
(at:ifAbsent: rxv01 1073741825 {nil}) => nil
(at:ifAbsent: rxv01 -1073741825 {nil}) => nil
(at:ifAbsent: rxv01 -1073741824 {nil}) => nil
(at:ifAbsent: rxv01 -1073741823 {nil}) => nil
(at:ifAbsent: rxv01 -9 {nil}) => nil
(at:ifAbsent: rxv01 -8 {nil}) => nil
(at:ifAbsent: rxv01 -7 {nil}) => nil
(at:ifAbsent: rxv01 -5 {nil}) => nil
(at:ifAbsent: rxv01 -4 {nil}) => nil
(at:ifAbsent: rxv01 -3 {nil}) => nil
(at:ifAbsent: rxv01 -2 {nil}) => nil
(at:ifAbsent: rxv01 -1 {nil}) => nil
Testing rxv01
(print rxv01) => << >>
(detect:ifNone: rxv01 negative) => nil
(detect:ifNone: rxv01 nonnegative) => nil
(detect:ifNone: rxv01 strictlyPositive) => nil
Testing rxv01
(sum rxv01) => 0
Testing rxv01
(product rxv01) => 1
Testing rxv01
Testing rxv01
Testing rxv01
(similar: rxv01 nil) => <False>
(similar: rxv01 <True>) => <False>
(similar: rxv01 <False>) => <False>
(similar: rxv01 0) => <False>
(similar: rxv01 1) => <False>
(similar: rxv01 2) => <False>
(similar: rxv01 42) => <False>
(similar: rxv01 xv01) => <True>
(similar: rxv01 xv02) => <False>
(similar: rxv01 xv03) => <False>
(similar: rxv01 xv04) => <False>
(similar: rxv01 xv05) => <False>
(similar: rxv01 xv06) => <False>
(similar: rxv01 xv07) => <False>
(similar: rxv01 xv08) => <False>
(similar: rxv01 xv09) => <False>
(similar: rxv01 xv10) => <False>
(similar: rxv01 xv11) => <False>
(similar: rxv01 xv12) => <False>
(similar: rxv01 xv13) => <False>
(similar: rxv01 cxv01) => <True>
(similar: rxv01 cxv02) => <False>
(similar: rxv01 cxv03) => <False>
(similar: rxv01 mxv01) => <True>
(similar: rxv01 mxv02) => <True>
(similar: rxv01 mxv03) => <False>
(similar: rxv01 mxv04) => <False>
(similar: rxv01 rxv01) => <True>
(similar: rxv01 rxv02) => <False>
(similar: rxv01 rxv03) => <False>
(similar: rxv01 rxv04) => <False>
(similar: rxv01 rxv05) => <False>
(similar: rxv01 sxv01) => <True>
(similar: rxv01 sxv02) => <False>
(similar: rxv01 sxv03) => <False>
(similar: rxv01 sxv04) => <False>
(similar: rxv01 sxv05) => <False>
(similar: rxv01 sxv06) => <False>
(similar: rxv01 sxv07) => <False>
(similar: rxv01 bxv01) => <False>
(similar: rxv01 bxv02) => <False>
Testing rxv01
(< rxv01 xv01) => <False>
(< rxv01 xv02) => <True>
(< rxv01 xv03) => <True>
(< rxv01 xv04) => <True>
(< rxv01 xv05) => <True>
(< rxv01 xv06) => <True>
(< rxv01 xv07) => <True>
(< rxv01 xv08) => <True>
(< rxv01 xv09) => <True>
(< rxv01 xv10) => <True>
(< rxv01 xv11) => <True>
(< rxv01 cxv01) => <False>
(< rxv01 cxv02) => <True>
(< rxv01 cxv03) => <True>
(< rxv01 mxv01) => <False>
(< rxv01 mxv02) => <False>
(< rxv01 mxv03) => <True>
(< rxv01 mxv04) => <True>
(< rxv01 rxv01) => <False>
(< rxv01 rxv02) => <True>
(< rxv01 rxv03) => <True>
(< rxv01 rxv04) => <True>
(< rxv01 rxv05) => <True>
(< rxv01 sxv01) => <False>
(< rxv01 sxv02) => <True>
(< rxv01 sxv03) => <True>
(< rxv01 sxv04) => <True>
(< rxv01 sxv05) => <True>
(< rxv01 sxv06) => <True>
(< rxv01 sxv07) => <True>
(< rxv01 bxv01) => <True>
(< rxv01 bxv02) => <True>
Testing rxv01
Testing rxv02
(at:ifAbsent: rxv02 0 {nil}) => 1
(at:ifAbsent: rxv02 1 {nil}) => nil
(at:ifAbsent: rxv02 2 {nil}) => nil
(at:ifAbsent: rxv02 3 {nil}) => nil
(at:ifAbsent: rxv02 4 {nil}) => nil
(at:ifAbsent: rxv02 5 {nil}) => nil
(at:ifAbsent: rxv02 7 {nil}) => nil
(at:ifAbsent: rxv02 8 {nil}) => nil
(at:ifAbsent: rxv02 9 {nil}) => nil
(at:ifAbsent: rxv02 1073741823 {nil}) => nil
(at:ifAbsent: rxv02 1073741824 {nil}) => nil
(at:ifAbsent: rxv02 1073741825 {nil}) => nil
(at:ifAbsent: rxv02 -1073741825 {nil}) => nil
(at:ifAbsent: rxv02 -1073741824 {nil}) => nil
(at:ifAbsent: rxv02 -1073741823 {nil}) => nil
(at:ifAbsent: rxv02 -9 {nil}) => nil
(at:ifAbsent: rxv02 -8 {nil}) => nil
(at:ifAbsent: rxv02 -7 {nil}) => nil
(at:ifAbsent: rxv02 -5 {nil}) => nil
(at:ifAbsent: rxv02 -4 {nil}) => nil
(at:ifAbsent: rxv02 -3 {nil}) => nil
(at:ifAbsent: rxv02 -2 {nil}) => nil
(at:ifAbsent: rxv02 -1 {nil}) => 1
Testing rxv02
(print rxv02) => << 1 >>
(includes: rxv02 nil) => <False>
(occurrencesOf: rxv02 nil) => 0
(includes: rxv02 <True>) => <False>
(occurrencesOf: rxv02 <True>) => 0
(includes: rxv02 <False>) => <False>
(occurrencesOf: rxv02 <False>) => 0
(includes: rxv02 0) => <False>
(occurrencesOf: rxv02 0) => 0
(includes: rxv02 1) => <True>
(occurrencesOf: rxv02 1) => 1
(includes: rxv02 2) => <False>
(occurrencesOf: rxv02 2) => 0
(includes: rxv02 42) => <False>
(occurrencesOf: rxv02 42) => 0
(detect:ifNone: rxv02 negative) => nil
(detect:ifNone: rxv02 nonnegative) => 1
(detect:ifNone: rxv02 strictlyPositive) => 1
Testing rxv02
(sum rxv02) => 1
Testing rxv02
(product rxv02) => 1
Testing rxv02
(min rxv02) => 1
Testing rxv02
(max rxv02) => 1
Testing rxv02
(similar: rxv02 nil) => <False>
(similar: rxv02 <True>) => <False>
(similar: rxv02 <False>) => <False>
(similar: rxv02 0) => <False>
(similar: rxv02 1) => <False>
(similar: rxv02 2) => <False>
(similar: rxv02 42) => <False>
(similar: rxv02 xv01) => <False>
(similar: rxv02 xv02) => <True>
(similar: rxv02 xv03) => <False>
(similar: rxv02 xv04) => <False>
(similar: rxv02 xv05) => <False>
(similar: rxv02 xv06) => <False>
(similar: rxv02 xv07) => <False>
(similar: rxv02 xv08) => <False>
(similar: rxv02 xv09) => <False>
(similar: rxv02 xv12) => <False>
(similar: rxv02 xv13) => <False>
(similar: rxv02 cxv01) => <False>
(similar: rxv02 cxv02) => <False>
(similar: rxv02 cxv03) => <False>
(similar: rxv02 mxv01) => <False>
(similar: rxv02 mxv02) => <False>
(similar: rxv02 mxv03) => <False>
(similar: rxv02 mxv04) => <False>
(similar: rxv02 rxv01) => <False>
(similar: rxv02 rxv02) => <True>
(similar: rxv02 rxv03) => <False>
(similar: rxv02 rxv04) => <False>
(similar: rxv02 rxv05) => <False>
(similar: rxv02 sxv01) => <False>
(similar: rxv02 sxv02) => <False>
(similar: rxv02 sxv03) => <False>
(similar: rxv02 sxv04) => <False>
(similar: rxv02 sxv05) => <False>
(similar: rxv02 sxv06) => <False>
(similar: rxv02 sxv07) => <False>
(similar: rxv02 bxv01) => <False>
(similar: rxv02 bxv02) => <False>
Testing rxv02
(< rxv02 xv01) => <False>
(< rxv02 xv02) => <False>
(< rxv02 xv03) => <True>
(< rxv02 xv04) => <True>
(< rxv02 xv05) => <False>
(< rxv02 xv06) => <False>
(< rxv02 xv07) => <False>
(< rxv02 xv08) => <True>
(< rxv02 xv09) => <True>
(< rxv02 cxv01) => <False>
(< rxv02 cxv02) => <True>
(< rxv02 cxv03) => <False>
(< rxv02 mxv01) => <False>
(< rxv02 mxv02) => <False>
(< rxv02 mxv03) => <True>
(< rxv02 mxv04) => <False>
(< rxv02 rxv01) => <False>
(< rxv02 rxv02) => <False>
(< rxv02 rxv03) => <True>
(< rxv02 rxv04) => <True>
(< rxv02 rxv05) => <False>
(< rxv02 sxv01) => <False>
(< rxv02 sxv02) => <True>
(< rxv02 sxv03) => <True>
(< rxv02 sxv04) => <True>
(< rxv02 sxv05) => <True>
(< rxv02 sxv06) => <False>
(< rxv02 sxv07) => <False>
(< rxv02 bxv01) => <False>
(< rxv02 bxv02) => <False>
Testing rxv02
Testing rxv03
(at:ifAbsent: rxv03 0 {nil}) => 3
(at:ifAbsent: rxv03 1 {nil}) => 2
(at:ifAbsent: rxv03 2 {nil}) => 1
(at:ifAbsent: rxv03 3 {nil}) => nil
(at:ifAbsent: rxv03 4 {nil}) => nil
(at:ifAbsent: rxv03 5 {nil}) => nil
(at:ifAbsent: rxv03 7 {nil}) => nil
(at:ifAbsent: rxv03 8 {nil}) => nil
(at:ifAbsent: rxv03 9 {nil}) => nil
(at:ifAbsent: rxv03 1073741823 {nil}) => nil
(at:ifAbsent: rxv03 1073741824 {nil}) => nil
(at:ifAbsent: rxv03 1073741825 {nil}) => nil
(at:ifAbsent: rxv03 -1073741825 {nil}) => nil
(at:ifAbsent: rxv03 -1073741824 {nil}) => nil
(at:ifAbsent: rxv03 -1073741823 {nil}) => nil
(at:ifAbsent: rxv03 -9 {nil}) => nil
(at:ifAbsent: rxv03 -8 {nil}) => nil
(at:ifAbsent: rxv03 -7 {nil}) => nil
(at:ifAbsent: rxv03 -5 {nil}) => nil
(at:ifAbsent: rxv03 -4 {nil}) => nil
(at:ifAbsent: rxv03 -3 {nil}) => 3
(at:ifAbsent: rxv03 -2 {nil}) => 2
(at:ifAbsent: rxv03 -1 {nil}) => 1
Testing rxv03
(print rxv03) => << 3 2 1 >>
(includes: rxv03 nil) => <False>
(occurrencesOf: rxv03 nil) => 0
(includes: rxv03 <True>) => <False>
(occurrencesOf: rxv03 <True>) => 0
(includes: rxv03 <False>) => <False>
(occurrencesOf: rxv03 <False>) => 0
(includes: rxv03 0) => <False>
(occurrencesOf: rxv03 0) => 0
(includes: rxv03 1) => <True>
(occurrencesOf: rxv03 1) => 1
(includes: rxv03 2) => <True>
(occurrencesOf: rxv03 2) => 1
(includes: rxv03 42) => <False>
(occurrencesOf: rxv03 42) => 0
(detect:ifNone: rxv03 negative) => nil
(detect:ifNone: rxv03 nonnegative) => 3
(detect:ifNone: rxv03 strictlyPositive) => 3
Testing rxv03
(sum rxv03) => 6
Testing rxv03
(product rxv03) => 6
Testing rxv03
(min rxv03) => 1
Testing rxv03
(max rxv03) => 3
Testing rxv03
(similar: rxv03 nil) => <False>
(similar: rxv03 <True>) => <False>
(similar: rxv03 <False>) => <False>
(similar: rxv03 0) => <False>
(similar: rxv03 1) => <False>
(similar: rxv03 2) => <False>
(similar: rxv03 42) => <False>
(similar: rxv03 xv01) => <False>
(similar: rxv03 xv02) => <False>
(similar: rxv03 xv03) => <False>
(similar: rxv03 xv04) => <False>
(similar: rxv03 xv05) => <False>
(similar: rxv03 xv06) => <False>
(similar: rxv03 xv07) => <False>
(similar: rxv03 xv08) => <False>
(similar: rxv03 xv09) => <False>
(similar: rxv03 xv12) => <False>
(similar: rxv03 xv13) => <False>
(similar: rxv03 cxv01) => <False>
(similar: rxv03 cxv02) => <False>
(similar: rxv03 cxv03) => <False>
(similar: rxv03 mxv01) => <False>
(similar: rxv03 mxv02) => <False>
(similar: rxv03 mxv03) => <False>
(similar: rxv03 mxv04) => <False>
(similar: rxv03 rxv01) => <False>
(similar: rxv03 rxv02) => <False>
(similar: rxv03 rxv03) => <True>
(similar: rxv03 rxv04) => <False>
(similar: rxv03 rxv05) => <False>
(similar: rxv03 sxv01) => <False>
(similar: rxv03 sxv02) => <False>
(similar: rxv03 sxv03) => <False>
(similar: rxv03 sxv04) => <False>
(similar: rxv03 sxv05) => <False>
(similar: rxv03 sxv06) => <False>
(similar: rxv03 sxv07) => <False>
(similar: rxv03 bxv01) => <False>
(similar: rxv03 bxv02) => <False>
Testing rxv03
(< rxv03 xv01) => <False>
(< rxv03 xv02) => <False>
(< rxv03 xv03) => <False>
(< rxv03 xv04) => <False>
(< rxv03 xv05) => <False>
(< rxv03 xv06) => <False>
(< rxv03 xv07) => <False>
(< rxv03 xv08) => <False>
(< rxv03 xv09) => <False>
(< rxv03 cxv01) => <False>
(< rxv03 cxv02) => <False>
(< rxv03 cxv03) => <False>
(< rxv03 mxv01) => <False>
(< rxv03 mxv02) => <False>
(< rxv03 mxv03) => <False>
(< rxv03 mxv04) => <False>
(< rxv03 rxv01) => <False>
(< rxv03 rxv02) => <False>
(< rxv03 rxv03) => <False>
(< rxv03 rxv04) => <True>
(< rxv03 rxv05) => <False>
(< rxv03 sxv01) => <False>
(< rxv03 sxv02) => <False>
(< rxv03 sxv03) => <False>
(< rxv03 sxv04) => <False>
(< rxv03 sxv05) => <False>
(< rxv03 sxv06) => <False>
(< rxv03 sxv07) => <False>
(< rxv03 bxv01) => <False>
(< rxv03 bxv02) => <False>
Testing rxv03
Testing rxv04
(at:ifAbsent: rxv04 0 {nil}) => 6
(at:ifAbsent: rxv04 1 {nil}) => 5
(at:ifAbsent: rxv04 2 {nil}) => 4
(at:ifAbsent: rxv04 3 {nil}) => 3
(at:ifAbsent: rxv04 4 {nil}) => 2
(at:ifAbsent: rxv04 5 {nil}) => 1
(at:ifAbsent: rxv04 7 {nil}) => nil
(at:ifAbsent: rxv04 8 {nil}) => nil
(at:ifAbsent: rxv04 9 {nil}) => nil
(at:ifAbsent: rxv04 1073741823 {nil}) => nil
(at:ifAbsent: rxv04 1073741824 {nil}) => nil
(at:ifAbsent: rxv04 1073741825 {nil}) => nil
(at:ifAbsent: rxv04 -1073741825 {nil}) => nil
(at:ifAbsent: rxv04 -1073741824 {nil}) => nil
(at:ifAbsent: rxv04 -1073741823 {nil}) => nil
(at:ifAbsent: rxv04 -9 {nil}) => nil
(at:ifAbsent: rxv04 -8 {nil}) => nil
(at:ifAbsent: rxv04 -7 {nil}) => nil
(at:ifAbsent: rxv04 -5 {nil}) => 5
(at:ifAbsent: rxv04 -4 {nil}) => 4
(at:ifAbsent: rxv04 -3 {nil}) => 3
(at:ifAbsent: rxv04 -2 {nil}) => 2
(at:ifAbsent: rxv04 -1 {nil}) => 1
Testing rxv04
(print rxv04) => << 6 5 4 3 2 1 >>
(includes: rxv04 nil) => <False>
(occurrencesOf: rxv04 nil) => 0
(includes: rxv04 <True>) => <False>
(occurrencesOf: rxv04 <True>) => 0
(includes: rxv04 <False>) => <False>
(occurrencesOf: rxv04 <False>) => 0
(includes: rxv04 0) => <False>
(occurrencesOf: rxv04 0) => 0
(includes: rxv04 1) => <True>
(occurrencesOf: rxv04 1) => 1
(includes: rxv04 2) => <True>
(occurrencesOf: rxv04 2) => 1
(includes: rxv04 42) => <False>
(occurrencesOf: rxv04 42) => 0
(detect:ifNone: rxv04 negative) => nil
(detect:ifNone: rxv04 nonnegative) => 6
(detect:ifNone: rxv04 strictlyPositive) => 6
Testing rxv04
(sum rxv04) => 21
Testing rxv04
(product rxv04) => 720
Testing rxv04
(min rxv04) => 1
Testing rxv04
(max rxv04) => 6
Testing rxv04
(similar: rxv04 nil) => <False>
(similar: rxv04 <True>) => <False>
(similar: rxv04 <False>) => <False>
(similar: rxv04 0) => <False>
(similar: rxv04 1) => <False>
(similar: rxv04 2) => <False>
(similar: rxv04 42) => <False>
(similar: rxv04 xv01) => <False>
(similar: rxv04 xv02) => <False>
(similar: rxv04 xv03) => <False>
(similar: rxv04 xv04) => <False>
(similar: rxv04 xv05) => <False>
(similar: rxv04 xv06) => <False>
(similar: rxv04 xv07) => <False>
(similar: rxv04 xv08) => <False>
(similar: rxv04 xv09) => <False>
(similar: rxv04 xv12) => <False>
(similar: rxv04 xv13) => <False>
(similar: rxv04 cxv01) => <False>
(similar: rxv04 cxv02) => <False>
(similar: rxv04 cxv03) => <False>
(similar: rxv04 mxv01) => <False>
(similar: rxv04 mxv02) => <False>
(similar: rxv04 mxv03) => <False>
(similar: rxv04 mxv04) => <False>
(similar: rxv04 rxv01) => <False>
(similar: rxv04 rxv02) => <False>
(similar: rxv04 rxv03) => <False>
(similar: rxv04 rxv04) => <True>
(similar: rxv04 rxv05) => <False>
(similar: rxv04 sxv01) => <False>
(similar: rxv04 sxv02) => <False>
(similar: rxv04 sxv03) => <False>
(similar: rxv04 sxv04) => <False>
(similar: rxv04 sxv05) => <False>
(similar: rxv04 sxv06) => <False>
(similar: rxv04 sxv07) => <False>
(similar: rxv04 bxv01) => <False>
(similar: rxv04 bxv02) => <False>
Testing rxv04
(< rxv04 xv01) => <False>
(< rxv04 xv02) => <False>
(< rxv04 xv03) => <False>
(< rxv04 xv04) => <False>
(< rxv04 xv05) => <False>
(< rxv04 xv06) => <False>
(< rxv04 xv07) => <False>
(< rxv04 xv08) => <False>
(< rxv04 xv09) => <False>
(< rxv04 cxv01) => <False>
(< rxv04 cxv02) => <False>
(< rxv04 cxv03) => <False>
(< rxv04 mxv01) => <False>
(< rxv04 mxv02) => <False>
(< rxv04 mxv03) => <False>
(< rxv04 mxv04) => <False>
(< rxv04 rxv01) => <False>
(< rxv04 rxv02) => <False>
(< rxv04 rxv03) => <False>
(< rxv04 rxv04) => <False>
(< rxv04 rxv05) => <False>
(< rxv04 sxv01) => <False>
(< rxv04 sxv02) => <False>
(< rxv04 sxv03) => <False>
(< rxv04 sxv04) => <False>
(< rxv04 sxv05) => <False>
(< rxv04 sxv06) => <False>
(< rxv04 sxv07) => <False>
(< rxv04 bxv01) => <False>
(< rxv04 bxv02) => <False>
Testing rxv04
(fromIndex:toIndex: rxv04 0 0) => << 6 >>
(fromIndex:toIndex: rxv04 0 1) => << 6 5 >>
(fromIndex:toIndex: rxv04 0 2) => << 6 5 4 >>
(fromIndex:toIndex: rxv04 0 4) => << 6 5 4 3 2 >>
(fromIndex:toIndex: rxv04 1 1) => << 5 >>
(fromIndex:toIndex: rxv04 1 3) => << 5 4 3 >>
(fromIndex:toIndex: rxv04 -1 -1) => << 1 >>
(fromIndex:toIndex: rxv04 -2 -1) => << 2 1 >>
(fromIndex:toIndex: rxv04 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: rxv04 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: rxv04 -2 -2) => << 2 >>
(fromIndex:toIndex: rxv04 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: rxv04 -1 0) => << 1 6 >>
(fromIndex:toIndex: rxv04 -2 1) => << 2 1 6 5 >>
(fromIndex:toIndex: rxv04 -3 2) => << 3 2 1 6 5 4 >>
(fromIndex:toIndex: rxv04 -4 3) => << 4 3 >>
(fromIndex:toIndex: rxv04 -5 4) => << 5 4 3 2 >>
Testing rxv05
(at:ifAbsent: rxv05 0 {nil}) => -1
(at:ifAbsent: rxv05 1 {nil}) => -2
(at:ifAbsent: rxv05 2 {nil}) => -3
(at:ifAbsent: rxv05 3 {nil}) => -4
(at:ifAbsent: rxv05 4 {nil}) => -5
(at:ifAbsent: rxv05 5 {nil}) => -6
(at:ifAbsent: rxv05 7 {nil}) => nil
(at:ifAbsent: rxv05 8 {nil}) => nil
(at:ifAbsent: rxv05 9 {nil}) => nil
(at:ifAbsent: rxv05 1073741823 {nil}) => nil
(at:ifAbsent: rxv05 1073741824 {nil}) => nil
(at:ifAbsent: rxv05 1073741825 {nil}) => nil
(at:ifAbsent: rxv05 -1073741825 {nil}) => nil
(at:ifAbsent: rxv05 -1073741824 {nil}) => nil
(at:ifAbsent: rxv05 -1073741823 {nil}) => nil
(at:ifAbsent: rxv05 -9 {nil}) => nil
(at:ifAbsent: rxv05 -8 {nil}) => nil
(at:ifAbsent: rxv05 -7 {nil}) => nil
(at:ifAbsent: rxv05 -5 {nil}) => -2
(at:ifAbsent: rxv05 -4 {nil}) => -3
(at:ifAbsent: rxv05 -3 {nil}) => -4
(at:ifAbsent: rxv05 -2 {nil}) => -5
(at:ifAbsent: rxv05 -1 {nil}) => -6
Testing rxv05
(print rxv05) => << -1 -2 -3 -4 -5 -6 >>
(includes: rxv05 nil) => <False>
(occurrencesOf: rxv05 nil) => 0
(includes: rxv05 <True>) => <False>
(occurrencesOf: rxv05 <True>) => 0
(includes: rxv05 <False>) => <False>
(occurrencesOf: rxv05 <False>) => 0
(includes: rxv05 0) => <False>
(occurrencesOf: rxv05 0) => 0
(includes: rxv05 1) => <False>
(occurrencesOf: rxv05 1) => 0
(includes: rxv05 2) => <False>
(occurrencesOf: rxv05 2) => 0
(includes: rxv05 42) => <False>
(occurrencesOf: rxv05 42) => 0
(detect:ifNone: rxv05 negative) => -1
(detect:ifNone: rxv05 nonnegative) => nil
(detect:ifNone: rxv05 strictlyPositive) => nil
Testing rxv05
(sum rxv05) => -21
Testing rxv05
(product rxv05) => 720
Testing rxv05
(min rxv05) => -6
Testing rxv05
(max rxv05) => -1
Testing rxv05
(similar: rxv05 nil) => <False>
(similar: rxv05 <True>) => <False>
(similar: rxv05 <False>) => <False>
(similar: rxv05 0) => <False>
(similar: rxv05 1) => <False>
(similar: rxv05 2) => <False>
(similar: rxv05 42) => <False>
(similar: rxv05 xv01) => <False>
(similar: rxv05 xv02) => <False>
(similar: rxv05 xv03) => <False>
(similar: rxv05 xv04) => <False>
(similar: rxv05 xv05) => <False>
(similar: rxv05 xv06) => <False>
(similar: rxv05 xv07) => <False>
(similar: rxv05 xv08) => <False>
(similar: rxv05 xv09) => <False>
(similar: rxv05 xv12) => <False>
(similar: rxv05 xv13) => <False>
(similar: rxv05 cxv01) => <False>
(similar: rxv05 cxv02) => <False>
(similar: rxv05 cxv03) => <False>
(similar: rxv05 mxv01) => <False>
(similar: rxv05 mxv02) => <False>
(similar: rxv05 mxv03) => <False>
(similar: rxv05 mxv04) => <False>
(similar: rxv05 rxv01) => <False>
(similar: rxv05 rxv02) => <False>
(similar: rxv05 rxv03) => <False>
(similar: rxv05 rxv04) => <False>
(similar: rxv05 rxv05) => <True>
(similar: rxv05 sxv01) => <False>
(similar: rxv05 sxv02) => <False>
(similar: rxv05 sxv03) => <False>
(similar: rxv05 sxv04) => <False>
(similar: rxv05 sxv05) => <False>
(similar: rxv05 sxv06) => <False>
(similar: rxv05 sxv07) => <False>
(similar: rxv05 bxv01) => <False>
(similar: rxv05 bxv02) => <False>
Testing rxv05
(< rxv05 xv01) => <False>
(< rxv05 xv02) => <True>
(< rxv05 xv03) => <True>
(< rxv05 xv04) => <True>
(< rxv05 xv05) => <False>
(< rxv05 xv06) => <False>
(< rxv05 xv07) => <False>
(< rxv05 xv08) => <True>
(< rxv05 xv09) => <True>
(< rxv05 cxv01) => <False>
(< rxv05 cxv02) => <True>
(< rxv05 cxv03) => <False>
(< rxv05 mxv01) => <False>
(< rxv05 mxv02) => <False>
(< rxv05 mxv03) => <True>
(< rxv05 mxv04) => <False>
(< rxv05 rxv01) => <False>
(< rxv05 rxv02) => <True>
(< rxv05 rxv03) => <True>
(< rxv05 rxv04) => <True>
(< rxv05 rxv05) => <False>
(< rxv05 sxv01) => <False>
(< rxv05 sxv02) => <True>
(< rxv05 sxv03) => <True>
(< rxv05 sxv04) => <True>
(< rxv05 sxv05) => <True>
(< rxv05 sxv06) => <False>
(< rxv05 sxv07) => <False>
(< rxv05 bxv01) => <True>
(< rxv05 bxv02) => <True>
Testing rxv05
(fromIndex:toIndex: rxv05 0 0) => << -1 >>
(fromIndex:toIndex: rxv05 0 1) => << -1 -2 >>
(fromIndex:toIndex: rxv05 0 2) => << -1 -2 -3 >>
(fromIndex:toIndex: rxv05 0 4) => << -1 -2 -3 -4 -5 >>
(fromIndex:toIndex: rxv05 1 1) => << -2 >>
(fromIndex:toIndex: rxv05 1 3) => << -2 -3 -4 >>
(fromIndex:toIndex: rxv05 -1 -1) => << -6 >>
(fromIndex:toIndex: rxv05 -2 -1) => << -5 -6 >>
(fromIndex:toIndex: rxv05 -3 -1) => << -4 -5 -6 >>
(fromIndex:toIndex: rxv05 -5 -1) => << -2 -3 -4 -5 -6 >>
(fromIndex:toIndex: rxv05 -2 -2) => << -5 >>
(fromIndex:toIndex: rxv05 -4 -2) => << -3 -4 -5 >>
(fromIndex:toIndex: rxv05 -1 0) => << -6 -1 >>
(fromIndex:toIndex: rxv05 -2 1) => << -5 -6 -1 -2 >>
(fromIndex:toIndex: rxv05 -3 2) => << -4 -5 -6 -1 -2 -3 >>
(fromIndex:toIndex: rxv05 -4 3) => << -3 -4 >>
(fromIndex:toIndex: rxv05 -5 4) => << -2 -3 -4 -5 >>
Testing sxv01
(at:ifAbsent: sxv01 0 {nil}) => nil
(at:ifAbsent: sxv01 1 {nil}) => nil
(at:ifAbsent: sxv01 2 {nil}) => nil
(at:ifAbsent: sxv01 3 {nil}) => nil
(at:ifAbsent: sxv01 4 {nil}) => nil
(at:ifAbsent: sxv01 5 {nil}) => nil
(at:ifAbsent: sxv01 7 {nil}) => nil
(at:ifAbsent: sxv01 8 {nil}) => nil
(at:ifAbsent: sxv01 9 {nil}) => nil
(at:ifAbsent: sxv01 1073741823 {nil}) => nil
(at:ifAbsent: sxv01 1073741824 {nil}) => nil
(at:ifAbsent: sxv01 1073741825 {nil}) => nil
(at:ifAbsent: sxv01 -1073741825 {nil}) => nil
(at:ifAbsent: sxv01 -1073741824 {nil}) => nil
(at:ifAbsent: sxv01 -1073741823 {nil}) => nil
(at:ifAbsent: sxv01 -9 {nil}) => nil
(at:ifAbsent: sxv01 -8 {nil}) => nil
(at:ifAbsent: sxv01 -7 {nil}) => nil
(at:ifAbsent: sxv01 -5 {nil}) => nil
(at:ifAbsent: sxv01 -4 {nil}) => nil
(at:ifAbsent: sxv01 -3 {nil}) => nil
(at:ifAbsent: sxv01 -2 {nil}) => nil
(at:ifAbsent: sxv01 -1 {nil}) => nil
Testing sxv01
(print sxv01) => << >>
(detect:ifNone: sxv01 negative) => nil
(detect:ifNone: sxv01 nonnegative) => nil
(detect:ifNone: sxv01 strictlyPositive) => nil
Testing sxv01
(sum sxv01) => 0
Testing sxv01
(product sxv01) => 1
Testing sxv01
Testing sxv01
Testing sxv01
(similar: sxv01 nil) => <False>
(similar: sxv01 <True>) => <False>
(similar: sxv01 <False>) => <False>
(similar: sxv01 0) => <False>
(similar: sxv01 1) => <False>
(similar: sxv01 2) => <False>
(similar: sxv01 42) => <False>
(similar: sxv01 xv01) => <True>
(similar: sxv01 xv02) => <False>
(similar: sxv01 xv03) => <False>
(similar: sxv01 xv04) => <False>
(similar: sxv01 xv05) => <False>
(similar: sxv01 xv06) => <False>
(similar: sxv01 xv07) => <False>
(similar: sxv01 xv08) => <False>
(similar: sxv01 xv09) => <False>
(similar: sxv01 xv10) => <False>
(similar: sxv01 xv11) => <False>
(similar: sxv01 xv12) => <False>
(similar: sxv01 xv13) => <False>
(similar: sxv01 cxv01) => <True>
(similar: sxv01 cxv02) => <False>
(similar: sxv01 cxv03) => <False>
(similar: sxv01 mxv01) => <True>
(similar: sxv01 mxv02) => <True>
(similar: sxv01 mxv03) => <False>
(similar: sxv01 mxv04) => <False>
(similar: sxv01 rxv01) => <True>
(similar: sxv01 rxv02) => <False>
(similar: sxv01 rxv03) => <False>
(similar: sxv01 rxv04) => <False>
(similar: sxv01 rxv05) => <False>
(similar: sxv01 sxv01) => <True>
(similar: sxv01 sxv02) => <False>
(similar: sxv01 sxv03) => <False>
(similar: sxv01 sxv04) => <False>
(similar: sxv01 sxv05) => <False>
(similar: sxv01 sxv06) => <False>
(similar: sxv01 sxv07) => <False>
(similar: sxv01 bxv01) => <False>
(similar: sxv01 bxv02) => <False>
Testing sxv01
(< sxv01 xv01) => <False>
(< sxv01 xv02) => <True>
(< sxv01 xv03) => <True>
(< sxv01 xv04) => <True>
(< sxv01 xv05) => <True>
(< sxv01 xv06) => <True>
(< sxv01 xv07) => <True>
(< sxv01 xv08) => <True>
(< sxv01 xv09) => <True>
(< sxv01 xv10) => <True>
(< sxv01 xv11) => <True>
(< sxv01 cxv01) => <False>
(< sxv01 cxv02) => <True>
(< sxv01 cxv03) => <True>
(< sxv01 mxv01) => <False>
(< sxv01 mxv02) => <False>
(< sxv01 mxv03) => <True>
(< sxv01 mxv04) => <True>
(< sxv01 rxv01) => <False>
(< sxv01 rxv02) => <True>
(< sxv01 rxv03) => <True>
(< sxv01 rxv04) => <True>
(< sxv01 rxv05) => <True>
(< sxv01 sxv01) => <False>
(< sxv01 sxv02) => <True>
(< sxv01 sxv03) => <True>
(< sxv01 sxv04) => <True>
(< sxv01 sxv05) => <True>
(< sxv01 sxv06) => <True>
(< sxv01 sxv07) => <True>
(< sxv01 bxv01) => <True>
(< sxv01 bxv02) => <True>
Testing sxv01
Testing sxv02
(at:ifAbsent: sxv02 0 {nil}) => 1
(at:ifAbsent: sxv02 1 {nil}) => 2
(at:ifAbsent: sxv02 2 {nil}) => 3
(at:ifAbsent: sxv02 3 {nil}) => 4
(at:ifAbsent: sxv02 4 {nil}) => 5
(at:ifAbsent: sxv02 5 {nil}) => 6
(at:ifAbsent: sxv02 7 {nil}) => nil
(at:ifAbsent: sxv02 8 {nil}) => nil
(at:ifAbsent: sxv02 9 {nil}) => nil
(at:ifAbsent: sxv02 1073741823 {nil}) => nil
(at:ifAbsent: sxv02 1073741824 {nil}) => nil
(at:ifAbsent: sxv02 1073741825 {nil}) => nil
(at:ifAbsent: sxv02 -1073741825 {nil}) => nil
(at:ifAbsent: sxv02 -1073741824 {nil}) => nil
(at:ifAbsent: sxv02 -1073741823 {nil}) => nil
(at:ifAbsent: sxv02 -9 {nil}) => nil
(at:ifAbsent: sxv02 -8 {nil}) => nil
(at:ifAbsent: sxv02 -7 {nil}) => nil
(at:ifAbsent: sxv02 -5 {nil}) => 2
(at:ifAbsent: sxv02 -4 {nil}) => 3
(at:ifAbsent: sxv02 -3 {nil}) => 4
(at:ifAbsent: sxv02 -2 {nil}) => 5
(at:ifAbsent: sxv02 -1 {nil}) => 6
Testing sxv02
(print sxv02) => << 1 2 3 4 5 6 >>
(includes: sxv02 nil) => <False>
(occurrencesOf: sxv02 nil) => 0
(includes: sxv02 <True>) => <False>
(occurrencesOf: sxv02 <True>) => 0
(includes: sxv02 <False>) => <False>
(occurrencesOf: sxv02 <False>) => 0
(includes: sxv02 0) => <False>
(occurrencesOf: sxv02 0) => 0
(includes: sxv02 1) => <True>
(occurrencesOf: sxv02 1) => 1
(includes: sxv02 2) => <True>
(occurrencesOf: sxv02 2) => 1
(includes: sxv02 42) => <False>
(occurrencesOf: sxv02 42) => 0
(detect:ifNone: sxv02 negative) => nil
(detect:ifNone: sxv02 nonnegative) => 1
(detect:ifNone: sxv02 strictlyPositive) => 1
Testing sxv02
(sum sxv02) => 21
Testing sxv02
(product sxv02) => 720
Testing sxv02
(min sxv02) => 1
Testing sxv02
(max sxv02) => 6
Testing sxv02
(similar: sxv02 nil) => <False>
(similar: sxv02 <True>) => <False>
(similar: sxv02 <False>) => <False>
(similar: sxv02 0) => <False>
(similar: sxv02 1) => <False>
(similar: sxv02 2) => <False>
(similar: sxv02 42) => <False>
(similar: sxv02 xv01) => <False>
(similar: sxv02 xv02) => <False>
(similar: sxv02 xv03) => <False>
(similar: sxv02 xv04) => <True>
(similar: sxv02 xv05) => <False>
(similar: sxv02 xv06) => <False>
(similar: sxv02 xv07) => <False>
(similar: sxv02 xv08) => <False>
(similar: sxv02 xv09) => <False>
(similar: sxv02 xv12) => <False>
(similar: sxv02 xv13) => <False>
(similar: sxv02 cxv01) => <False>
(similar: sxv02 cxv02) => <False>
(similar: sxv02 cxv03) => <False>
(similar: sxv02 mxv01) => <False>
(similar: sxv02 mxv02) => <False>
(similar: sxv02 mxv03) => <False>
(similar: sxv02 mxv04) => <False>
(similar: sxv02 rxv01) => <False>
(similar: sxv02 rxv02) => <False>
(similar: sxv02 rxv03) => <False>
(similar: sxv02 rxv04) => <False>
(similar: sxv02 rxv05) => <False>
(similar: sxv02 sxv01) => <False>
(similar: sxv02 sxv02) => <True>
(similar: sxv02 sxv03) => <True>
(similar: sxv02 sxv04) => <False>
(similar: sxv02 sxv05) => <False>
(similar: sxv02 sxv06) => <False>
(similar: sxv02 sxv07) => <False>
(similar: sxv02 bxv01) => <False>
(similar: sxv02 bxv02) => <False>
Testing sxv02
(< sxv02 xv01) => <False>
(< sxv02 xv02) => <False>
(< sxv02 xv03) => <False>
(< sxv02 xv04) => <False>
(< sxv02 xv05) => <False>
(< sxv02 xv06) => <False>
(< sxv02 xv07) => <False>
(< sxv02 xv08) => <True>
(< sxv02 xv09) => <True>
(< sxv02 cxv01) => <False>
(< sxv02 cxv02) => <True>
(< sxv02 cxv03) => <False>
(< sxv02 mxv01) => <False>
(< sxv02 mxv02) => <False>
(< sxv02 mxv03) => <True>
(< sxv02 mxv04) => <False>
(< sxv02 rxv01) => <False>
(< sxv02 rxv02) => <False>
(< sxv02 rxv03) => <True>
(< sxv02 rxv04) => <True>
(< sxv02 rxv05) => <False>
(< sxv02 sxv01) => <False>
(< sxv02 sxv02) => <False>
(< sxv02 sxv03) => <False>
(< sxv02 sxv04) => <False>
(< sxv02 sxv05) => <False>
(< sxv02 sxv06) => <False>
(< sxv02 sxv07) => <False>
(< sxv02 bxv01) => <False>
(< sxv02 bxv02) => <False>
Testing sxv02
(fromIndex:toIndex: sxv02 0 0) => << 1 >>
(fromIndex:toIndex: sxv02 0 1) => << 1 2 >>
(fromIndex:toIndex: sxv02 0 2) => << 1 2 3 >>
(fromIndex:toIndex: sxv02 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: sxv02 1 1) => << 2 >>
(fromIndex:toIndex: sxv02 1 3) => << 2 3 4 >>
(fromIndex:toIndex: sxv02 -1 -1) => << 6 >>
(fromIndex:toIndex: sxv02 -2 -1) => << 5 6 >>
(fromIndex:toIndex: sxv02 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: sxv02 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: sxv02 -2 -2) => << 5 >>
(fromIndex:toIndex: sxv02 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: sxv02 -1 0) => << 6 1 >>
(fromIndex:toIndex: sxv02 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: sxv02 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: sxv02 -4 3) => << 3 4 >>
(fromIndex:toIndex: sxv02 -5 4) => << 2 3 4 5 >>
Testing sxv03
(at:ifAbsent: sxv03 0 {nil}) => 1
(at:ifAbsent: sxv03 1 {nil}) => 2
(at:ifAbsent: sxv03 2 {nil}) => 3
(at:ifAbsent: sxv03 3 {nil}) => 4
(at:ifAbsent: sxv03 4 {nil}) => 5
(at:ifAbsent: sxv03 5 {nil}) => 6
(at:ifAbsent: sxv03 7 {nil}) => nil
(at:ifAbsent: sxv03 8 {nil}) => nil
(at:ifAbsent: sxv03 9 {nil}) => nil
(at:ifAbsent: sxv03 1073741823 {nil}) => nil
(at:ifAbsent: sxv03 1073741824 {nil}) => nil
(at:ifAbsent: sxv03 1073741825 {nil}) => nil
(at:ifAbsent: sxv03 -1073741825 {nil}) => nil
(at:ifAbsent: sxv03 -1073741824 {nil}) => nil
(at:ifAbsent: sxv03 -1073741823 {nil}) => nil
(at:ifAbsent: sxv03 -9 {nil}) => nil
(at:ifAbsent: sxv03 -8 {nil}) => nil
(at:ifAbsent: sxv03 -7 {nil}) => nil
(at:ifAbsent: sxv03 -5 {nil}) => 2
(at:ifAbsent: sxv03 -4 {nil}) => 3
(at:ifAbsent: sxv03 -3 {nil}) => 4
(at:ifAbsent: sxv03 -2 {nil}) => 5
(at:ifAbsent: sxv03 -1 {nil}) => 6
Testing sxv03
(print sxv03) => << 1 2 3 4 5 6 >>
(includes: sxv03 nil) => <False>
(occurrencesOf: sxv03 nil) => 0
(includes: sxv03 <True>) => <False>
(occurrencesOf: sxv03 <True>) => 0
(includes: sxv03 <False>) => <False>
(occurrencesOf: sxv03 <False>) => 0
(includes: sxv03 0) => <False>
(occurrencesOf: sxv03 0) => 0
(includes: sxv03 1) => <True>
(occurrencesOf: sxv03 1) => 1
(includes: sxv03 2) => <True>
(occurrencesOf: sxv03 2) => 1
(includes: sxv03 42) => <False>
(occurrencesOf: sxv03 42) => 0
(detect:ifNone: sxv03 negative) => nil
(detect:ifNone: sxv03 nonnegative) => 1
(detect:ifNone: sxv03 strictlyPositive) => 1
Testing sxv03
(sum sxv03) => 21
Testing sxv03
(product sxv03) => 720
Testing sxv03
(min sxv03) => 1
Testing sxv03
(max sxv03) => 6
Testing sxv03
(similar: sxv03 nil) => <False>
(similar: sxv03 <True>) => <False>
(similar: sxv03 <False>) => <False>
(similar: sxv03 0) => <False>
(similar: sxv03 1) => <False>
(similar: sxv03 2) => <False>
(similar: sxv03 42) => <False>
(similar: sxv03 xv01) => <False>
(similar: sxv03 xv02) => <False>
(similar: sxv03 xv03) => <False>
(similar: sxv03 xv04) => <True>
(similar: sxv03 xv05) => <False>
(similar: sxv03 xv06) => <False>
(similar: sxv03 xv07) => <False>
(similar: sxv03 xv08) => <False>
(similar: sxv03 xv09) => <False>
(similar: sxv03 xv12) => <False>
(similar: sxv03 xv13) => <False>
(similar: sxv03 cxv01) => <False>
(similar: sxv03 cxv02) => <False>
(similar: sxv03 cxv03) => <False>
(similar: sxv03 mxv01) => <False>
(similar: sxv03 mxv02) => <False>
(similar: sxv03 mxv03) => <False>
(similar: sxv03 mxv04) => <False>
(similar: sxv03 rxv01) => <False>
(similar: sxv03 rxv02) => <False>
(similar: sxv03 rxv03) => <False>
(similar: sxv03 rxv04) => <False>
(similar: sxv03 rxv05) => <False>
(similar: sxv03 sxv01) => <False>
(similar: sxv03 sxv02) => <True>
(similar: sxv03 sxv03) => <True>
(similar: sxv03 sxv04) => <False>
(similar: sxv03 sxv05) => <False>
(similar: sxv03 sxv06) => <False>
(similar: sxv03 sxv07) => <False>
(similar: sxv03 bxv01) => <False>
(similar: sxv03 bxv02) => <False>
Testing sxv03
(< sxv03 xv01) => <False>
(< sxv03 xv02) => <False>
(< sxv03 xv03) => <False>
(< sxv03 xv04) => <False>
(< sxv03 xv05) => <False>
(< sxv03 xv06) => <False>
(< sxv03 xv07) => <False>
(< sxv03 xv08) => <True>
(< sxv03 xv09) => <True>
(< sxv03 cxv01) => <False>
(< sxv03 cxv02) => <True>
(< sxv03 cxv03) => <False>
(< sxv03 mxv01) => <False>
(< sxv03 mxv02) => <False>
(< sxv03 mxv03) => <True>
(< sxv03 mxv04) => <False>
(< sxv03 rxv01) => <False>
(< sxv03 rxv02) => <False>
(< sxv03 rxv03) => <True>
(< sxv03 rxv04) => <True>
(< sxv03 rxv05) => <False>
(< sxv03 sxv01) => <False>
(< sxv03 sxv02) => <False>
(< sxv03 sxv03) => <False>
(< sxv03 sxv04) => <False>
(< sxv03 sxv05) => <False>
(< sxv03 sxv06) => <False>
(< sxv03 sxv07) => <False>
(< sxv03 bxv01) => <False>
(< sxv03 bxv02) => <False>
Testing sxv03
(fromIndex:toIndex: sxv03 0 0) => << 1 >>
(fromIndex:toIndex: sxv03 0 1) => << 1 2 >>
(fromIndex:toIndex: sxv03 0 2) => << 1 2 3 >>
(fromIndex:toIndex: sxv03 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: sxv03 1 1) => << 2 >>
(fromIndex:toIndex: sxv03 1 3) => << 2 3 4 >>
(fromIndex:toIndex: sxv03 -1 -1) => << 6 >>
(fromIndex:toIndex: sxv03 -2 -1) => << 5 6 >>
(fromIndex:toIndex: sxv03 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: sxv03 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: sxv03 -2 -2) => << 5 >>
(fromIndex:toIndex: sxv03 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: sxv03 -1 0) => << 6 1 >>
(fromIndex:toIndex: sxv03 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: sxv03 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: sxv03 -4 3) => << 3 4 >>
(fromIndex:toIndex: sxv03 -5 4) => << 2 3 4 5 >>
Testing sxv04
(at:ifAbsent: sxv04 0 {nil}) => 1
(at:ifAbsent: sxv04 1 {nil}) => 1
(at:ifAbsent: sxv04 2 {nil}) => 2
(at:ifAbsent: sxv04 3 {nil}) => 2
(at:ifAbsent: sxv04 4 {nil}) => 3
(at:ifAbsent: sxv04 5 {nil}) => 3
(at:ifAbsent: sxv04 7 {nil}) => nil
(at:ifAbsent: sxv04 8 {nil}) => nil
(at:ifAbsent: sxv04 9 {nil}) => nil
(at:ifAbsent: sxv04 1073741823 {nil}) => nil
(at:ifAbsent: sxv04 1073741824 {nil}) => nil
(at:ifAbsent: sxv04 1073741825 {nil}) => nil
(at:ifAbsent: sxv04 -1073741825 {nil}) => nil
(at:ifAbsent: sxv04 -1073741824 {nil}) => nil
(at:ifAbsent: sxv04 -1073741823 {nil}) => nil
(at:ifAbsent: sxv04 -9 {nil}) => nil
(at:ifAbsent: sxv04 -8 {nil}) => nil
(at:ifAbsent: sxv04 -7 {nil}) => nil
(at:ifAbsent: sxv04 -5 {nil}) => 1
(at:ifAbsent: sxv04 -4 {nil}) => 2
(at:ifAbsent: sxv04 -3 {nil}) => 2
(at:ifAbsent: sxv04 -2 {nil}) => 3
(at:ifAbsent: sxv04 -1 {nil}) => 3
Testing sxv04
(print sxv04) => << 1 1 2 2 3 3 >>
(includes: sxv04 nil) => <False>
(occurrencesOf: sxv04 nil) => 0
(includes: sxv04 <True>) => <False>
(occurrencesOf: sxv04 <True>) => 0
(includes: sxv04 <False>) => <False>
(occurrencesOf: sxv04 <False>) => 0
(includes: sxv04 0) => <False>
(occurrencesOf: sxv04 0) => 0
(includes: sxv04 1) => <True>
(occurrencesOf: sxv04 1) => 2
(includes: sxv04 2) => <True>
(occurrencesOf: sxv04 2) => 2
(includes: sxv04 42) => <False>
(occurrencesOf: sxv04 42) => 0
(detect:ifNone: sxv04 negative) => nil
(detect:ifNone: sxv04 nonnegative) => 1
(detect:ifNone: sxv04 strictlyPositive) => 1
Testing sxv04
(sum sxv04) => 12
Testing sxv04
(product sxv04) => 36
Testing sxv04
(min sxv04) => 1
Testing sxv04
(max sxv04) => 3
Testing sxv04
(similar: sxv04 nil) => <False>
(similar: sxv04 <True>) => <False>
(similar: sxv04 <False>) => <False>
(similar: sxv04 0) => <False>
(similar: sxv04 1) => <False>
(similar: sxv04 2) => <False>
(similar: sxv04 42) => <False>
(similar: sxv04 xv01) => <False>
(similar: sxv04 xv02) => <False>
(similar: sxv04 xv03) => <False>
(similar: sxv04 xv04) => <False>
(similar: sxv04 xv05) => <False>
(similar: sxv04 xv06) => <False>
(similar: sxv04 xv07) => <False>
(similar: sxv04 xv08) => <False>
(similar: sxv04 xv09) => <False>
(similar: sxv04 xv12) => <False>
(similar: sxv04 xv13) => <False>
(similar: sxv04 cxv01) => <False>
(similar: sxv04 cxv02) => <False>
(similar: sxv04 cxv03) => <False>
(similar: sxv04 mxv01) => <False>
(similar: sxv04 mxv02) => <False>
(similar: sxv04 mxv03) => <False>
(similar: sxv04 mxv04) => <False>
(similar: sxv04 rxv01) => <False>
(similar: sxv04 rxv02) => <False>
(similar: sxv04 rxv03) => <False>
(similar: sxv04 rxv04) => <False>
(similar: sxv04 rxv05) => <False>
(similar: sxv04 sxv01) => <False>
(similar: sxv04 sxv02) => <False>
(similar: sxv04 sxv03) => <False>
(similar: sxv04 sxv04) => <True>
(similar: sxv04 sxv05) => <False>
(similar: sxv04 sxv06) => <False>
(similar: sxv04 sxv07) => <False>
(similar: sxv04 bxv01) => <False>
(similar: sxv04 bxv02) => <False>
Testing sxv04
(< sxv04 xv01) => <False>
(< sxv04 xv02) => <False>
(< sxv04 xv03) => <True>
(< sxv04 xv04) => <True>
(< sxv04 xv05) => <False>
(< sxv04 xv06) => <False>
(< sxv04 xv07) => <False>
(< sxv04 xv08) => <True>
(< sxv04 xv09) => <True>
(< sxv04 cxv01) => <False>
(< sxv04 cxv02) => <True>
(< sxv04 cxv03) => <False>
(< sxv04 mxv01) => <False>
(< sxv04 mxv02) => <False>
(< sxv04 mxv03) => <True>
(< sxv04 mxv04) => <False>
(< sxv04 rxv01) => <False>
(< sxv04 rxv02) => <False>
(< sxv04 rxv03) => <True>
(< sxv04 rxv04) => <True>
(< sxv04 rxv05) => <False>
(< sxv04 sxv01) => <False>
(< sxv04 sxv02) => <True>
(< sxv04 sxv03) => <True>
(< sxv04 sxv04) => <False>
(< sxv04 sxv05) => <False>
(< sxv04 sxv06) => <False>
(< sxv04 sxv07) => <False>
(< sxv04 bxv01) => <False>
(< sxv04 bxv02) => <False>
Testing sxv04
(fromIndex:toIndex: sxv04 0 0) => << 1 >>
(fromIndex:toIndex: sxv04 0 1) => << 1 1 >>
(fromIndex:toIndex: sxv04 0 2) => << 1 1 2 >>
(fromIndex:toIndex: sxv04 0 4) => << 1 1 2 2 3 >>
(fromIndex:toIndex: sxv04 1 1) => << 1 >>
(fromIndex:toIndex: sxv04 1 3) => << 1 2 2 >>
(fromIndex:toIndex: sxv04 -1 -1) => << 3 >>
(fromIndex:toIndex: sxv04 -2 -1) => << 3 3 >>
(fromIndex:toIndex: sxv04 -3 -1) => << 2 3 3 >>
(fromIndex:toIndex: sxv04 -5 -1) => << 1 2 2 3 3 >>
(fromIndex:toIndex: sxv04 -2 -2) => << 3 >>
(fromIndex:toIndex: sxv04 -4 -2) => << 2 2 3 >>
(fromIndex:toIndex: sxv04 -1 0) => << 3 1 >>
(fromIndex:toIndex: sxv04 -2 1) => << 3 3 1 1 >>
(fromIndex:toIndex: sxv04 -3 2) => << 2 3 3 1 1 2 >>
(fromIndex:toIndex: sxv04 -4 3) => << 2 2 >>
(fromIndex:toIndex: sxv04 -5 4) => << 1 2 2 3 >>
Testing sxv05
(at:ifAbsent: sxv05 0 {nil}) => 1
(at:ifAbsent: sxv05 1 {nil}) => -6
(at:ifAbsent: sxv05 2 {nil}) => 2
(at:ifAbsent: sxv05 3 {nil}) => -5
(at:ifAbsent: sxv05 4 {nil}) => 3
(at:ifAbsent: sxv05 5 {nil}) => -4
(at:ifAbsent: sxv05 7 {nil}) => -2
(at:ifAbsent: sxv05 8 {nil}) => -1
(at:ifAbsent: sxv05 9 {nil}) => nil
(at:ifAbsent: sxv05 1073741823 {nil}) => nil
(at:ifAbsent: sxv05 1073741824 {nil}) => nil
(at:ifAbsent: sxv05 1073741825 {nil}) => nil
(at:ifAbsent: sxv05 -1073741825 {nil}) => nil
(at:ifAbsent: sxv05 -1073741824 {nil}) => nil
(at:ifAbsent: sxv05 -1073741823 {nil}) => nil
(at:ifAbsent: sxv05 -9 {nil}) => 1
(at:ifAbsent: sxv05 -8 {nil}) => -6
(at:ifAbsent: sxv05 -7 {nil}) => 2
(at:ifAbsent: sxv05 -5 {nil}) => 3
(at:ifAbsent: sxv05 -4 {nil}) => -4
(at:ifAbsent: sxv05 -3 {nil}) => -3
(at:ifAbsent: sxv05 -2 {nil}) => -2
(at:ifAbsent: sxv05 -1 {nil}) => -1
Testing sxv05
(print sxv05) => << 1 -6 2 -5 3 -4 -3 -2 -1 >>
(includes: sxv05 nil) => <False>
(occurrencesOf: sxv05 nil) => 0
(includes: sxv05 <True>) => <False>
(occurrencesOf: sxv05 <True>) => 0
(includes: sxv05 <False>) => <False>
(occurrencesOf: sxv05 <False>) => 0
(includes: sxv05 0) => <False>
(occurrencesOf: sxv05 0) => 0
(includes: sxv05 1) => <True>
(occurrencesOf: sxv05 1) => 1
(includes: sxv05 2) => <True>
(occurrencesOf: sxv05 2) => 1
(includes: sxv05 42) => <False>
(occurrencesOf: sxv05 42) => 0
(detect:ifNone: sxv05 negative) => -6
(detect:ifNone: sxv05 nonnegative) => 1
(detect:ifNone: sxv05 strictlyPositive) => 1
Testing sxv05
(sum sxv05) => -15
Testing sxv05
(product sxv05) => 4320
Testing sxv05
(min sxv05) => -6
Testing sxv05
(max sxv05) => 3
Testing sxv05
(similar: sxv05 nil) => <False>
(similar: sxv05 <True>) => <False>
(similar: sxv05 <False>) => <False>
(similar: sxv05 0) => <False>
(similar: sxv05 1) => <False>
(similar: sxv05 2) => <False>
(similar: sxv05 42) => <False>
(similar: sxv05 xv01) => <False>
(similar: sxv05 xv02) => <False>
(similar: sxv05 xv03) => <False>
(similar: sxv05 xv04) => <False>
(similar: sxv05 xv05) => <False>
(similar: sxv05 xv06) => <False>
(similar: sxv05 xv07) => <False>
(similar: sxv05 xv08) => <False>
(similar: sxv05 xv09) => <False>
(similar: sxv05 xv12) => <False>
(similar: sxv05 xv13) => <False>
(similar: sxv05 cxv01) => <False>
(similar: sxv05 cxv02) => <False>
(similar: sxv05 cxv03) => <False>
(similar: sxv05 mxv01) => <False>
(similar: sxv05 mxv02) => <False>
(similar: sxv05 mxv03) => <False>
(similar: sxv05 mxv04) => <False>
(similar: sxv05 rxv01) => <False>
(similar: sxv05 rxv02) => <False>
(similar: sxv05 rxv03) => <False>
(similar: sxv05 rxv04) => <False>
(similar: sxv05 rxv05) => <False>
(similar: sxv05 sxv01) => <False>
(similar: sxv05 sxv02) => <False>
(similar: sxv05 sxv03) => <False>
(similar: sxv05 sxv04) => <False>
(similar: sxv05 sxv05) => <True>
(similar: sxv05 sxv06) => <False>
(similar: sxv05 sxv07) => <False>
(similar: sxv05 bxv01) => <False>
(similar: sxv05 bxv02) => <False>
Testing sxv05
(< sxv05 xv01) => <False>
(< sxv05 xv02) => <False>
(< sxv05 xv03) => <True>
(< sxv05 xv04) => <True>
(< sxv05 xv05) => <False>
(< sxv05 xv06) => <False>
(< sxv05 xv07) => <False>
(< sxv05 xv08) => <True>
(< sxv05 xv09) => <True>
(< sxv05 cxv01) => <False>
(< sxv05 cxv02) => <True>
(< sxv05 cxv03) => <False>
(< sxv05 mxv01) => <False>
(< sxv05 mxv02) => <False>
(< sxv05 mxv03) => <True>
(< sxv05 mxv04) => <False>
(< sxv05 rxv01) => <False>
(< sxv05 rxv02) => <False>
(< sxv05 rxv03) => <True>
(< sxv05 rxv04) => <True>
(< sxv05 rxv05) => <False>
(< sxv05 sxv01) => <False>
(< sxv05 sxv02) => <True>
(< sxv05 sxv03) => <True>
(< sxv05 sxv04) => <True>
(< sxv05 sxv05) => <False>
(< sxv05 sxv06) => <False>
(< sxv05 sxv07) => <False>
(< sxv05 bxv01) => <False>
(< sxv05 bxv02) => <False>
Testing sxv05
(fromIndex:toIndex: sxv05 0 0) => << 1 >>
(fromIndex:toIndex: sxv05 0 1) => << 1 -6 >>
(fromIndex:toIndex: sxv05 0 2) => << 1 -6 2 >>
(fromIndex:toIndex: sxv05 0 4) => << 1 -6 2 -5 3 >>
(fromIndex:toIndex: sxv05 1 1) => << -6 >>
(fromIndex:toIndex: sxv05 1 3) => << -6 2 -5 >>
(fromIndex:toIndex: sxv05 -1 -1) => << -1 >>
(fromIndex:toIndex: sxv05 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: sxv05 -3 -1) => << -3 -2 -1 >>
(fromIndex:toIndex: sxv05 -5 -1) => << 3 -4 -3 -2 -1 >>
(fromIndex:toIndex: sxv05 -2 -2) => << -2 >>
(fromIndex:toIndex: sxv05 -4 -2) => << -4 -3 -2 >>
(fromIndex:toIndex: sxv05 -1 0) => << -1 1 >>
(fromIndex:toIndex: sxv05 -2 1) => << -2 -1 1 -6 >>
(fromIndex:toIndex: sxv05 -3 2) => << -3 -2 -1 1 -6 2 >>
(fromIndex:toIndex: sxv05 -4 3) => << -4 -3 -2 -1 1 -6 2 -5 >>
(fromIndex:toIndex: sxv05 -5 4) => << 3 >>
Testing sxv06
(at:ifAbsent: sxv06 0 {nil}) => -6
(at:ifAbsent: sxv06 1 {nil}) => 1
(at:ifAbsent: sxv06 2 {nil}) => -5
(at:ifAbsent: sxv06 3 {nil}) => 2
(at:ifAbsent: sxv06 4 {nil}) => -4
(at:ifAbsent: sxv06 5 {nil}) => 3
(at:ifAbsent: sxv06 7 {nil}) => -2
(at:ifAbsent: sxv06 8 {nil}) => -1
(at:ifAbsent: sxv06 9 {nil}) => nil
(at:ifAbsent: sxv06 1073741823 {nil}) => nil
(at:ifAbsent: sxv06 1073741824 {nil}) => nil
(at:ifAbsent: sxv06 1073741825 {nil}) => nil
(at:ifAbsent: sxv06 -1073741825 {nil}) => nil
(at:ifAbsent: sxv06 -1073741824 {nil}) => nil
(at:ifAbsent: sxv06 -1073741823 {nil}) => nil
(at:ifAbsent: sxv06 -9 {nil}) => -6
(at:ifAbsent: sxv06 -8 {nil}) => 1
(at:ifAbsent: sxv06 -7 {nil}) => -5
(at:ifAbsent: sxv06 -5 {nil}) => -4
(at:ifAbsent: sxv06 -4 {nil}) => 3
(at:ifAbsent: sxv06 -3 {nil}) => -3
(at:ifAbsent: sxv06 -2 {nil}) => -2
(at:ifAbsent: sxv06 -1 {nil}) => -1
Testing sxv06
(print sxv06) => << -6 1 -5 2 -4 3 -3 -2 -1 >>
(includes: sxv06 nil) => <False>
(occurrencesOf: sxv06 nil) => 0
(includes: sxv06 <True>) => <False>
(occurrencesOf: sxv06 <True>) => 0
(includes: sxv06 <False>) => <False>
(occurrencesOf: sxv06 <False>) => 0
(includes: sxv06 0) => <False>
(occurrencesOf: sxv06 0) => 0
(includes: sxv06 1) => <True>
(occurrencesOf: sxv06 1) => 1
(includes: sxv06 2) => <True>
(occurrencesOf: sxv06 2) => 1
(includes: sxv06 42) => <False>
(occurrencesOf: sxv06 42) => 0
(detect:ifNone: sxv06 negative) => -6
(detect:ifNone: sxv06 nonnegative) => 1
(detect:ifNone: sxv06 strictlyPositive) => 1
Testing sxv06
(sum sxv06) => -15
Testing sxv06
(product sxv06) => 4320
Testing sxv06
(min sxv06) => -6
Testing sxv06
(max sxv06) => 3
Testing sxv06
(similar: sxv06 nil) => <False>
(similar: sxv06 <True>) => <False>
(similar: sxv06 <False>) => <False>
(similar: sxv06 0) => <False>
(similar: sxv06 1) => <False>
(similar: sxv06 2) => <False>
(similar: sxv06 42) => <False>
(similar: sxv06 xv01) => <False>
(similar: sxv06 xv02) => <False>
(similar: sxv06 xv03) => <False>
(similar: sxv06 xv04) => <False>
(similar: sxv06 xv05) => <False>
(similar: sxv06 xv06) => <False>
(similar: sxv06 xv07) => <False>
(similar: sxv06 xv08) => <False>
(similar: sxv06 xv09) => <False>
(similar: sxv06 xv12) => <False>
(similar: sxv06 xv13) => <False>
(similar: sxv06 cxv01) => <False>
(similar: sxv06 cxv02) => <False>
(similar: sxv06 cxv03) => <False>
(similar: sxv06 mxv01) => <False>
(similar: sxv06 mxv02) => <False>
(similar: sxv06 mxv03) => <False>
(similar: sxv06 mxv04) => <False>
(similar: sxv06 rxv01) => <False>
(similar: sxv06 rxv02) => <False>
(similar: sxv06 rxv03) => <False>
(similar: sxv06 rxv04) => <False>
(similar: sxv06 rxv05) => <False>
(similar: sxv06 sxv01) => <False>
(similar: sxv06 sxv02) => <False>
(similar: sxv06 sxv03) => <False>
(similar: sxv06 sxv04) => <False>
(similar: sxv06 sxv05) => <False>
(similar: sxv06 sxv06) => <True>
(similar: sxv06 sxv07) => <False>
(similar: sxv06 bxv01) => <False>
(similar: sxv06 bxv02) => <False>
Testing sxv06
(< sxv06 xv01) => <False>
(< sxv06 xv02) => <True>
(< sxv06 xv03) => <True>
(< sxv06 xv04) => <True>
(< sxv06 xv05) => <False>
(< sxv06 xv06) => <False>
(< sxv06 xv07) => <False>
(< sxv06 xv08) => <True>
(< sxv06 xv09) => <True>
(< sxv06 cxv01) => <False>
(< sxv06 cxv02) => <True>
(< sxv06 cxv03) => <False>
(< sxv06 mxv01) => <False>
(< sxv06 mxv02) => <False>
(< sxv06 mxv03) => <True>
(< sxv06 mxv04) => <False>
(< sxv06 rxv01) => <False>
(< sxv06 rxv02) => <True>
(< sxv06 rxv03) => <True>
(< sxv06 rxv04) => <True>
(< sxv06 rxv05) => <True>
(< sxv06 sxv01) => <False>
(< sxv06 sxv02) => <True>
(< sxv06 sxv03) => <True>
(< sxv06 sxv04) => <True>
(< sxv06 sxv05) => <True>
(< sxv06 sxv06) => <False>
(< sxv06 sxv07) => <False>
(< sxv06 bxv01) => <True>
(< sxv06 bxv02) => <True>
Testing sxv06
(fromIndex:toIndex: sxv06 0 0) => << -6 >>
(fromIndex:toIndex: sxv06 0 1) => << -6 1 >>
(fromIndex:toIndex: sxv06 0 2) => << -6 1 -5 >>
(fromIndex:toIndex: sxv06 0 4) => << -6 1 -5 2 -4 >>
(fromIndex:toIndex: sxv06 1 1) => << 1 >>
(fromIndex:toIndex: sxv06 1 3) => << 1 -5 2 >>
(fromIndex:toIndex: sxv06 -1 -1) => << -1 >>
(fromIndex:toIndex: sxv06 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: sxv06 -3 -1) => << -3 -2 -1 >>
(fromIndex:toIndex: sxv06 -5 -1) => << -4 3 -3 -2 -1 >>
(fromIndex:toIndex: sxv06 -2 -2) => << -2 >>
(fromIndex:toIndex: sxv06 -4 -2) => << 3 -3 -2 >>
(fromIndex:toIndex: sxv06 -1 0) => << -1 -6 >>
(fromIndex:toIndex: sxv06 -2 1) => << -2 -1 -6 1 >>
(fromIndex:toIndex: sxv06 -3 2) => << -3 -2 -1 -6 1 -5 >>
(fromIndex:toIndex: sxv06 -4 3) => << 3 -3 -2 -1 -6 1 -5 2 >>
(fromIndex:toIndex: sxv06 -5 4) => << -4 >>
Testing sxv07
(at:ifAbsent: sxv07 0 {nil}) => -6
(at:ifAbsent: sxv07 1 {nil}) => -6
(at:ifAbsent: sxv07 2 {nil}) => -5
(at:ifAbsent: sxv07 3 {nil}) => -5
(at:ifAbsent: sxv07 4 {nil}) => -4
(at:ifAbsent: sxv07 5 {nil}) => -4
(at:ifAbsent: sxv07 7 {nil}) => -3
(at:ifAbsent: sxv07 8 {nil}) => -2
(at:ifAbsent: sxv07 9 {nil}) => -2
(at:ifAbsent: sxv07 1073741823 {nil}) => nil
(at:ifAbsent: sxv07 1073741824 {nil}) => nil
(at:ifAbsent: sxv07 1073741825 {nil}) => nil
(at:ifAbsent: sxv07 -1073741825 {nil}) => nil
(at:ifAbsent: sxv07 -1073741824 {nil}) => nil
(at:ifAbsent: sxv07 -1073741823 {nil}) => nil
(at:ifAbsent: sxv07 -9 {nil}) => -5
(at:ifAbsent: sxv07 -8 {nil}) => -4
(at:ifAbsent: sxv07 -7 {nil}) => -4
(at:ifAbsent: sxv07 -5 {nil}) => -3
(at:ifAbsent: sxv07 -4 {nil}) => -2
(at:ifAbsent: sxv07 -3 {nil}) => -2
(at:ifAbsent: sxv07 -2 {nil}) => -1
(at:ifAbsent: sxv07 -1 {nil}) => -1
Testing sxv07
(print sxv07) => << -6 -6 -5 -5 -4 -4 -3 -3 -2 -2 -1 -1 >>
(includes: sxv07 nil) => <False>
(occurrencesOf: sxv07 nil) => 0
(includes: sxv07 <True>) => <False>
(occurrencesOf: sxv07 <True>) => 0
(includes: sxv07 <False>) => <False>
(occurrencesOf: sxv07 <False>) => 0
(includes: sxv07 0) => <False>
(occurrencesOf: sxv07 0) => 0
(includes: sxv07 1) => <False>
(occurrencesOf: sxv07 1) => 0
(includes: sxv07 2) => <False>
(occurrencesOf: sxv07 2) => 0
(includes: sxv07 42) => <False>
(occurrencesOf: sxv07 42) => 0
(detect:ifNone: sxv07 negative) => -6
(detect:ifNone: sxv07 nonnegative) => nil
(detect:ifNone: sxv07 strictlyPositive) => nil
Testing sxv07
(sum sxv07) => -42
Testing sxv07
(product sxv07) => 518400
Testing sxv07
(min sxv07) => -6
Testing sxv07
(max sxv07) => -1
Testing sxv07
(similar: sxv07 nil) => <False>
(similar: sxv07 <True>) => <False>
(similar: sxv07 <False>) => <False>
(similar: sxv07 0) => <False>
(similar: sxv07 1) => <False>
(similar: sxv07 2) => <False>
(similar: sxv07 42) => <False>
(similar: sxv07 xv01) => <False>
(similar: sxv07 xv02) => <False>
(similar: sxv07 xv03) => <False>
(similar: sxv07 xv04) => <False>
(similar: sxv07 xv05) => <False>
(similar: sxv07 xv06) => <False>
(similar: sxv07 xv07) => <False>
(similar: sxv07 xv08) => <False>
(similar: sxv07 xv09) => <False>
(similar: sxv07 xv12) => <False>
(similar: sxv07 xv13) => <False>
(similar: sxv07 cxv01) => <False>
(similar: sxv07 cxv02) => <False>
(similar: sxv07 cxv03) => <False>
(similar: sxv07 mxv01) => <False>
(similar: sxv07 mxv02) => <False>
(similar: sxv07 mxv03) => <False>
(similar: sxv07 mxv04) => <False>
(similar: sxv07 rxv01) => <False>
(similar: sxv07 rxv02) => <False>
(similar: sxv07 rxv03) => <False>
(similar: sxv07 rxv04) => <False>
(similar: sxv07 rxv05) => <False>
(similar: sxv07 sxv01) => <False>
(similar: sxv07 sxv02) => <False>
(similar: sxv07 sxv03) => <False>
(similar: sxv07 sxv04) => <False>
(similar: sxv07 sxv05) => <False>
(similar: sxv07 sxv06) => <False>
(similar: sxv07 sxv07) => <True>
(similar: sxv07 bxv01) => <False>
(similar: sxv07 bxv02) => <False>
Testing sxv07
(< sxv07 xv01) => <False>
(< sxv07 xv02) => <True>
(< sxv07 xv03) => <True>
(< sxv07 xv04) => <True>
(< sxv07 xv05) => <False>
(< sxv07 xv06) => <True>
(< sxv07 xv07) => <True>
(< sxv07 xv08) => <True>
(< sxv07 xv09) => <True>
(< sxv07 cxv01) => <False>
(< sxv07 cxv02) => <True>
(< sxv07 cxv03) => <True>
(< sxv07 mxv01) => <False>
(< sxv07 mxv02) => <False>
(< sxv07 mxv03) => <True>
(< sxv07 mxv04) => <True>
(< sxv07 rxv01) => <False>
(< sxv07 rxv02) => <True>
(< sxv07 rxv03) => <True>
(< sxv07 rxv04) => <True>
(< sxv07 rxv05) => <True>
(< sxv07 sxv01) => <False>
(< sxv07 sxv02) => <True>
(< sxv07 sxv03) => <True>
(< sxv07 sxv04) => <True>
(< sxv07 sxv05) => <True>
(< sxv07 sxv06) => <True>
(< sxv07 sxv07) => <False>
(< sxv07 bxv01) => <True>
(< sxv07 bxv02) => <True>
Testing sxv07
(fromIndex:toIndex: sxv07 0 0) => << -6 >>
(fromIndex:toIndex: sxv07 0 1) => << -6 -6 >>
(fromIndex:toIndex: sxv07 0 2) => << -6 -6 -5 >>
(fromIndex:toIndex: sxv07 0 4) => << -6 -6 -5 -5 -4 >>
(fromIndex:toIndex: sxv07 1 1) => << -6 >>
(fromIndex:toIndex: sxv07 1 3) => << -6 -5 -5 >>
(fromIndex:toIndex: sxv07 -1 -1) => << -1 >>
(fromIndex:toIndex: sxv07 -2 -1) => << -1 -1 >>
(fromIndex:toIndex: sxv07 -3 -1) => << -2 -1 -1 >>
(fromIndex:toIndex: sxv07 -5 -1) => << -3 -2 -2 -1 -1 >>
(fromIndex:toIndex: sxv07 -2 -2) => << -1 >>
(fromIndex:toIndex: sxv07 -4 -2) => << -2 -2 -1 >>
(fromIndex:toIndex: sxv07 -1 0) => << -1 -6 >>
(fromIndex:toIndex: sxv07 -2 1) => << -1 -1 -6 -6 >>
(fromIndex:toIndex: sxv07 -3 2) => << -2 -1 -1 -6 -6 -5 >>
(fromIndex:toIndex: sxv07 -4 3) => << -2 -2 -1 -1 -6 -6 -5 -5 >>
(fromIndex:toIndex: sxv07 -5 4) => << -3 -2 -2 -1 -1 -6 -6 -5 -5 -4 >>
Testing bxv01
(at:ifAbsent: bxv01 0 {nil}) => 0
(at:ifAbsent: bxv01 1 {nil}) => 1
(at:ifAbsent: bxv01 2 {nil}) => 2
(at:ifAbsent: bxv01 3 {nil}) => 3
(at:ifAbsent: bxv01 4 {nil}) => 4
(at:ifAbsent: bxv01 5 {nil}) => 5
(at:ifAbsent: bxv01 7 {nil}) => 7
(at:ifAbsent: bxv01 8 {nil}) => 8
(at:ifAbsent: bxv01 9 {nil}) => 9
(at:ifAbsent: bxv01 1073741823 {nil}) => nil
(at:ifAbsent: bxv01 1073741824 {nil}) => nil
(at:ifAbsent: bxv01 1073741825 {nil}) => nil
(at:ifAbsent: bxv01 -1073741825 {nil}) => nil
(at:ifAbsent: bxv01 -1073741824 {nil}) => nil
(at:ifAbsent: bxv01 -1073741823 {nil}) => nil
(at:ifAbsent: bxv01 -9 {nil}) => 29
(at:ifAbsent: bxv01 -8 {nil}) => 30
(at:ifAbsent: bxv01 -7 {nil}) => 0
(at:ifAbsent: bxv01 -5 {nil}) => 2
(at:ifAbsent: bxv01 -4 {nil}) => 3
(at:ifAbsent: bxv01 -3 {nil}) => 4
(at:ifAbsent: bxv01 -2 {nil}) => 5
(at:ifAbsent: bxv01 -1 {nil}) => 6
Testing bxv01
(includes: bxv01 nil) => <False>
(occurrencesOf: bxv01 nil) => 0
(includes: bxv01 <True>) => <False>
(occurrencesOf: bxv01 <True>) => 0
(includes: bxv01 <False>) => <False>
(occurrencesOf: bxv01 <False>) => 0
(includes: bxv01 0) => <True>
(occurrencesOf: bxv01 0) => 4
(includes: bxv01 1) => <True>
(occurrencesOf: bxv01 1) => 4
(includes: bxv01 2) => <True>
(occurrencesOf: bxv01 2) => 4
(includes: bxv01 42) => <False>
(occurrencesOf: bxv01 42) => 0
(detect:ifNone: bxv01 negative) => nil
(detect:ifNone: bxv01 nonnegative) => 0
(detect:ifNone: bxv01 strictlyPositive) => 1
Testing bxv01
(sum bxv01) => 1416
Testing bxv01
Testing bxv01
(min bxv01) => 0
Testing bxv01
(max bxv01) => 30
Testing bxv01
(similar: bxv01 nil) => <False>
(similar: bxv01 <True>) => <False>
(similar: bxv01 <False>) => <False>
(similar: bxv01 0) => <False>
(similar: bxv01 1) => <False>
(similar: bxv01 2) => <False>
(similar: bxv01 42) => <False>
(similar: bxv01 xv01) => <False>
(similar: bxv01 xv02) => <False>
(similar: bxv01 xv03) => <False>
(similar: bxv01 xv04) => <False>
(similar: bxv01 xv05) => <False>
(similar: bxv01 xv06) => <False>
(similar: bxv01 xv07) => <False>
(similar: bxv01 xv08) => <False>
(similar: bxv01 xv09) => <False>
(similar: bxv01 xv12) => <False>
(similar: bxv01 xv13) => <False>
(similar: bxv01 cxv01) => <False>
(similar: bxv01 cxv02) => <False>
(similar: bxv01 cxv03) => <False>
(similar: bxv01 mxv01) => <False>
(similar: bxv01 mxv02) => <False>
(similar: bxv01 mxv03) => <False>
(similar: bxv01 mxv04) => <False>
(similar: bxv01 rxv01) => <False>
(similar: bxv01 rxv02) => <False>
(similar: bxv01 rxv03) => <False>
(similar: bxv01 rxv04) => <False>
(similar: bxv01 rxv05) => <False>
(similar: bxv01 sxv01) => <False>
(similar: bxv01 sxv02) => <False>
(similar: bxv01 sxv03) => <False>
(similar: bxv01 sxv04) => <False>
(similar: bxv01 sxv05) => <False>
(similar: bxv01 sxv06) => <False>
(similar: bxv01 sxv07) => <False>
(similar: bxv01 bxv01) => <True>
(similar: bxv01 bxv02) => <False>
Testing bxv01
(< bxv01 xv01) => <False>
(< bxv01 xv02) => <True>
(< bxv01 xv03) => <True>
(< bxv01 xv04) => <True>
(< bxv01 xv05) => <False>
(< bxv01 xv06) => <False>
(< bxv01 xv07) => <False>
(< bxv01 xv08) => <True>
(< bxv01 xv09) => <True>
(< bxv01 cxv01) => <False>
(< bxv01 cxv02) => <True>
(< bxv01 cxv03) => <False>
(< bxv01 mxv01) => <False>
(< bxv01 mxv02) => <False>
(< bxv01 mxv03) => <True>
(< bxv01 mxv04) => <False>
(< bxv01 rxv01) => <False>
(< bxv01 rxv02) => <True>
(< bxv01 rxv03) => <True>
(< bxv01 rxv04) => <True>
(< bxv01 rxv05) => <False>
(< bxv01 sxv01) => <False>
(< bxv01 sxv02) => <True>
(< bxv01 sxv03) => <True>
(< bxv01 sxv04) => <True>
(< bxv01 sxv05) => <True>
(< bxv01 sxv06) => <False>
(< bxv01 sxv07) => <False>
(< bxv01 bxv01) => <False>
(< bxv01 bxv02) => <True>
Testing bxv01
(fromIndex:toIndex: bxv01 0 0) => << 0 >>
(fromIndex:toIndex: bxv01 0 1) => << 0 1 >>
(fromIndex:toIndex: bxv01 0 2) => << 0 1 2 >>
(fromIndex:toIndex: bxv01 0 4) => << 0 1 2 3 4 >>
(fromIndex:toIndex: bxv01 1 1) => << 1 >>
(fromIndex:toIndex: bxv01 1 3) => << 1 2 3 >>
(fromIndex:toIndex: bxv01 -1 -1) => << 6 >>
(fromIndex:toIndex: bxv01 -2 -1) => << 5 6 >>
(fromIndex:toIndex: bxv01 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: bxv01 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: bxv01 -2 -2) => << 5 >>
(fromIndex:toIndex: bxv01 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: bxv01 -1 0) => << 6 0 >>
(fromIndex:toIndex: bxv01 -2 1) => << 5 6 0 1 >>
(fromIndex:toIndex: bxv01 -3 2) => << 4 5 6 0 1 2 >>
(fromIndex:toIndex: bxv01 -4 3) => << 3 4 5 6 0 1 2 3 >>
(fromIndex:toIndex: bxv01 -5 4) => << 2 3 4 5 6 0 1 2 3 4 >>
Testing bxv02
(at:ifAbsent: bxv02 0 {nil}) => 0
(at:ifAbsent: bxv02 1 {nil}) => 1
(at:ifAbsent: bxv02 2 {nil}) => 4
(at:ifAbsent: bxv02 3 {nil}) => 9
(at:ifAbsent: bxv02 4 {nil}) => 16
(at:ifAbsent: bxv02 5 {nil}) => 25
(at:ifAbsent: bxv02 7 {nil}) => 18
(at:ifAbsent: bxv02 8 {nil}) => 2
(at:ifAbsent: bxv02 9 {nil}) => 19
(at:ifAbsent: bxv02 1073741823 {nil}) => nil
(at:ifAbsent: bxv02 1073741824 {nil}) => nil
(at:ifAbsent: bxv02 1073741825 {nil}) => nil
(at:ifAbsent: bxv02 -1073741825 {nil}) => nil
(at:ifAbsent: bxv02 -1073741824 {nil}) => nil
(at:ifAbsent: bxv02 -1073741823 {nil}) => nil
(at:ifAbsent: bxv02 -9 {nil}) => 4
(at:ifAbsent: bxv02 -8 {nil}) => 1
(at:ifAbsent: bxv02 -7 {nil}) => 0
(at:ifAbsent: bxv02 -5 {nil}) => 4
(at:ifAbsent: bxv02 -4 {nil}) => 9
(at:ifAbsent: bxv02 -3 {nil}) => 16
(at:ifAbsent: bxv02 -2 {nil}) => 25
(at:ifAbsent: bxv02 -1 {nil}) => 5
Testing bxv02
(includes: bxv02 nil) => <False>
(occurrencesOf: bxv02 nil) => 0
(includes: bxv02 <True>) => <False>
(occurrencesOf: bxv02 <True>) => 0
(includes: bxv02 <False>) => <False>
(occurrencesOf: bxv02 <False>) => 0
(includes: bxv02 0) => <True>
(occurrencesOf: bxv02 0) => 4
(includes: bxv02 1) => <True>
(occurrencesOf: bxv02 1) => 7
(includes: bxv02 2) => <True>
(occurrencesOf: bxv02 2) => 6
(includes: bxv02 42) => <False>
(occurrencesOf: bxv02 42) => 0
(detect:ifNone: bxv02 negative) => nil
(detect:ifNone: bxv02 nonnegative) => 0
(detect:ifNone: bxv02 strictlyPositive) => 1
Testing bxv02
(sum bxv02) => 1176
Testing bxv02
Testing bxv02
(min bxv02) => 0
Testing bxv02
(max bxv02) => 28
Testing bxv02
(similar: bxv02 nil) => <False>
(similar: bxv02 <True>) => <False>
(similar: bxv02 <False>) => <False>
(similar: bxv02 0) => <False>
(similar: bxv02 1) => <False>
(similar: bxv02 2) => <False>
(similar: bxv02 42) => <False>
(similar: bxv02 xv01) => <False>
(similar: bxv02 xv02) => <False>
(similar: bxv02 xv03) => <False>
(similar: bxv02 xv04) => <False>
(similar: bxv02 xv05) => <False>
(similar: bxv02 xv06) => <False>
(similar: bxv02 xv07) => <False>
(similar: bxv02 xv08) => <False>
(similar: bxv02 xv09) => <False>
(similar: bxv02 xv12) => <False>
(similar: bxv02 xv13) => <False>
(similar: bxv02 cxv01) => <False>
(similar: bxv02 cxv02) => <False>
(similar: bxv02 cxv03) => <False>
(similar: bxv02 mxv01) => <False>
(similar: bxv02 mxv02) => <False>
(similar: bxv02 mxv03) => <False>
(similar: bxv02 mxv04) => <False>
(similar: bxv02 rxv01) => <False>
(similar: bxv02 rxv02) => <False>
(similar: bxv02 rxv03) => <False>
(similar: bxv02 rxv04) => <False>
(similar: bxv02 rxv05) => <False>
(similar: bxv02 sxv01) => <False>
(similar: bxv02 sxv02) => <False>
(similar: bxv02 sxv03) => <False>
(similar: bxv02 sxv04) => <False>
(similar: bxv02 sxv05) => <False>
(similar: bxv02 sxv06) => <False>
(similar: bxv02 sxv07) => <False>
(similar: bxv02 bxv01) => <False>
(similar: bxv02 bxv02) => <True>
Testing bxv02
(< bxv02 xv01) => <False>
(< bxv02 xv02) => <True>
(< bxv02 xv03) => <True>
(< bxv02 xv04) => <True>
(< bxv02 xv05) => <False>
(< bxv02 xv06) => <False>
(< bxv02 xv07) => <False>
(< bxv02 xv08) => <True>
(< bxv02 xv09) => <True>
(< bxv02 cxv01) => <False>
(< bxv02 cxv02) => <True>
(< bxv02 cxv03) => <False>
(< bxv02 mxv01) => <False>
(< bxv02 mxv02) => <False>
(< bxv02 mxv03) => <True>
(< bxv02 mxv04) => <False>
(< bxv02 rxv01) => <False>
(< bxv02 rxv02) => <True>
(< bxv02 rxv03) => <True>
(< bxv02 rxv04) => <True>
(< bxv02 rxv05) => <False>
(< bxv02 sxv01) => <False>
(< bxv02 sxv02) => <True>
(< bxv02 sxv03) => <True>
(< bxv02 sxv04) => <True>
(< bxv02 sxv05) => <True>
(< bxv02 sxv06) => <False>
(< bxv02 sxv07) => <False>
(< bxv02 bxv01) => <False>
(< bxv02 bxv02) => <False>
Testing bxv02
(fromIndex:toIndex: bxv02 0 0) => << 0 >>
(fromIndex:toIndex: bxv02 0 1) => << 0 1 >>
(fromIndex:toIndex: bxv02 0 2) => << 0 1 4 >>
(fromIndex:toIndex: bxv02 0 4) => << 0 1 4 9 16 >>
(fromIndex:toIndex: bxv02 1 1) => << 1 >>
(fromIndex:toIndex: bxv02 1 3) => << 1 4 9 >>
(fromIndex:toIndex: bxv02 -1 -1) => << 5 >>
(fromIndex:toIndex: bxv02 -2 -1) => << 25 5 >>
(fromIndex:toIndex: bxv02 -3 -1) => << 16 25 5 >>
(fromIndex:toIndex: bxv02 -5 -1) => << 4 9 16 25 5 >>
(fromIndex:toIndex: bxv02 -2 -2) => << 25 >>
(fromIndex:toIndex: bxv02 -4 -2) => << 9 16 25 >>
(fromIndex:toIndex: bxv02 -1 0) => << 5 0 >>
(fromIndex:toIndex: bxv02 -2 1) => << 25 5 0 1 >>
(fromIndex:toIndex: bxv02 -3 2) => << 16 25 5 0 1 4 >>
(fromIndex:toIndex: bxv02 -4 3) => << 9 16 25 5 0 1 4 9 >>
(fromIndex:toIndex: bxv02 -5 4) => << 4 9 16 25 5 0 1 4 9 16 >>
<class XVectorTesterMisc>

##########
Testing xv01
(debug xv01) => ArrayXVector(( 1 2 3 4 5 6 ))
(size xv01) => 6
(print xv01) => << 1 2 3 4 5 6 >>
(at:ifAbsent: xv01 xv01 0) => 1
(at:ifAbsent: xv01 xv01 1) => 2
(at:ifAbsent: xv01 xv01 2) => 3
(at:ifAbsent: xv01 xv01 3) => 4
(at:ifAbsent: xv01 xv01 4) => 5
(at:ifAbsent: xv01 xv01 5) => 6
(at:ifAbsent: xv01 7) => nil
(at:ifAbsent: xv01 8) => nil
(at:ifAbsent: xv01 9) => nil
(at:ifAbsent: xv01 1073741823) => nil
(at:ifAbsent: xv01 1073741824) => nil
(at:ifAbsent: xv01 1073741825) => nil
(at:ifAbsent: xv01 -5) => 2
(at:ifAbsent: xv01 -4) => 3
(at:ifAbsent: xv01 -3) => 4
(at:ifAbsent: xv01 -2) => 5
(at:ifAbsent: xv01 -1) => 6
(at:ifAbsent: xv01 -1073741825) => nil
(at:ifAbsent: xv01 -1073741824) => nil
(at:ifAbsent: xv01 -1073741823) => nil
(at:ifAbsent: xv01 -9) => nil
(at:ifAbsent: xv01 -8) => nil
(at:ifAbsent: xv01 -7) => nil
(allMag xv01) => <True>
(allNum xv01) => <True>
(allInt xv01) => <True>
(allFrac xv01) => <False>
(someFrac xv01) => <False>
(allFloat xv01) => <False>
(someFloat xv01) => <False>
(min xv01) => 1
(max xv01) => 6
(sum xv01) => 21
(product xv01) => 720
(includes: xv01 nil) => <False>
(occurrencesOf: xv01 nil) => 0
(includes: xv01 nil) => <False>
(occurrencesOf: xv01 nil) => 0
(includes: xv01 <True>) => <False>
(occurrencesOf: xv01 <True>) => 0
(includes: xv01 <False>) => <False>
(occurrencesOf: xv01 <False>) => 0
(includes: xv01 0) => <False>
(occurrencesOf: xv01 0) => 0
(includes: xv01 1) => <True>
(occurrencesOf: xv01 1) => 1
(includes: xv01 42) => <False>
(occurrencesOf: xv01 42) => 0
(detect:ifNone: xv01 negative) => nil
(detect:ifNone: xv01 nonnegative) => 1
(detect:ifNone: xv01 strictlyPositive) => 1
(= xv01 xv01) => <True>
(< xv01 xv01) => <False>
(<= xv01 xv01) => <True>
(> xv01 xv01) => <False>
(>= xv01 xv01) => <True>
(= xv01 nil) => <False>
(= xv01 nil) => <False>
(= xv01 <True>) => <False>
(= xv01 <False>) => <False>
(= xv01 0) => <False>
(= xv01 1) => <False>
(= xv01 42) => <False>
(fromIndex:toIndex: xv01 0 0) => << 1 >>
(fromIndex:toIndex: xv01 0 1) => << 1 2 >>
(fromIndex:toIndex: xv01 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv01 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv01 1 1) => << 2 >>
(fromIndex:toIndex: xv01 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv01 -1 -1) => << 6 >>
(fromIndex:toIndex: xv01 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv01 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv01 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv01 -2 -2) => << 5 >>
(fromIndex:toIndex: xv01 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv01 -1 0) => << 6 1 >>
(fromIndex:toIndex: xv01 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: xv01 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: xv01 -4 3) => << 3 4 >>
(fromIndex:toIndex: xv01 -5 4) => << 2 3 4 5 >>

##########
Testing xv02
(debug xv02) => ArrayXVector(( -6 -5 -5 -4 -2 -1 ))
(size xv02) => 6
(print xv02) => << -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv02 xv02 0) => -6
(at:ifAbsent: xv02 xv02 1) => -5
(at:ifAbsent: xv02 xv02 2) => -5
(at:ifAbsent: xv02 xv02 3) => -4
(at:ifAbsent: xv02 xv02 4) => -2
(at:ifAbsent: xv02 xv02 5) => -1
(at:ifAbsent: xv02 7) => nil
(at:ifAbsent: xv02 8) => nil
(at:ifAbsent: xv02 9) => nil
(at:ifAbsent: xv02 1073741823) => nil
(at:ifAbsent: xv02 1073741824) => nil
(at:ifAbsent: xv02 1073741825) => nil
(at:ifAbsent: xv02 -5) => -5
(at:ifAbsent: xv02 -4) => -5
(at:ifAbsent: xv02 -3) => -4
(at:ifAbsent: xv02 -2) => -2
(at:ifAbsent: xv02 -1) => -1
(at:ifAbsent: xv02 -1073741825) => nil
(at:ifAbsent: xv02 -1073741824) => nil
(at:ifAbsent: xv02 -1073741823) => nil
(at:ifAbsent: xv02 -9) => nil
(at:ifAbsent: xv02 -8) => nil
(at:ifAbsent: xv02 -7) => nil
(allMag xv02) => <True>
(allNum xv02) => <True>
(allInt xv02) => <True>
(allFrac xv02) => <False>
(someFrac xv02) => <False>
(allFloat xv02) => <False>
(someFloat xv02) => <False>
(min xv02) => -6
(max xv02) => -1
(sum xv02) => -23
(product xv02) => 1200
(includes: xv02 nil) => <False>
(occurrencesOf: xv02 nil) => 0
(includes: xv02 nil) => <False>
(occurrencesOf: xv02 nil) => 0
(includes: xv02 <True>) => <False>
(occurrencesOf: xv02 <True>) => 0
(includes: xv02 <False>) => <False>
(occurrencesOf: xv02 <False>) => 0
(includes: xv02 0) => <False>
(occurrencesOf: xv02 0) => 0
(includes: xv02 1) => <False>
(occurrencesOf: xv02 1) => 0
(includes: xv02 42) => <False>
(occurrencesOf: xv02 42) => 0
(detect:ifNone: xv02 negative) => -6
(detect:ifNone: xv02 nonnegative) => nil
(detect:ifNone: xv02 strictlyPositive) => nil
(= xv02 xv02) => <True>
(< xv02 xv02) => <False>
(<= xv02 xv02) => <True>
(> xv02 xv02) => <False>
(>= xv02 xv02) => <True>
(= xv02 nil) => <False>
(= xv02 nil) => <False>
(= xv02 <True>) => <False>
(= xv02 <False>) => <False>
(= xv02 0) => <False>
(= xv02 1) => <False>
(= xv02 42) => <False>
(fromIndex:toIndex: xv02 0 0) => << -6 >>
(fromIndex:toIndex: xv02 0 1) => << -6 -5 >>
(fromIndex:toIndex: xv02 0 2) => << -6 -5 -5 >>
(fromIndex:toIndex: xv02 0 4) => << -6 -5 -5 -4 -2 >>
(fromIndex:toIndex: xv02 1 1) => << -5 >>
(fromIndex:toIndex: xv02 1 3) => << -5 -5 -4 >>
(fromIndex:toIndex: xv02 -1 -1) => << -1 >>
(fromIndex:toIndex: xv02 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv02 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv02 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv02 -2 -2) => << -2 >>
(fromIndex:toIndex: xv02 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv02 -1 0) => << -1 -6 >>
(fromIndex:toIndex: xv02 -2 1) => << -2 -1 -6 -5 >>
(fromIndex:toIndex: xv02 -3 2) => << -4 -2 -1 -6 -5 -5 >>
(fromIndex:toIndex: xv02 -4 3) => << -5 -4 >>
(fromIndex:toIndex: xv02 -5 4) => << -5 -5 -4 -2 >>

##########
Testing xv03
(debug xv03) => ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))
(size xv03) => 12
(print xv03) => << 1 2 3 4 5 6 -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv03 xv03 0) => 1
(at:ifAbsent: xv03 xv03 1) => 2
(at:ifAbsent: xv03 xv03 2) => 3
(at:ifAbsent: xv03 xv03 3) => 4
(at:ifAbsent: xv03 xv03 4) => 5
(at:ifAbsent: xv03 xv03 5) => 6
(at:ifAbsent: xv03 7) => -5
(at:ifAbsent: xv03 8) => -5
(at:ifAbsent: xv03 9) => -4
(at:ifAbsent: xv03 1073741823) => nil
(at:ifAbsent: xv03 1073741824) => nil
(at:ifAbsent: xv03 1073741825) => nil
(at:ifAbsent: xv03 -5) => -5
(at:ifAbsent: xv03 -4) => -5
(at:ifAbsent: xv03 -3) => -4
(at:ifAbsent: xv03 -2) => -2
(at:ifAbsent: xv03 -1) => -1
(at:ifAbsent: xv03 -1073741825) => nil
(at:ifAbsent: xv03 -1073741824) => nil
(at:ifAbsent: xv03 -1073741823) => nil
(at:ifAbsent: xv03 -9) => 4
(at:ifAbsent: xv03 -8) => 5
(at:ifAbsent: xv03 -7) => 6
(allMag xv03) => <True>
(allNum xv03) => <True>
(allInt xv03) => <True>
(allFrac xv03) => <False>
(someFrac xv03) => <False>
(allFloat xv03) => <False>
(someFloat xv03) => <False>
(min xv03) => -6
(max xv03) => 6
(sum xv03) => -2
(product xv03) => 864000
(includes: xv03 nil) => <False>
(occurrencesOf: xv03 nil) => 0
(includes: xv03 nil) => <False>
(occurrencesOf: xv03 nil) => 0
(includes: xv03 <True>) => <False>
(occurrencesOf: xv03 <True>) => 0
(includes: xv03 <False>) => <False>
(occurrencesOf: xv03 <False>) => 0
(includes: xv03 0) => <False>
(occurrencesOf: xv03 0) => 0
(includes: xv03 1) => <True>
(occurrencesOf: xv03 1) => 1
(includes: xv03 42) => <False>
(occurrencesOf: xv03 42) => 0
(detect:ifNone: xv03 negative) => -6
(detect:ifNone: xv03 nonnegative) => 1
(detect:ifNone: xv03 strictlyPositive) => 1
(= xv03 xv03) => <True>
(< xv03 xv03) => <False>
(<= xv03 xv03) => <True>
(> xv03 xv03) => <False>
(>= xv03 xv03) => <True>
(= xv03 nil) => <False>
(= xv03 nil) => <False>
(= xv03 <True>) => <False>
(= xv03 <False>) => <False>
(= xv03 0) => <False>
(= xv03 1) => <False>
(= xv03 42) => <False>
(fromIndex:toIndex: xv03 0 0) => << 1 >>
(fromIndex:toIndex: xv03 0 1) => << 1 2 >>
(fromIndex:toIndex: xv03 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv03 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv03 1 1) => << 2 >>
(fromIndex:toIndex: xv03 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv03 -1 -1) => << -1 >>
(fromIndex:toIndex: xv03 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv03 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv03 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv03 -2 -2) => << -2 >>
(fromIndex:toIndex: xv03 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv03 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv03 -2 1) => << -2 -1 1 2 >>
(fromIndex:toIndex: xv03 -3 2) => << -4 -2 -1 1 2 3 >>
(fromIndex:toIndex: xv03 -4 3) => << -5 -4 -2 -1 1 2 3 4 >>
(fromIndex:toIndex: xv03 -5 4) => << -5 -5 -4 -2 -1 1 2 3 4 5 >>

##########
Testing xv04
(debug xv04) => RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),3)
(size xv04) => 18
(print xv04) => << 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 >>
(at:ifAbsent: xv04 xv04 0) => 1
(at:ifAbsent: xv04 xv04 1) => 2
(at:ifAbsent: xv04 xv04 2) => 3
(at:ifAbsent: xv04 xv04 3) => 4
(at:ifAbsent: xv04 xv04 4) => 5
(at:ifAbsent: xv04 xv04 5) => 6
(at:ifAbsent: xv04 7) => 2
(at:ifAbsent: xv04 8) => 3
(at:ifAbsent: xv04 9) => 4
(at:ifAbsent: xv04 1073741823) => nil
(at:ifAbsent: xv04 1073741824) => nil
(at:ifAbsent: xv04 1073741825) => nil
(at:ifAbsent: xv04 -5) => 2
(at:ifAbsent: xv04 -4) => 3
(at:ifAbsent: xv04 -3) => 4
(at:ifAbsent: xv04 -2) => 5
(at:ifAbsent: xv04 -1) => 6
(at:ifAbsent: xv04 -1073741825) => nil
(at:ifAbsent: xv04 -1073741824) => nil
(at:ifAbsent: xv04 -1073741823) => nil
(at:ifAbsent: xv04 -9) => 4
(at:ifAbsent: xv04 -8) => 5
(at:ifAbsent: xv04 -7) => 6
(allMag xv04) => <True>
(allNum xv04) => <True>
(allInt xv04) => <True>
(allFrac xv04) => <False>
(someFrac xv04) => <False>
(allFloat xv04) => <False>
(someFloat xv04) => <False>
(min xv04) => 1
(max xv04) => 6
(sum xv04) => 63
(product xv04) => 373248000
(includes: xv04 nil) => <False>
(occurrencesOf: xv04 nil) => 0
(includes: xv04 nil) => <False>
(occurrencesOf: xv04 nil) => 0
(includes: xv04 <True>) => <False>
(occurrencesOf: xv04 <True>) => 0
(includes: xv04 <False>) => <False>
(occurrencesOf: xv04 <False>) => 0
(includes: xv04 0) => <False>
(occurrencesOf: xv04 0) => 0
(includes: xv04 1) => <True>
(occurrencesOf: xv04 1) => 3
(includes: xv04 42) => <False>
(occurrencesOf: xv04 42) => 0
(detect:ifNone: xv04 negative) => nil
(detect:ifNone: xv04 nonnegative) => 1
(detect:ifNone: xv04 strictlyPositive) => 1
(= xv04 xv04) => <True>
(< xv04 xv04) => <False>
(<= xv04 xv04) => <True>
(> xv04 xv04) => <False>
(>= xv04 xv04) => <True>
(= xv04 nil) => <False>
(= xv04 nil) => <False>
(= xv04 <True>) => <False>
(= xv04 <False>) => <False>
(= xv04 0) => <False>
(= xv04 1) => <False>
(= xv04 42) => <False>
(fromIndex:toIndex: xv04 0 0) => << 1 >>
(fromIndex:toIndex: xv04 0 1) => << 1 2 >>
(fromIndex:toIndex: xv04 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv04 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv04 1 1) => << 2 >>
(fromIndex:toIndex: xv04 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv04 -1 -1) => << 6 >>
(fromIndex:toIndex: xv04 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv04 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv04 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv04 -2 -2) => << 5 >>
(fromIndex:toIndex: xv04 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv04 -1 0) => << 6 1 >>
(fromIndex:toIndex: xv04 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: xv04 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: xv04 -4 3) => << 3 4 5 6 1 2 3 4 >>
(fromIndex:toIndex: xv04 -5 4) => << 2 3 4 5 6 1 2 3 4 5 >>

##########
Testing xv05
(debug xv05) => RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),0)
(size xv05) => 0
(print xv05) => << >>
(at:ifAbsent: xv05 xv05 0) => nil
(at:ifAbsent: xv05 xv05 1) => nil
(at:ifAbsent: xv05 xv05 2) => nil
(at:ifAbsent: xv05 xv05 3) => nil
(at:ifAbsent: xv05 xv05 4) => nil
(at:ifAbsent: xv05 xv05 5) => nil
(at:ifAbsent: xv05 7) => nil
(at:ifAbsent: xv05 8) => nil
(at:ifAbsent: xv05 9) => nil
(at:ifAbsent: xv05 1073741823) => nil
(at:ifAbsent: xv05 1073741824) => nil
(at:ifAbsent: xv05 1073741825) => nil
(at:ifAbsent: xv05 -5) => nil
(at:ifAbsent: xv05 -4) => nil
(at:ifAbsent: xv05 -3) => nil
(at:ifAbsent: xv05 -2) => nil
(at:ifAbsent: xv05 -1) => nil
(at:ifAbsent: xv05 -1073741825) => nil
(at:ifAbsent: xv05 -1073741824) => nil
(at:ifAbsent: xv05 -1073741823) => nil
(at:ifAbsent: xv05 -9) => nil
(at:ifAbsent: xv05 -8) => nil
(at:ifAbsent: xv05 -7) => nil
(allMag xv05) => <True>
(allNum xv05) => <True>
(allInt xv05) => <True>
(allFrac xv05) => <True>
(someFrac xv05) => <False>
(allFloat xv05) => <True>
(someFloat xv05) => <False>
(sum xv05) => 0
(product xv05) => 1
(includes: xv05 nil) => <False>
(occurrencesOf: xv05 nil) => 0
(includes: xv05 nil) => <False>
(occurrencesOf: xv05 nil) => 0
(includes: xv05 <True>) => <False>
(occurrencesOf: xv05 <True>) => 0
(includes: xv05 <False>) => <False>
(occurrencesOf: xv05 <False>) => 0
(includes: xv05 0) => <False>
(occurrencesOf: xv05 0) => 0
(includes: xv05 1) => <False>
(occurrencesOf: xv05 1) => 0
(includes: xv05 42) => <False>
(occurrencesOf: xv05 42) => 0
(detect:ifNone: xv05 negative) => nil
(detect:ifNone: xv05 nonnegative) => nil
(detect:ifNone: xv05 strictlyPositive) => nil
(= xv05 xv05) => <True>
(< xv05 xv05) => <False>
(<= xv05 xv05) => <True>
(> xv05 xv05) => <False>
(>= xv05 xv05) => <True>
(= xv05 nil) => <False>
(= xv05 nil) => <False>
(= xv05 <True>) => <False>
(= xv05 <False>) => <False>
(= xv05 0) => <False>
(= xv05 1) => <False>
(= xv05 42) => <False>

##########
Testing xv06
(debug xv06) => RepeatXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),1000)
(size xv06) => 12000
(at:ifAbsent: xv06 xv06 0) => 1
(at:ifAbsent: xv06 xv06 1) => 2
(at:ifAbsent: xv06 xv06 2) => 3
(at:ifAbsent: xv06 xv06 3) => 4
(at:ifAbsent: xv06 xv06 4) => 5
(at:ifAbsent: xv06 xv06 5) => 6
(at:ifAbsent: xv06 7) => -5
(at:ifAbsent: xv06 8) => -5
(at:ifAbsent: xv06 9) => -4
(at:ifAbsent: xv06 1073741823) => nil
(at:ifAbsent: xv06 1073741824) => nil
(at:ifAbsent: xv06 1073741825) => nil
(at:ifAbsent: xv06 -5) => -5
(at:ifAbsent: xv06 -4) => -5
(at:ifAbsent: xv06 -3) => -4
(at:ifAbsent: xv06 -2) => -2
(at:ifAbsent: xv06 -1) => -1
(at:ifAbsent: xv06 -1073741825) => nil
(at:ifAbsent: xv06 -1073741824) => nil
(at:ifAbsent: xv06 -1073741823) => nil
(at:ifAbsent: xv06 -9) => 4
(at:ifAbsent: xv06 -8) => 5
(at:ifAbsent: xv06 -7) => 6
(= xv06 nil) => <False>
(= xv06 nil) => <False>
(= xv06 <True>) => <False>
(= xv06 <False>) => <False>
(= xv06 0) => <False>
(= xv06 1) => <False>
(= xv06 42) => <False>
(fromIndex:toIndex: xv06 0 0) => << 1 >>
(fromIndex:toIndex: xv06 0 1) => << 1 2 >>
(fromIndex:toIndex: xv06 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv06 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv06 1 1) => << 2 >>
(fromIndex:toIndex: xv06 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv06 -1 -1) => << -1 >>
(fromIndex:toIndex: xv06 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv06 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv06 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv06 -2 -2) => << -2 >>
(fromIndex:toIndex: xv06 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv06 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv06 -2 1) => << -2 -1 1 2 >>
(fromIndex:toIndex: xv06 -3 2) => << -4 -2 -1 1 2 3 >>
(fromIndex:toIndex: xv06 -4 3) => << -5 -4 -2 -1 1 2 3 4 >>
(fromIndex:toIndex: xv06 -5 4) => << -5 -5 -4 -2 -1 1 2 3 4 5 >>

##########
Testing xv07
(debug xv07) => ReverseXVector(ArrayXVector(( 1 2 3 4 5 6 )))
(size xv07) => 6
(print xv07) => << 6 5 4 3 2 1 >>
(at:ifAbsent: xv07 xv07 0) => 6
(at:ifAbsent: xv07 xv07 1) => 5
(at:ifAbsent: xv07 xv07 2) => 4
(at:ifAbsent: xv07 xv07 3) => 3
(at:ifAbsent: xv07 xv07 4) => 2
(at:ifAbsent: xv07 xv07 5) => 1
(at:ifAbsent: xv07 7) => nil
(at:ifAbsent: xv07 8) => nil
(at:ifAbsent: xv07 9) => nil
(at:ifAbsent: xv07 1073741823) => nil
(at:ifAbsent: xv07 1073741824) => nil
(at:ifAbsent: xv07 1073741825) => nil
(at:ifAbsent: xv07 -5) => 5
(at:ifAbsent: xv07 -4) => 4
(at:ifAbsent: xv07 -3) => 3
(at:ifAbsent: xv07 -2) => 2
(at:ifAbsent: xv07 -1) => 1
(at:ifAbsent: xv07 -1073741825) => nil
(at:ifAbsent: xv07 -1073741824) => nil
(at:ifAbsent: xv07 -1073741823) => nil
(at:ifAbsent: xv07 -9) => nil
(at:ifAbsent: xv07 -8) => nil
(at:ifAbsent: xv07 -7) => nil
(allMag xv07) => <True>
(allNum xv07) => <True>
(allInt xv07) => <True>
(allFrac xv07) => <False>
(someFrac xv07) => <False>
(allFloat xv07) => <False>
(someFloat xv07) => <False>
(min xv07) => 1
(max xv07) => 6
(sum xv07) => 21
(product xv07) => 720
(includes: xv07 nil) => <False>
(occurrencesOf: xv07 nil) => 0
(includes: xv07 nil) => <False>
(occurrencesOf: xv07 nil) => 0
(includes: xv07 <True>) => <False>
(occurrencesOf: xv07 <True>) => 0
(includes: xv07 <False>) => <False>
(occurrencesOf: xv07 <False>) => 0
(includes: xv07 0) => <False>
(occurrencesOf: xv07 0) => 0
(includes: xv07 1) => <True>
(occurrencesOf: xv07 1) => 1
(includes: xv07 42) => <False>
(occurrencesOf: xv07 42) => 0
(detect:ifNone: xv07 negative) => nil
(detect:ifNone: xv07 nonnegative) => 6
(detect:ifNone: xv07 strictlyPositive) => 6
(= xv07 xv07) => <True>
(< xv07 xv07) => <False>
(<= xv07 xv07) => <True>
(> xv07 xv07) => <False>
(>= xv07 xv07) => <True>
(= xv07 nil) => <False>
(= xv07 nil) => <False>
(= xv07 <True>) => <False>
(= xv07 <False>) => <False>
(= xv07 0) => <False>
(= xv07 1) => <False>
(= xv07 42) => <False>
(fromIndex:toIndex: xv07 0 0) => << 6 >>
(fromIndex:toIndex: xv07 0 1) => << 6 5 >>
(fromIndex:toIndex: xv07 0 2) => << 6 5 4 >>
(fromIndex:toIndex: xv07 0 4) => << 6 5 4 3 2 >>
(fromIndex:toIndex: xv07 1 1) => << 5 >>
(fromIndex:toIndex: xv07 1 3) => << 5 4 3 >>
(fromIndex:toIndex: xv07 -1 -1) => << 1 >>
(fromIndex:toIndex: xv07 -2 -1) => << 2 1 >>
(fromIndex:toIndex: xv07 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: xv07 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: xv07 -2 -2) => << 2 >>
(fromIndex:toIndex: xv07 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: xv07 -1 0) => << 1 6 >>
(fromIndex:toIndex: xv07 -2 1) => << 2 1 6 5 >>
(fromIndex:toIndex: xv07 -3 2) => << 3 2 1 6 5 4 >>
(fromIndex:toIndex: xv07 -4 3) => << 4 3 >>
(fromIndex:toIndex: xv07 -5 4) => << 5 4 3 2 >>

##########
Testing xv08
(debug xv08) => ReverseXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))))
(size xv08) => 12
(print xv08) => << -1 -2 -4 -5 -5 -6 6 5 4 3 2 1 >>
(at:ifAbsent: xv08 xv08 0) => -1
(at:ifAbsent: xv08 xv08 1) => -2
(at:ifAbsent: xv08 xv08 2) => -4
(at:ifAbsent: xv08 xv08 3) => -5
(at:ifAbsent: xv08 xv08 4) => -5
(at:ifAbsent: xv08 xv08 5) => -6
(at:ifAbsent: xv08 7) => 5
(at:ifAbsent: xv08 8) => 4
(at:ifAbsent: xv08 9) => 3
(at:ifAbsent: xv08 1073741823) => nil
(at:ifAbsent: xv08 1073741824) => nil
(at:ifAbsent: xv08 1073741825) => nil
(at:ifAbsent: xv08 -5) => 5
(at:ifAbsent: xv08 -4) => 4
(at:ifAbsent: xv08 -3) => 3
(at:ifAbsent: xv08 -2) => 2
(at:ifAbsent: xv08 -1) => 1
(at:ifAbsent: xv08 -1073741825) => nil
(at:ifAbsent: xv08 -1073741824) => nil
(at:ifAbsent: xv08 -1073741823) => nil
(at:ifAbsent: xv08 -9) => -5
(at:ifAbsent: xv08 -8) => -5
(at:ifAbsent: xv08 -7) => -6
(allMag xv08) => <True>
(allNum xv08) => <True>
(allInt xv08) => <True>
(allFrac xv08) => <False>
(someFrac xv08) => <False>
(allFloat xv08) => <False>
(someFloat xv08) => <False>
(min xv08) => -6
(max xv08) => 6
(sum xv08) => -2
(product xv08) => 864000
(includes: xv08 nil) => <False>
(occurrencesOf: xv08 nil) => 0
(includes: xv08 nil) => <False>
(occurrencesOf: xv08 nil) => 0
(includes: xv08 <True>) => <False>
(occurrencesOf: xv08 <True>) => 0
(includes: xv08 <False>) => <False>
(occurrencesOf: xv08 <False>) => 0
(includes: xv08 0) => <False>
(occurrencesOf: xv08 0) => 0
(includes: xv08 1) => <True>
(occurrencesOf: xv08 1) => 1
(includes: xv08 42) => <False>
(occurrencesOf: xv08 42) => 0
(detect:ifNone: xv08 negative) => -1
(detect:ifNone: xv08 nonnegative) => 6
(detect:ifNone: xv08 strictlyPositive) => 6
(= xv08 xv08) => <True>
(< xv08 xv08) => <False>
(<= xv08 xv08) => <True>
(> xv08 xv08) => <False>
(>= xv08 xv08) => <True>
(= xv08 nil) => <False>
(= xv08 nil) => <False>
(= xv08 <True>) => <False>
(= xv08 <False>) => <False>
(= xv08 0) => <False>
(= xv08 1) => <False>
(= xv08 42) => <False>
(fromIndex:toIndex: xv08 0 0) => << -1 >>
(fromIndex:toIndex: xv08 0 1) => << -1 -2 >>
(fromIndex:toIndex: xv08 0 2) => << -1 -2 -4 >>
(fromIndex:toIndex: xv08 0 4) => << -1 -2 -4 -5 -5 >>
(fromIndex:toIndex: xv08 1 1) => << -2 >>
(fromIndex:toIndex: xv08 1 3) => << -2 -4 -5 >>
(fromIndex:toIndex: xv08 -1 -1) => << 1 >>
(fromIndex:toIndex: xv08 -2 -1) => << 2 1 >>
(fromIndex:toIndex: xv08 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: xv08 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: xv08 -2 -2) => << 2 >>
(fromIndex:toIndex: xv08 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: xv08 -1 0) => << 1 -1 >>
(fromIndex:toIndex: xv08 -2 1) => << 2 1 -1 -2 >>
(fromIndex:toIndex: xv08 -3 2) => << 3 2 1 -1 -2 -4 >>
(fromIndex:toIndex: xv08 -4 3) => << 4 3 2 1 -1 -2 -4 -5 >>
(fromIndex:toIndex: xv08 -5 4) => << 5 4 3 2 1 -1 -2 -4 -5 -5 >>

##########
Testing xv09
(debug xv09) => ReverseXVector(RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),0))
(size xv09) => 0
(print xv09) => << >>
(at:ifAbsent: xv09 xv09 0) => nil
(at:ifAbsent: xv09 xv09 1) => nil
(at:ifAbsent: xv09 xv09 2) => nil
(at:ifAbsent: xv09 xv09 3) => nil
(at:ifAbsent: xv09 xv09 4) => nil
(at:ifAbsent: xv09 xv09 5) => nil
(at:ifAbsent: xv09 7) => nil
(at:ifAbsent: xv09 8) => nil
(at:ifAbsent: xv09 9) => nil
(at:ifAbsent: xv09 1073741823) => nil
(at:ifAbsent: xv09 1073741824) => nil
(at:ifAbsent: xv09 1073741825) => nil
(at:ifAbsent: xv09 -5) => nil
(at:ifAbsent: xv09 -4) => nil
(at:ifAbsent: xv09 -3) => nil
(at:ifAbsent: xv09 -2) => nil
(at:ifAbsent: xv09 -1) => nil
(at:ifAbsent: xv09 -1073741825) => nil
(at:ifAbsent: xv09 -1073741824) => nil
(at:ifAbsent: xv09 -1073741823) => nil
(at:ifAbsent: xv09 -9) => nil
(at:ifAbsent: xv09 -8) => nil
(at:ifAbsent: xv09 -7) => nil
(allMag xv09) => <True>
(allNum xv09) => <True>
(allInt xv09) => <True>
(allFrac xv09) => <True>
(someFrac xv09) => <False>
(allFloat xv09) => <True>
(someFloat xv09) => <False>
(sum xv09) => 0
(product xv09) => 1
(includes: xv09 nil) => <False>
(occurrencesOf: xv09 nil) => 0
(includes: xv09 nil) => <False>
(occurrencesOf: xv09 nil) => 0
(includes: xv09 <True>) => <False>
(occurrencesOf: xv09 <True>) => 0
(includes: xv09 <False>) => <False>
(occurrencesOf: xv09 <False>) => 0
(includes: xv09 0) => <False>
(occurrencesOf: xv09 0) => 0
(includes: xv09 1) => <False>
(occurrencesOf: xv09 1) => 0
(includes: xv09 42) => <False>
(occurrencesOf: xv09 42) => 0
(detect:ifNone: xv09 negative) => nil
(detect:ifNone: xv09 nonnegative) => nil
(detect:ifNone: xv09 strictlyPositive) => nil
(= xv09 xv09) => <True>
(< xv09 xv09) => <False>
(<= xv09 xv09) => <True>
(> xv09 xv09) => <False>
(>= xv09 xv09) => <True>
(= xv09 nil) => <False>
(= xv09 nil) => <False>
(= xv09 <True>) => <False>
(= xv09 <False>) => <False>
(= xv09 0) => <False>
(= xv09 1) => <False>
(= xv09 42) => <False>

##########
Testing xv10
(debug xv10) => ReverseXVector(RepeatXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),1000))
(size xv10) => 12000
(at:ifAbsent: xv10 xv10 0) => -1
(at:ifAbsent: xv10 xv10 1) => -2
(at:ifAbsent: xv10 xv10 2) => -4
(at:ifAbsent: xv10 xv10 3) => -5
(at:ifAbsent: xv10 xv10 4) => -5
(at:ifAbsent: xv10 xv10 5) => -6
(at:ifAbsent: xv10 7) => 5
(at:ifAbsent: xv10 8) => 4
(at:ifAbsent: xv10 9) => 3
(at:ifAbsent: xv10 1073741823) => nil
(at:ifAbsent: xv10 1073741824) => nil
(at:ifAbsent: xv10 1073741825) => nil
(at:ifAbsent: xv10 -5) => 5
(at:ifAbsent: xv10 -4) => 4
(at:ifAbsent: xv10 -3) => 3
(at:ifAbsent: xv10 -2) => 2
(at:ifAbsent: xv10 -1) => 1
(at:ifAbsent: xv10 -1073741825) => nil
(at:ifAbsent: xv10 -1073741824) => nil
(at:ifAbsent: xv10 -1073741823) => nil
(at:ifAbsent: xv10 -9) => -5
(at:ifAbsent: xv10 -8) => -5
(at:ifAbsent: xv10 -7) => -6
(= xv10 nil) => <False>
(= xv10 nil) => <False>
(= xv10 <True>) => <False>
(= xv10 <False>) => <False>
(= xv10 0) => <False>
(= xv10 1) => <False>
(= xv10 42) => <False>
(fromIndex:toIndex: xv10 0 0) => << -1 >>
(fromIndex:toIndex: xv10 0 1) => << -1 -2 >>
(fromIndex:toIndex: xv10 0 2) => << -1 -2 -4 >>
(fromIndex:toIndex: xv10 0 4) => << -1 -2 -4 -5 -5 >>
(fromIndex:toIndex: xv10 1 1) => << -2 >>
(fromIndex:toIndex: xv10 1 3) => << -2 -4 -5 >>
(fromIndex:toIndex: xv10 -1 -1) => << 1 >>
(fromIndex:toIndex: xv10 -2 -1) => << 2 1 >>
(fromIndex:toIndex: xv10 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: xv10 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: xv10 -2 -2) => << 2 >>
(fromIndex:toIndex: xv10 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: xv10 -1 0) => << 1 -1 >>
(fromIndex:toIndex: xv10 -2 1) => << 2 1 -1 -2 >>
(fromIndex:toIndex: xv10 -3 2) => << 3 2 1 -1 -2 -4 >>
(fromIndex:toIndex: xv10 -4 3) => << 4 3 2 1 -1 -2 -4 -5 >>
(fromIndex:toIndex: xv10 -5 4) => << 5 4 3 2 1 -1 -2 -4 -5 -5 >>

##########
Testing xv11
(debug xv11) => ReverseXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))))
(size xv11) => 12
(print xv11) => << -1 -2 -4 -5 -5 -6 6 5 4 3 2 1 >>
(at:ifAbsent: xv11 xv11 0) => -1
(at:ifAbsent: xv11 xv11 1) => -2
(at:ifAbsent: xv11 xv11 2) => -4
(at:ifAbsent: xv11 xv11 3) => -5
(at:ifAbsent: xv11 xv11 4) => -5
(at:ifAbsent: xv11 xv11 5) => -6
(at:ifAbsent: xv11 7) => 5
(at:ifAbsent: xv11 8) => 4
(at:ifAbsent: xv11 9) => 3
(at:ifAbsent: xv11 1073741823) => nil
(at:ifAbsent: xv11 1073741824) => nil
(at:ifAbsent: xv11 1073741825) => nil
(at:ifAbsent: xv11 -5) => 5
(at:ifAbsent: xv11 -4) => 4
(at:ifAbsent: xv11 -3) => 3
(at:ifAbsent: xv11 -2) => 2
(at:ifAbsent: xv11 -1) => 1
(at:ifAbsent: xv11 -1073741825) => nil
(at:ifAbsent: xv11 -1073741824) => nil
(at:ifAbsent: xv11 -1073741823) => nil
(at:ifAbsent: xv11 -9) => -5
(at:ifAbsent: xv11 -8) => -5
(at:ifAbsent: xv11 -7) => -6
(allMag xv11) => <True>
(allNum xv11) => <True>
(allInt xv11) => <True>
(allFrac xv11) => <False>
(someFrac xv11) => <False>
(allFloat xv11) => <False>
(someFloat xv11) => <False>
(min xv11) => -6
(max xv11) => 6
(sum xv11) => -2
(product xv11) => 864000
(includes: xv11 nil) => <False>
(occurrencesOf: xv11 nil) => 0
(includes: xv11 nil) => <False>
(occurrencesOf: xv11 nil) => 0
(includes: xv11 <True>) => <False>
(occurrencesOf: xv11 <True>) => 0
(includes: xv11 <False>) => <False>
(occurrencesOf: xv11 <False>) => 0
(includes: xv11 0) => <False>
(occurrencesOf: xv11 0) => 0
(includes: xv11 1) => <True>
(occurrencesOf: xv11 1) => 1
(includes: xv11 42) => <False>
(occurrencesOf: xv11 42) => 0
(detect:ifNone: xv11 negative) => -1
(detect:ifNone: xv11 nonnegative) => 6
(detect:ifNone: xv11 strictlyPositive) => 6
(= xv11 xv11) => <True>
(< xv11 xv11) => <False>
(<= xv11 xv11) => <True>
(> xv11 xv11) => <False>
(>= xv11 xv11) => <True>
(= xv11 nil) => <False>
(= xv11 nil) => <False>
(= xv11 <True>) => <False>
(= xv11 <False>) => <False>
(= xv11 0) => <False>
(= xv11 1) => <False>
(= xv11 42) => <False>
(fromIndex:toIndex: xv11 0 0) => << -1 >>
(fromIndex:toIndex: xv11 0 1) => << -1 -2 >>
(fromIndex:toIndex: xv11 0 2) => << -1 -2 -4 >>
(fromIndex:toIndex: xv11 0 4) => << -1 -2 -4 -5 -5 >>
(fromIndex:toIndex: xv11 1 1) => << -2 >>
(fromIndex:toIndex: xv11 1 3) => << -2 -4 -5 >>
(fromIndex:toIndex: xv11 -1 -1) => << 1 >>
(fromIndex:toIndex: xv11 -2 -1) => << 2 1 >>
(fromIndex:toIndex: xv11 -3 -1) => << 3 2 1 >>
(fromIndex:toIndex: xv11 -5 -1) => << 5 4 3 2 1 >>
(fromIndex:toIndex: xv11 -2 -2) => << 2 >>
(fromIndex:toIndex: xv11 -4 -2) => << 4 3 2 >>
(fromIndex:toIndex: xv11 -1 0) => << 1 -1 >>
(fromIndex:toIndex: xv11 -2 1) => << 2 1 -1 -2 >>
(fromIndex:toIndex: xv11 -3 2) => << 3 2 1 -1 -2 -4 >>
(fromIndex:toIndex: xv11 -4 3) => << 4 3 2 1 -1 -2 -4 -5 >>
(fromIndex:toIndex: xv11 -5 4) => << 5 4 3 2 1 -1 -2 -4 -5 -5 >>

##########
Testing xv12
(debug xv12) => SwizzleXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))
(size xv12) => 12
(print xv12) => << 1 -6 2 -5 3 -5 4 -4 5 -2 6 -1 >>
(at:ifAbsent: xv12 xv12 0) => 1
(at:ifAbsent: xv12 xv12 1) => -6
(at:ifAbsent: xv12 xv12 2) => 2
(at:ifAbsent: xv12 xv12 3) => -5
(at:ifAbsent: xv12 xv12 4) => 3
(at:ifAbsent: xv12 xv12 5) => -5
(at:ifAbsent: xv12 7) => -4
(at:ifAbsent: xv12 8) => 5
(at:ifAbsent: xv12 9) => -2
(at:ifAbsent: xv12 1073741823) => nil
(at:ifAbsent: xv12 1073741824) => nil
(at:ifAbsent: xv12 1073741825) => nil
(at:ifAbsent: xv12 -5) => -4
(at:ifAbsent: xv12 -4) => 5
(at:ifAbsent: xv12 -3) => -2
(at:ifAbsent: xv12 -2) => 6
(at:ifAbsent: xv12 -1) => -1
(at:ifAbsent: xv12 -1073741825) => nil
(at:ifAbsent: xv12 -1073741824) => nil
(at:ifAbsent: xv12 -1073741823) => nil
(at:ifAbsent: xv12 -9) => -5
(at:ifAbsent: xv12 -8) => 3
(at:ifAbsent: xv12 -7) => -5
(allMag xv12) => <True>
(allNum xv12) => <True>
(allInt xv12) => <True>
(allFrac xv12) => <False>
(someFrac xv12) => <False>
(allFloat xv12) => <False>
(someFloat xv12) => <False>
(min xv12) => -6
(max xv12) => 6
(sum xv12) => -2
(product xv12) => 864000
(includes: xv12 nil) => <False>
(occurrencesOf: xv12 nil) => 0
(includes: xv12 nil) => <False>
(occurrencesOf: xv12 nil) => 0
(includes: xv12 <True>) => <False>
(occurrencesOf: xv12 <True>) => 0
(includes: xv12 <False>) => <False>
(occurrencesOf: xv12 <False>) => 0
(includes: xv12 0) => <False>
(occurrencesOf: xv12 0) => 0
(includes: xv12 1) => <True>
(occurrencesOf: xv12 1) => 1
(includes: xv12 42) => <False>
(occurrencesOf: xv12 42) => 0
(detect:ifNone: xv12 negative) => -6
(detect:ifNone: xv12 nonnegative) => 1
(detect:ifNone: xv12 strictlyPositive) => 1
(= xv12 xv12) => <True>
(< xv12 xv12) => <False>
(<= xv12 xv12) => <True>
(> xv12 xv12) => <False>
(>= xv12 xv12) => <True>
(= xv12 nil) => <False>
(= xv12 nil) => <False>
(= xv12 <True>) => <False>
(= xv12 <False>) => <False>
(= xv12 0) => <False>
(= xv12 1) => <False>
(= xv12 42) => <False>
(fromIndex:toIndex: xv12 0 0) => << 1 >>
(fromIndex:toIndex: xv12 0 1) => << 1 -6 >>
(fromIndex:toIndex: xv12 0 2) => << 1 -6 2 >>
(fromIndex:toIndex: xv12 0 4) => << 1 -6 2 -5 3 >>
(fromIndex:toIndex: xv12 1 1) => << -6 >>
(fromIndex:toIndex: xv12 1 3) => << -6 2 -5 >>
(fromIndex:toIndex: xv12 -1 -1) => << -1 >>
(fromIndex:toIndex: xv12 -2 -1) => << 6 -1 >>
(fromIndex:toIndex: xv12 -3 -1) => << -2 6 -1 >>
(fromIndex:toIndex: xv12 -5 -1) => << -4 5 -2 6 -1 >>
(fromIndex:toIndex: xv12 -2 -2) => << 6 >>
(fromIndex:toIndex: xv12 -4 -2) => << 5 -2 6 >>
(fromIndex:toIndex: xv12 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv12 -2 1) => << 6 -1 1 -6 >>
(fromIndex:toIndex: xv12 -3 2) => << -2 6 -1 1 -6 2 >>
(fromIndex:toIndex: xv12 -4 3) => << 5 -2 6 -1 1 -6 2 -5 >>
(fromIndex:toIndex: xv12 -5 4) => << -4 5 -2 6 -1 1 -6 2 -5 3 >>

##########
Testing xv13
(debug xv13) => SwizzleXVector(ArrayXVector(( 1 2 3 4 5 6 )),ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))))
(size xv13) => 18
(print xv13) => << 1 1 2 2 3 3 4 4 5 5 6 6 -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv13 xv13 0) => 1
(at:ifAbsent: xv13 xv13 1) => 1
(at:ifAbsent: xv13 xv13 2) => 2
(at:ifAbsent: xv13 xv13 3) => 2
(at:ifAbsent: xv13 xv13 4) => 3
(at:ifAbsent: xv13 xv13 5) => 3
(at:ifAbsent: xv13 7) => 4
(at:ifAbsent: xv13 8) => 5
(at:ifAbsent: xv13 9) => 5
(at:ifAbsent: xv13 1073741823) => nil
(at:ifAbsent: xv13 1073741824) => nil
(at:ifAbsent: xv13 1073741825) => nil
(at:ifAbsent: xv13 -5) => -5
(at:ifAbsent: xv13 -4) => -5
(at:ifAbsent: xv13 -3) => -4
(at:ifAbsent: xv13 -2) => -2
(at:ifAbsent: xv13 -1) => -1
(at:ifAbsent: xv13 -1073741825) => nil
(at:ifAbsent: xv13 -1073741824) => nil
(at:ifAbsent: xv13 -1073741823) => nil
(at:ifAbsent: xv13 -9) => 5
(at:ifAbsent: xv13 -8) => 6
(at:ifAbsent: xv13 -7) => 6
(allMag xv13) => <True>
(allNum xv13) => <True>
(allInt xv13) => <True>
(allFrac xv13) => <False>
(someFrac xv13) => <False>
(allFloat xv13) => <False>
(someFloat xv13) => <False>
(min xv13) => -6
(max xv13) => 6
(sum xv13) => 19
(product xv13) => 622080000
(includes: xv13 nil) => <False>
(occurrencesOf: xv13 nil) => 0
(includes: xv13 nil) => <False>
(occurrencesOf: xv13 nil) => 0
(includes: xv13 <True>) => <False>
(occurrencesOf: xv13 <True>) => 0
(includes: xv13 <False>) => <False>
(occurrencesOf: xv13 <False>) => 0
(includes: xv13 0) => <False>
(occurrencesOf: xv13 0) => 0
(includes: xv13 1) => <True>
(occurrencesOf: xv13 1) => 2
(includes: xv13 42) => <False>
(occurrencesOf: xv13 42) => 0
(detect:ifNone: xv13 negative) => -6
(detect:ifNone: xv13 nonnegative) => 1
(detect:ifNone: xv13 strictlyPositive) => 1
(= xv13 xv13) => <True>
(< xv13 xv13) => <False>
(<= xv13 xv13) => <True>
(> xv13 xv13) => <False>
(>= xv13 xv13) => <True>
(= xv13 nil) => <False>
(= xv13 nil) => <False>
(= xv13 <True>) => <False>
(= xv13 <False>) => <False>
(= xv13 0) => <False>
(= xv13 1) => <False>
(= xv13 42) => <False>
(fromIndex:toIndex: xv13 0 0) => << 1 >>
(fromIndex:toIndex: xv13 0 1) => << 1 1 >>
(fromIndex:toIndex: xv13 0 2) => << 1 1 2 >>
(fromIndex:toIndex: xv13 0 4) => << 1 1 2 2 3 >>
(fromIndex:toIndex: xv13 1 1) => << 1 >>
(fromIndex:toIndex: xv13 1 3) => << 1 2 2 >>
(fromIndex:toIndex: xv13 -1 -1) => << -1 >>
(fromIndex:toIndex: xv13 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv13 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv13 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv13 -2 -2) => << -2 >>
(fromIndex:toIndex: xv13 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv13 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv13 -2 1) => << -2 -1 1 1 >>
(fromIndex:toIndex: xv13 -3 2) => << -4 -2 -1 1 1 2 >>
(fromIndex:toIndex: xv13 -4 3) => << -5 -4 -2 -1 1 1 2 2 >>
(fromIndex:toIndex: xv13 -5 4) => << -5 -5 -4 -2 -1 1 1 2 2 3 >>

##########
Testing xv14
(debug xv14) => SwizzleXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),ArrayXVector(( 1 2 3 4 5 6 )))
(size xv14) => 18
(print xv14) => << 1 1 2 2 3 3 4 4 5 5 6 6 -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv14 xv14 0) => 1
(at:ifAbsent: xv14 xv14 1) => 1
(at:ifAbsent: xv14 xv14 2) => 2
(at:ifAbsent: xv14 xv14 3) => 2
(at:ifAbsent: xv14 xv14 4) => 3
(at:ifAbsent: xv14 xv14 5) => 3
(at:ifAbsent: xv14 7) => 4
(at:ifAbsent: xv14 8) => 5
(at:ifAbsent: xv14 9) => 5
(at:ifAbsent: xv14 1073741823) => nil
(at:ifAbsent: xv14 1073741824) => nil
(at:ifAbsent: xv14 1073741825) => nil
(at:ifAbsent: xv14 -5) => -5
(at:ifAbsent: xv14 -4) => -5
(at:ifAbsent: xv14 -3) => -4
(at:ifAbsent: xv14 -2) => -2
(at:ifAbsent: xv14 -1) => -1
(at:ifAbsent: xv14 -1073741825) => nil
(at:ifAbsent: xv14 -1073741824) => nil
(at:ifAbsent: xv14 -1073741823) => nil
(at:ifAbsent: xv14 -9) => 5
(at:ifAbsent: xv14 -8) => 6
(at:ifAbsent: xv14 -7) => 6
(allMag xv14) => <True>
(allNum xv14) => <True>
(allInt xv14) => <True>
(allFrac xv14) => <False>
(someFrac xv14) => <False>
(allFloat xv14) => <False>
(someFloat xv14) => <False>
(min xv14) => -6
(max xv14) => 6
(sum xv14) => 19
(product xv14) => 622080000
(includes: xv14 nil) => <False>
(occurrencesOf: xv14 nil) => 0
(includes: xv14 nil) => <False>
(occurrencesOf: xv14 nil) => 0
(includes: xv14 <True>) => <False>
(occurrencesOf: xv14 <True>) => 0
(includes: xv14 <False>) => <False>
(occurrencesOf: xv14 <False>) => 0
(includes: xv14 0) => <False>
(occurrencesOf: xv14 0) => 0
(includes: xv14 1) => <True>
(occurrencesOf: xv14 1) => 2
(includes: xv14 42) => <False>
(occurrencesOf: xv14 42) => 0
(detect:ifNone: xv14 negative) => -6
(detect:ifNone: xv14 nonnegative) => 1
(detect:ifNone: xv14 strictlyPositive) => 1
(= xv14 xv14) => <True>
(< xv14 xv14) => <False>
(<= xv14 xv14) => <True>
(> xv14 xv14) => <False>
(>= xv14 xv14) => <True>
(= xv14 nil) => <False>
(= xv14 nil) => <False>
(= xv14 <True>) => <False>
(= xv14 <False>) => <False>
(= xv14 0) => <False>
(= xv14 1) => <False>
(= xv14 42) => <False>
(fromIndex:toIndex: xv14 0 0) => << 1 >>
(fromIndex:toIndex: xv14 0 1) => << 1 1 >>
(fromIndex:toIndex: xv14 0 2) => << 1 1 2 >>
(fromIndex:toIndex: xv14 0 4) => << 1 1 2 2 3 >>
(fromIndex:toIndex: xv14 1 1) => << 1 >>
(fromIndex:toIndex: xv14 1 3) => << 1 2 2 >>
(fromIndex:toIndex: xv14 -1 -1) => << -1 >>
(fromIndex:toIndex: xv14 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv14 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv14 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv14 -2 -2) => << -2 >>
(fromIndex:toIndex: xv14 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv14 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv14 -2 1) => << -2 -1 1 1 >>
(fromIndex:toIndex: xv14 -3 2) => << -4 -2 -1 1 1 2 >>
(fromIndex:toIndex: xv14 -4 3) => << -5 -4 -2 -1 1 1 2 2 >>
(fromIndex:toIndex: xv14 -5 4) => << -5 -5 -4 -2 -1 1 1 2 2 3 >>

##########
Testing xv15
(debug xv15) => SwizzleXVector(RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),3),RepeatXVector(ArrayXVector(( 1 2 3 4 5 6 )),0))
(size xv15) => 18
(print xv15) => << 1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6 >>
(at:ifAbsent: xv15 xv15 0) => 1
(at:ifAbsent: xv15 xv15 1) => 2
(at:ifAbsent: xv15 xv15 2) => 3
(at:ifAbsent: xv15 xv15 3) => 4
(at:ifAbsent: xv15 xv15 4) => 5
(at:ifAbsent: xv15 xv15 5) => 6
(at:ifAbsent: xv15 7) => 2
(at:ifAbsent: xv15 8) => 3
(at:ifAbsent: xv15 9) => 4
(at:ifAbsent: xv15 1073741823) => nil
(at:ifAbsent: xv15 1073741824) => nil
(at:ifAbsent: xv15 1073741825) => nil
(at:ifAbsent: xv15 -5) => 2
(at:ifAbsent: xv15 -4) => 3
(at:ifAbsent: xv15 -3) => 4
(at:ifAbsent: xv15 -2) => 5
(at:ifAbsent: xv15 -1) => 6
(at:ifAbsent: xv15 -1073741825) => nil
(at:ifAbsent: xv15 -1073741824) => nil
(at:ifAbsent: xv15 -1073741823) => nil
(at:ifAbsent: xv15 -9) => 4
(at:ifAbsent: xv15 -8) => 5
(at:ifAbsent: xv15 -7) => 6
(allMag xv15) => <True>
(allNum xv15) => <True>
(allInt xv15) => <True>
(allFrac xv15) => <False>
(someFrac xv15) => <False>
(allFloat xv15) => <False>
(someFloat xv15) => <False>
(min xv15) => 1
(max xv15) => 6
(sum xv15) => 63
(product xv15) => 373248000
(includes: xv15 nil) => <False>
(occurrencesOf: xv15 nil) => 0
(includes: xv15 nil) => <False>
(occurrencesOf: xv15 nil) => 0
(includes: xv15 <True>) => <False>
(occurrencesOf: xv15 <True>) => 0
(includes: xv15 <False>) => <False>
(occurrencesOf: xv15 <False>) => 0
(includes: xv15 0) => <False>
(occurrencesOf: xv15 0) => 0
(includes: xv15 1) => <True>
(occurrencesOf: xv15 1) => 3
(includes: xv15 42) => <False>
(occurrencesOf: xv15 42) => 0
(detect:ifNone: xv15 negative) => nil
(detect:ifNone: xv15 nonnegative) => 1
(detect:ifNone: xv15 strictlyPositive) => 1
(= xv15 xv15) => <True>
(< xv15 xv15) => <False>
(<= xv15 xv15) => <True>
(> xv15 xv15) => <False>
(>= xv15 xv15) => <True>
(= xv15 nil) => <False>
(= xv15 nil) => <False>
(= xv15 <True>) => <False>
(= xv15 <False>) => <False>
(= xv15 0) => <False>
(= xv15 1) => <False>
(= xv15 42) => <False>
(fromIndex:toIndex: xv15 0 0) => << 1 >>
(fromIndex:toIndex: xv15 0 1) => << 1 2 >>
(fromIndex:toIndex: xv15 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv15 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv15 1 1) => << 2 >>
(fromIndex:toIndex: xv15 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv15 -1 -1) => << 6 >>
(fromIndex:toIndex: xv15 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv15 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv15 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv15 -2 -2) => << 5 >>
(fromIndex:toIndex: xv15 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv15 -1 0) => << 6 1 >>
(fromIndex:toIndex: xv15 -2 1) => << 5 6 1 2 >>
(fromIndex:toIndex: xv15 -3 2) => << 4 5 6 1 2 3 >>
(fromIndex:toIndex: xv15 -4 3) => << 3 4 5 6 1 2 3 4 >>
(fromIndex:toIndex: xv15 -5 4) => << 2 3 4 5 6 1 2 3 4 5 >>

##########
Testing xv16
(debug xv16) => SwizzleXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),ArrayXVector(( 1 2 3 4 5 6 )))
(size xv16) => 18
(print xv16) => << 1 1 2 2 3 3 4 4 5 5 6 6 -6 -5 -5 -4 -2 -1 >>
(at:ifAbsent: xv16 xv16 0) => 1
(at:ifAbsent: xv16 xv16 1) => 1
(at:ifAbsent: xv16 xv16 2) => 2
(at:ifAbsent: xv16 xv16 3) => 2
(at:ifAbsent: xv16 xv16 4) => 3
(at:ifAbsent: xv16 xv16 5) => 3
(at:ifAbsent: xv16 7) => 4
(at:ifAbsent: xv16 8) => 5
(at:ifAbsent: xv16 9) => 5
(at:ifAbsent: xv16 1073741823) => nil
(at:ifAbsent: xv16 1073741824) => nil
(at:ifAbsent: xv16 1073741825) => nil
(at:ifAbsent: xv16 -5) => -5
(at:ifAbsent: xv16 -4) => -5
(at:ifAbsent: xv16 -3) => -4
(at:ifAbsent: xv16 -2) => -2
(at:ifAbsent: xv16 -1) => -1
(at:ifAbsent: xv16 -1073741825) => nil
(at:ifAbsent: xv16 -1073741824) => nil
(at:ifAbsent: xv16 -1073741823) => nil
(at:ifAbsent: xv16 -9) => 5
(at:ifAbsent: xv16 -8) => 6
(at:ifAbsent: xv16 -7) => 6
(allMag xv16) => <True>
(allNum xv16) => <True>
(allInt xv16) => <True>
(allFrac xv16) => <False>
(someFrac xv16) => <False>
(allFloat xv16) => <False>
(someFloat xv16) => <False>
(min xv16) => -6
(max xv16) => 6
(sum xv16) => 19
(product xv16) => 622080000
(includes: xv16 nil) => <False>
(occurrencesOf: xv16 nil) => 0
(includes: xv16 nil) => <False>
(occurrencesOf: xv16 nil) => 0
(includes: xv16 <True>) => <False>
(occurrencesOf: xv16 <True>) => 0
(includes: xv16 <False>) => <False>
(occurrencesOf: xv16 <False>) => 0
(includes: xv16 0) => <False>
(occurrencesOf: xv16 0) => 0
(includes: xv16 1) => <True>
(occurrencesOf: xv16 1) => 2
(includes: xv16 42) => <False>
(occurrencesOf: xv16 42) => 0
(detect:ifNone: xv16 negative) => -6
(detect:ifNone: xv16 nonnegative) => 1
(detect:ifNone: xv16 strictlyPositive) => 1
(= xv16 xv16) => <True>
(< xv16 xv16) => <False>
(<= xv16 xv16) => <True>
(> xv16 xv16) => <False>
(>= xv16 xv16) => <True>
(= xv16 nil) => <False>
(= xv16 nil) => <False>
(= xv16 <True>) => <False>
(= xv16 <False>) => <False>
(= xv16 0) => <False>
(= xv16 1) => <False>
(= xv16 42) => <False>
(fromIndex:toIndex: xv16 0 0) => << 1 >>
(fromIndex:toIndex: xv16 0 1) => << 1 1 >>
(fromIndex:toIndex: xv16 0 2) => << 1 1 2 >>
(fromIndex:toIndex: xv16 0 4) => << 1 1 2 2 3 >>
(fromIndex:toIndex: xv16 1 1) => << 1 >>
(fromIndex:toIndex: xv16 1 3) => << 1 2 2 >>
(fromIndex:toIndex: xv16 -1 -1) => << -1 >>
(fromIndex:toIndex: xv16 -2 -1) => << -2 -1 >>
(fromIndex:toIndex: xv16 -3 -1) => << -4 -2 -1 >>
(fromIndex:toIndex: xv16 -5 -1) => << -5 -5 -4 -2 -1 >>
(fromIndex:toIndex: xv16 -2 -2) => << -2 >>
(fromIndex:toIndex: xv16 -4 -2) => << -5 -4 -2 >>
(fromIndex:toIndex: xv16 -1 0) => << -1 1 >>
(fromIndex:toIndex: xv16 -2 1) => << -2 -1 1 1 >>
(fromIndex:toIndex: xv16 -3 2) => << -4 -2 -1 1 1 2 >>
(fromIndex:toIndex: xv16 -4 3) => << -5 -4 -2 -1 1 1 2 2 >>
(fromIndex:toIndex: xv16 -5 4) => << -5 -5 -4 -2 -1 1 1 2 2 3 >>

##########
Testing xv17
(debug xv17) => SwizzleXVector(ReverseXVector(RepeatXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),1000)),RepeatXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 ))),1000))
(size xv17) => 24000
(at:ifAbsent: xv17 xv17 0) => -1
(at:ifAbsent: xv17 xv17 1) => 1
(at:ifAbsent: xv17 xv17 2) => -2
(at:ifAbsent: xv17 xv17 3) => 2
(at:ifAbsent: xv17 xv17 4) => -4
(at:ifAbsent: xv17 xv17 5) => 3
(at:ifAbsent: xv17 7) => 4
(at:ifAbsent: xv17 8) => -5
(at:ifAbsent: xv17 9) => 5
(at:ifAbsent: xv17 1073741823) => nil
(at:ifAbsent: xv17 1073741824) => nil
(at:ifAbsent: xv17 1073741825) => nil
(at:ifAbsent: xv17 -5) => -4
(at:ifAbsent: xv17 -4) => 2
(at:ifAbsent: xv17 -3) => -2
(at:ifAbsent: xv17 -2) => 1
(at:ifAbsent: xv17 -1) => -1
(at:ifAbsent: xv17 -1073741825) => nil
(at:ifAbsent: xv17 -1073741824) => nil
(at:ifAbsent: xv17 -1073741823) => nil
(at:ifAbsent: xv17 -9) => -5
(at:ifAbsent: xv17 -8) => 4
(at:ifAbsent: xv17 -7) => -5
(= xv17 nil) => <False>
(= xv17 nil) => <False>
(= xv17 <True>) => <False>
(= xv17 <False>) => <False>
(= xv17 0) => <False>
(= xv17 1) => <False>
(= xv17 42) => <False>
(fromIndex:toIndex: xv17 0 0) => << -1 >>
(fromIndex:toIndex: xv17 0 1) => << -1 1 >>
(fromIndex:toIndex: xv17 0 2) => << -1 1 -2 >>
(fromIndex:toIndex: xv17 0 4) => << -1 1 -2 2 -4 >>
(fromIndex:toIndex: xv17 1 1) => << 1 >>
(fromIndex:toIndex: xv17 1 3) => << 1 -2 2 >>
(fromIndex:toIndex: xv17 -1 -1) => << -1 >>
(fromIndex:toIndex: xv17 -2 -1) => << 1 -1 >>
(fromIndex:toIndex: xv17 -3 -1) => << -2 1 -1 >>
(fromIndex:toIndex: xv17 -5 -1) => << -4 2 -2 1 -1 >>
(fromIndex:toIndex: xv17 -2 -2) => << 1 >>
(fromIndex:toIndex: xv17 -4 -2) => << 2 -2 1 >>
(fromIndex:toIndex: xv17 -1 0) => << -1 -1 >>
(fromIndex:toIndex: xv17 -2 1) => << 1 -1 -1 1 >>
(fromIndex:toIndex: xv17 -3 2) => << -2 1 -1 -1 1 -2 >>
(fromIndex:toIndex: xv17 -4 3) => << 2 -2 1 -1 -1 1 -2 2 >>
(fromIndex:toIndex: xv17 -5 4) => << -4 2 -2 1 -1 -1 1 -2 2 -4 >>

##########
Testing xv18
(debug xv18) => BlockXVector(100,<BlockFn1>)
(size xv18) => 100
(at:ifAbsent: xv18 xv18 0) => 0
(at:ifAbsent: xv18 xv18 1) => 1
(at:ifAbsent: xv18 xv18 2) => 2
(at:ifAbsent: xv18 xv18 3) => 3
(at:ifAbsent: xv18 xv18 4) => 4
(at:ifAbsent: xv18 xv18 5) => 5
(at:ifAbsent: xv18 7) => 7
(at:ifAbsent: xv18 8) => 8
(at:ifAbsent: xv18 9) => 9
(at:ifAbsent: xv18 1073741823) => nil
(at:ifAbsent: xv18 1073741824) => nil
(at:ifAbsent: xv18 1073741825) => nil
(at:ifAbsent: xv18 -5) => 2
(at:ifAbsent: xv18 -4) => 3
(at:ifAbsent: xv18 -3) => 4
(at:ifAbsent: xv18 -2) => 5
(at:ifAbsent: xv18 -1) => 6
(at:ifAbsent: xv18 -1073741825) => nil
(at:ifAbsent: xv18 -1073741824) => nil
(at:ifAbsent: xv18 -1073741823) => nil
(at:ifAbsent: xv18 -9) => 29
(at:ifAbsent: xv18 -8) => 30
(at:ifAbsent: xv18 -7) => 0
(allMag xv18) => <True>
(allNum xv18) => <True>
(allInt xv18) => <True>
(allFrac xv18) => <False>
(someFrac xv18) => <False>
(allFloat xv18) => <False>
(someFloat xv18) => <False>
(min xv18) => 0
(max xv18) => 30
(sum xv18) => 1416
(includes: xv18 nil) => <False>
(occurrencesOf: xv18 nil) => 0
(includes: xv18 nil) => <False>
(occurrencesOf: xv18 nil) => 0
(includes: xv18 <True>) => <False>
(occurrencesOf: xv18 <True>) => 0
(includes: xv18 <False>) => <False>
(occurrencesOf: xv18 <False>) => 0
(includes: xv18 0) => <True>
(occurrencesOf: xv18 0) => 4
(includes: xv18 1) => <True>
(occurrencesOf: xv18 1) => 4
(includes: xv18 42) => <False>
(occurrencesOf: xv18 42) => 0
(detect:ifNone: xv18 negative) => nil
(detect:ifNone: xv18 nonnegative) => 0
(detect:ifNone: xv18 strictlyPositive) => 1
(= xv18 xv18) => <True>
(< xv18 xv18) => <False>
(<= xv18 xv18) => <True>
(> xv18 xv18) => <False>
(>= xv18 xv18) => <True>
(= xv18 nil) => <False>
(= xv18 nil) => <False>
(= xv18 <True>) => <False>
(= xv18 <False>) => <False>
(= xv18 0) => <False>
(= xv18 1) => <False>
(= xv18 42) => <False>
(fromIndex:toIndex: xv18 0 0) => << 0 >>
(fromIndex:toIndex: xv18 0 1) => << 0 1 >>
(fromIndex:toIndex: xv18 0 2) => << 0 1 2 >>
(fromIndex:toIndex: xv18 0 4) => << 0 1 2 3 4 >>
(fromIndex:toIndex: xv18 1 1) => << 1 >>
(fromIndex:toIndex: xv18 1 3) => << 1 2 3 >>
(fromIndex:toIndex: xv18 -1 -1) => << 6 >>
(fromIndex:toIndex: xv18 -2 -1) => << 5 6 >>
(fromIndex:toIndex: xv18 -3 -1) => << 4 5 6 >>
(fromIndex:toIndex: xv18 -5 -1) => << 2 3 4 5 6 >>
(fromIndex:toIndex: xv18 -2 -2) => << 5 >>
(fromIndex:toIndex: xv18 -4 -2) => << 3 4 5 >>
(fromIndex:toIndex: xv18 -1 0) => << 6 0 >>
(fromIndex:toIndex: xv18 -2 1) => << 5 6 0 1 >>
(fromIndex:toIndex: xv18 -3 2) => << 4 5 6 0 1 2 >>
(fromIndex:toIndex: xv18 -4 3) => << 3 4 5 6 0 1 2 3 >>
(fromIndex:toIndex: xv18 -5 4) => << 2 3 4 5 6 0 1 2 3 4 >>

##########
Testing xv19
(debug xv19) => BlockXVector(100,<BlockFn2>)
(size xv19) => 100
(at:ifAbsent: xv19 xv19 0) => 0
(at:ifAbsent: xv19 xv19 1) => 1
(at:ifAbsent: xv19 xv19 2) => 4
(at:ifAbsent: xv19 xv19 3) => 9
(at:ifAbsent: xv19 xv19 4) => 16
(at:ifAbsent: xv19 xv19 5) => 25
(at:ifAbsent: xv19 7) => 18
(at:ifAbsent: xv19 8) => 2
(at:ifAbsent: xv19 9) => 19
(at:ifAbsent: xv19 1073741823) => nil
(at:ifAbsent: xv19 1073741824) => nil
(at:ifAbsent: xv19 1073741825) => nil
(at:ifAbsent: xv19 -5) => 4
(at:ifAbsent: xv19 -4) => 9
(at:ifAbsent: xv19 -3) => 16
(at:ifAbsent: xv19 -2) => 25
(at:ifAbsent: xv19 -1) => 5
(at:ifAbsent: xv19 -1073741825) => nil
(at:ifAbsent: xv19 -1073741824) => nil
(at:ifAbsent: xv19 -1073741823) => nil
(at:ifAbsent: xv19 -9) => 4
(at:ifAbsent: xv19 -8) => 1
(at:ifAbsent: xv19 -7) => 0
(allMag xv19) => <True>
(allNum xv19) => <True>
(allInt xv19) => <True>
(allFrac xv19) => <False>
(someFrac xv19) => <False>
(allFloat xv19) => <False>
(someFloat xv19) => <False>
(min xv19) => 0
(max xv19) => 28
(sum xv19) => 1176
(includes: xv19 nil) => <False>
(occurrencesOf: xv19 nil) => 0
(includes: xv19 nil) => <False>
(occurrencesOf: xv19 nil) => 0
(includes: xv19 <True>) => <False>
(occurrencesOf: xv19 <True>) => 0
(includes: xv19 <False>) => <False>
(occurrencesOf: xv19 <False>) => 0
(includes: xv19 0) => <True>
(occurrencesOf: xv19 0) => 4
(includes: xv19 1) => <True>
(occurrencesOf: xv19 1) => 7
(includes: xv19 42) => <False>
(occurrencesOf: xv19 42) => 0
(detect:ifNone: xv19 negative) => nil
(detect:ifNone: xv19 nonnegative) => 0
(detect:ifNone: xv19 strictlyPositive) => 1
(= xv19 xv19) => <True>
(< xv19 xv19) => <False>
(<= xv19 xv19) => <True>
(> xv19 xv19) => <False>
(>= xv19 xv19) => <True>
(= xv19 nil) => <False>
(= xv19 nil) => <False>
(= xv19 <True>) => <False>
(= xv19 <False>) => <False>
(= xv19 0) => <False>
(= xv19 1) => <False>
(= xv19 42) => <False>
(fromIndex:toIndex: xv19 0 0) => << 0 >>
(fromIndex:toIndex: xv19 0 1) => << 0 1 >>
(fromIndex:toIndex: xv19 0 2) => << 0 1 4 >>
(fromIndex:toIndex: xv19 0 4) => << 0 1 4 9 16 >>
(fromIndex:toIndex: xv19 1 1) => << 1 >>
(fromIndex:toIndex: xv19 1 3) => << 1 4 9 >>
(fromIndex:toIndex: xv19 -1 -1) => << 5 >>
(fromIndex:toIndex: xv19 -2 -1) => << 25 5 >>
(fromIndex:toIndex: xv19 -3 -1) => << 16 25 5 >>
(fromIndex:toIndex: xv19 -5 -1) => << 4 9 16 25 5 >>
(fromIndex:toIndex: xv19 -2 -2) => << 25 >>
(fromIndex:toIndex: xv19 -4 -2) => << 9 16 25 >>
(fromIndex:toIndex: xv19 -1 0) => << 5 0 >>
(fromIndex:toIndex: xv19 -2 1) => << 25 5 0 1 >>
(fromIndex:toIndex: xv19 -3 2) => << 16 25 5 0 1 4 >>
(fromIndex:toIndex: xv19 -4 3) => << 9 16 25 5 0 1 4 9 >>
(fromIndex:toIndex: xv19 -5 4) => << 4 9 16 25 5 0 1 4 9 16 >>

##########
Testing xv20
(debug xv20) => ConcatXVector(ReverseXVector(RepeatXVector(ReverseXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))),10)),ConcatXVector(ConcatXVector(ReverseXVector(ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))),ReverseXVector(SwizzleXVector(ArrayXVector(( 1 2 3 4 5 6 )),ConcatXVector(ArrayXVector(( 1 2 3 4 5 6 )),ArrayXVector(( -6 -5 -5 -4 -2 -1 )))))),RepeatXVector(BlockXVector(100,<BlockFn2>),10)))
(size xv20) => 1150
(at:ifAbsent: xv20 xv20 0) => 1
(at:ifAbsent: xv20 xv20 1) => 2
(at:ifAbsent: xv20 xv20 2) => 3
(at:ifAbsent: xv20 xv20 3) => 4
(at:ifAbsent: xv20 xv20 4) => 5
(at:ifAbsent: xv20 xv20 5) => 6
(at:ifAbsent: xv20 7) => -5
(at:ifAbsent: xv20 8) => -5
(at:ifAbsent: xv20 9) => -4
(at:ifAbsent: xv20 1073741823) => nil
(at:ifAbsent: xv20 1073741824) => nil
(at:ifAbsent: xv20 1073741825) => nil
(at:ifAbsent: xv20 -5) => 4
(at:ifAbsent: xv20 -4) => 9
(at:ifAbsent: xv20 -3) => 16
(at:ifAbsent: xv20 -2) => 25
(at:ifAbsent: xv20 -1) => 5
(at:ifAbsent: xv20 -1073741825) => nil
(at:ifAbsent: xv20 -1073741824) => nil
(at:ifAbsent: xv20 -1073741823) => nil
(at:ifAbsent: xv20 -9) => 4
(at:ifAbsent: xv20 -8) => 1
(at:ifAbsent: xv20 -7) => 0
(allMag xv20) => <True>
(allNum xv20) => <True>
(allInt xv20) => <True>
(allFrac xv20) => <False>
(someFrac xv20) => <False>
(allFloat xv20) => <False>
(someFloat xv20) => <False>
(min xv20) => -6
(max xv20) => 28
(includes: xv20 nil) => <False>
(occurrencesOf: xv20 nil) => 0
(includes: xv20 nil) => <False>
(occurrencesOf: xv20 nil) => 0
(includes: xv20 <True>) => <False>
(occurrencesOf: xv20 <True>) => 0
(includes: xv20 <False>) => <False>
(occurrencesOf: xv20 <False>) => 0
(includes: xv20 0) => <True>
(occurrencesOf: xv20 0) => 40
(includes: xv20 1) => <True>
(occurrencesOf: xv20 1) => 83
(includes: xv20 42) => <False>
(occurrencesOf: xv20 42) => 0
(detect:ifNone: xv20 negative) => -6
(detect:ifNone: xv20 nonnegative) => 1
(detect:ifNone: xv20 strictlyPositive) => 1
(= xv20 xv20) => <True>
(< xv20 xv20) => <False>
(<= xv20 xv20) => <True>
(> xv20 xv20) => <False>
(>= xv20 xv20) => <True>
(= xv20 nil) => <False>
(= xv20 nil) => <False>
(= xv20 <True>) => <False>
(= xv20 <False>) => <False>
(= xv20 0) => <False>
(= xv20 1) => <False>
(= xv20 42) => <False>
(fromIndex:toIndex: xv20 0 0) => << 1 >>
(fromIndex:toIndex: xv20 0 1) => << 1 2 >>
(fromIndex:toIndex: xv20 0 2) => << 1 2 3 >>
(fromIndex:toIndex: xv20 0 4) => << 1 2 3 4 5 >>
(fromIndex:toIndex: xv20 1 1) => << 2 >>
(fromIndex:toIndex: xv20 1 3) => << 2 3 4 >>
(fromIndex:toIndex: xv20 -1 -1) => << 5 >>
(fromIndex:toIndex: xv20 -2 -1) => << 25 5 >>
(fromIndex:toIndex: xv20 -3 -1) => << 16 25 5 >>
(fromIndex:toIndex: xv20 -5 -1) => << 4 9 16 25 5 >>
(fromIndex:toIndex: xv20 -2 -2) => << 25 >>
(fromIndex:toIndex: xv20 -4 -2) => << 9 16 25 >>
(fromIndex:toIndex: xv20 -1 0) => << 5 1 >>
(fromIndex:toIndex: xv20 -2 1) => << 25 5 1 2 >>
(fromIndex:toIndex: xv20 -3 2) => << 16 25 5 1 2 3 >>
(fromIndex:toIndex: xv20 -4 3) => << 9 16 25 5 1 2 3 4 >>
(fromIndex:toIndex: xv20 -5 4) => << 4 9 16 25 5 1 2 3 4 5 >>

##########
Testing xv01 xv01
(= xv01 xv01) => <True>
(< xv01 xv01) => <False>
(<= xv01 xv01) => <True>
(> xv01 xv01) => <False>
(>= xv01 xv01) => <True>
Testing xv01 xv02
(= xv01 xv02) => <False>
(< xv01 xv02) => <False>
(<= xv01 xv02) => <False>
(> xv01 xv02) => <True>
(>= xv01 xv02) => <True>
Testing xv01 xv03
(= xv01 xv03) => <False>
(< xv01 xv03) => <True>
(<= xv01 xv03) => <True>
(> xv01 xv03) => <False>
(>= xv01 xv03) => <False>
Testing xv01 xv04
(= xv01 xv04) => <False>
(< xv01 xv04) => <True>
(<= xv01 xv04) => <True>
(> xv01 xv04) => <False>
(>= xv01 xv04) => <False>
Testing xv01 xv05
(= xv01 xv05) => <False>
(< xv01 xv05) => <False>
(<= xv01 xv05) => <False>
(> xv01 xv05) => <True>
(>= xv01 xv05) => <True>
Testing xv01 xv06
(= xv01 xv06) => <False>
(< xv01 xv06) => <True>
(<= xv01 xv06) => <True>
(> xv01 xv06) => <False>
(>= xv01 xv06) => <False>
Testing xv01 xv07
(= xv01 xv07) => <False>
(< xv01 xv07) => <True>
(<= xv01 xv07) => <True>
(> xv01 xv07) => <False>
(>= xv01 xv07) => <False>
Testing xv01 xv08
(= xv01 xv08) => <False>
(< xv01 xv08) => <False>
(<= xv01 xv08) => <False>
(> xv01 xv08) => <True>
(>= xv01 xv08) => <True>
Testing xv01 xv09
(= xv01 xv09) => <False>
(< xv01 xv09) => <False>
(<= xv01 xv09) => <False>
(> xv01 xv09) => <True>
(>= xv01 xv09) => <True>
Testing xv01 xv10
(= xv01 xv10) => <False>
(< xv01 xv10) => <False>
(<= xv01 xv10) => <False>
(> xv01 xv10) => <True>
(>= xv01 xv10) => <True>
Testing xv01 xv11
(= xv01 xv11) => <False>
(< xv01 xv11) => <False>
(<= xv01 xv11) => <False>
(> xv01 xv11) => <True>
(>= xv01 xv11) => <True>
Testing xv01 xv12
(= xv01 xv12) => <False>
(< xv01 xv12) => <False>
(<= xv01 xv12) => <False>
(> xv01 xv12) => <True>
(>= xv01 xv12) => <True>
Testing xv01 xv13
(= xv01 xv13) => <False>
(< xv01 xv13) => <False>
(<= xv01 xv13) => <False>
(> xv01 xv13) => <True>
(>= xv01 xv13) => <True>
Testing xv01 xv14
(= xv01 xv14) => <False>
(< xv01 xv14) => <False>
(<= xv01 xv14) => <False>
(> xv01 xv14) => <True>
(>= xv01 xv14) => <True>
Testing xv01 xv15
(= xv01 xv15) => <False>
(< xv01 xv15) => <True>
(<= xv01 xv15) => <True>
(> xv01 xv15) => <False>
(>= xv01 xv15) => <False>
Testing xv01 xv16
(= xv01 xv16) => <False>
(< xv01 xv16) => <False>
(<= xv01 xv16) => <False>
(> xv01 xv16) => <True>
(>= xv01 xv16) => <True>
Testing xv01 xv17
(= xv01 xv17) => <False>
(< xv01 xv17) => <False>
(<= xv01 xv17) => <False>
(> xv01 xv17) => <True>
(>= xv01 xv17) => <True>
Testing xv01 xv18
(= xv01 xv18) => <False>
(< xv01 xv18) => <False>
(<= xv01 xv18) => <False>
(> xv01 xv18) => <True>
(>= xv01 xv18) => <True>
Testing xv01 xv19
(= xv01 xv19) => <False>
(< xv01 xv19) => <False>
(<= xv01 xv19) => <False>
(> xv01 xv19) => <True>
(>= xv01 xv19) => <True>
Testing xv01 xv20
(= xv01 xv20) => <False>
(< xv01 xv20) => <True>
(<= xv01 xv20) => <True>
(> xv01 xv20) => <False>
(>= xv01 xv20) => <False>
Testing xv02 xv01
(= xv02 xv01) => <False>
(< xv02 xv01) => <True>
(<= xv02 xv01) => <True>
(> xv02 xv01) => <False>
(>= xv02 xv01) => <False>
Testing xv02 xv02
(= xv02 xv02) => <True>
(< xv02 xv02) => <False>
(<= xv02 xv02) => <True>
(> xv02 xv02) => <False>
(>= xv02 xv02) => <True>
Testing xv02 xv03
(= xv02 xv03) => <False>
(< xv02 xv03) => <True>
(<= xv02 xv03) => <True>
(> xv02 xv03) => <False>
(>= xv02 xv03) => <False>
Testing xv02 xv04
(= xv02 xv04) => <False>
(< xv02 xv04) => <True>
(<= xv02 xv04) => <True>
(> xv02 xv04) => <False>
(>= xv02 xv04) => <False>
Testing xv02 xv05
(= xv02 xv05) => <False>
(< xv02 xv05) => <False>
(<= xv02 xv05) => <False>
(> xv02 xv05) => <True>
(>= xv02 xv05) => <True>
Testing xv02 xv06
(= xv02 xv06) => <False>
(< xv02 xv06) => <True>
(<= xv02 xv06) => <True>
(> xv02 xv06) => <False>
(>= xv02 xv06) => <False>
Testing xv02 xv07
(= xv02 xv07) => <False>
(< xv02 xv07) => <True>
(<= xv02 xv07) => <True>
(> xv02 xv07) => <False>
(>= xv02 xv07) => <False>
Testing xv02 xv08
(= xv02 xv08) => <False>
(< xv02 xv08) => <True>
(<= xv02 xv08) => <True>
(> xv02 xv08) => <False>
(>= xv02 xv08) => <False>
Testing xv02 xv09
(= xv02 xv09) => <False>
(< xv02 xv09) => <False>
(<= xv02 xv09) => <False>
(> xv02 xv09) => <True>
(>= xv02 xv09) => <True>
Testing xv02 xv10
(= xv02 xv10) => <False>
(< xv02 xv10) => <True>
(<= xv02 xv10) => <True>
(> xv02 xv10) => <False>
(>= xv02 xv10) => <False>
Testing xv02 xv11
(= xv02 xv11) => <False>
(< xv02 xv11) => <True>
(<= xv02 xv11) => <True>
(> xv02 xv11) => <False>
(>= xv02 xv11) => <False>
Testing xv02 xv12
(= xv02 xv12) => <False>
(< xv02 xv12) => <True>
(<= xv02 xv12) => <True>
(> xv02 xv12) => <False>
(>= xv02 xv12) => <False>
Testing xv02 xv13
(= xv02 xv13) => <False>
(< xv02 xv13) => <True>
(<= xv02 xv13) => <True>
(> xv02 xv13) => <False>
(>= xv02 xv13) => <False>
Testing xv02 xv14
(= xv02 xv14) => <False>
(< xv02 xv14) => <True>
(<= xv02 xv14) => <True>
(> xv02 xv14) => <False>
(>= xv02 xv14) => <False>
Testing xv02 xv15
(= xv02 xv15) => <False>
(< xv02 xv15) => <True>
(<= xv02 xv15) => <True>
(> xv02 xv15) => <False>
(>= xv02 xv15) => <False>
Testing xv02 xv16
(= xv02 xv16) => <False>
(< xv02 xv16) => <True>
(<= xv02 xv16) => <True>
(> xv02 xv16) => <False>
(>= xv02 xv16) => <False>
Testing xv02 xv17
(= xv02 xv17) => <False>
(< xv02 xv17) => <True>
(<= xv02 xv17) => <True>
(> xv02 xv17) => <False>
(>= xv02 xv17) => <False>
Testing xv02 xv18
(= xv02 xv18) => <False>
(< xv02 xv18) => <True>
(<= xv02 xv18) => <True>
(> xv02 xv18) => <False>
(>= xv02 xv18) => <False>
Testing xv02 xv19
(= xv02 xv19) => <False>
(< xv02 xv19) => <True>
(<= xv02 xv19) => <True>
(> xv02 xv19) => <False>
(>= xv02 xv19) => <False>
Testing xv02 xv20
(= xv02 xv20) => <False>
(< xv02 xv20) => <True>
(<= xv02 xv20) => <True>
(> xv02 xv20) => <False>
(>= xv02 xv20) => <False>
Testing xv03 xv01
(= xv03 xv01) => <False>
(< xv03 xv01) => <False>
(<= xv03 xv01) => <False>
(> xv03 xv01) => <True>
(>= xv03 xv01) => <True>
Testing xv03 xv02
(= xv03 xv02) => <False>
(< xv03 xv02) => <False>
(<= xv03 xv02) => <False>
(> xv03 xv02) => <True>
(>= xv03 xv02) => <True>
Testing xv03 xv03
(= xv03 xv03) => <True>
(< xv03 xv03) => <False>
(<= xv03 xv03) => <True>
(> xv03 xv03) => <False>
(>= xv03 xv03) => <True>
Testing xv03 xv04
(= xv03 xv04) => <False>
(< xv03 xv04) => <True>
(<= xv03 xv04) => <True>
(> xv03 xv04) => <False>
(>= xv03 xv04) => <False>
Testing xv03 xv05
(= xv03 xv05) => <False>
(< xv03 xv05) => <False>
(<= xv03 xv05) => <False>
(> xv03 xv05) => <True>
(>= xv03 xv05) => <True>
Testing xv03 xv06
(= xv03 xv06) => <False>
(< xv03 xv06) => <True>
(<= xv03 xv06) => <True>
(> xv03 xv06) => <False>
(>= xv03 xv06) => <False>
Testing xv03 xv07
(= xv03 xv07) => <False>
(< xv03 xv07) => <True>
(<= xv03 xv07) => <True>
(> xv03 xv07) => <False>
(>= xv03 xv07) => <False>
Testing xv03 xv08
(= xv03 xv08) => <False>
(< xv03 xv08) => <False>
(<= xv03 xv08) => <False>
(> xv03 xv08) => <True>
(>= xv03 xv08) => <True>
Testing xv03 xv09
(= xv03 xv09) => <False>
(< xv03 xv09) => <False>
(<= xv03 xv09) => <False>
(> xv03 xv09) => <True>
(>= xv03 xv09) => <True>
Testing xv03 xv10
(= xv03 xv10) => <False>
(< xv03 xv10) => <False>
(<= xv03 xv10) => <False>
(> xv03 xv10) => <True>
(>= xv03 xv10) => <True>
Testing xv03 xv11
(= xv03 xv11) => <False>
(< xv03 xv11) => <False>
(<= xv03 xv11) => <False>
(> xv03 xv11) => <True>
(>= xv03 xv11) => <True>
Testing xv03 xv12
(= xv03 xv12) => <False>
(< xv03 xv12) => <False>
(<= xv03 xv12) => <False>
(> xv03 xv12) => <True>
(>= xv03 xv12) => <True>
Testing xv03 xv13
(= xv03 xv13) => <False>
(< xv03 xv13) => <False>
(<= xv03 xv13) => <False>
(> xv03 xv13) => <True>
(>= xv03 xv13) => <True>
Testing xv03 xv14
(= xv03 xv14) => <False>
(< xv03 xv14) => <False>
(<= xv03 xv14) => <False>
(> xv03 xv14) => <True>
(>= xv03 xv14) => <True>
Testing xv03 xv15
(= xv03 xv15) => <False>
(< xv03 xv15) => <True>
(<= xv03 xv15) => <True>
(> xv03 xv15) => <False>
(>= xv03 xv15) => <False>
Testing xv03 xv16
(= xv03 xv16) => <False>
(< xv03 xv16) => <False>
(<= xv03 xv16) => <False>
(> xv03 xv16) => <True>
(>= xv03 xv16) => <True>
Testing xv03 xv17
(= xv03 xv17) => <False>
(< xv03 xv17) => <False>
(<= xv03 xv17) => <False>
(> xv03 xv17) => <True>
(>= xv03 xv17) => <True>
Testing xv03 xv18
(= xv03 xv18) => <False>
(< xv03 xv18) => <False>
(<= xv03 xv18) => <False>
(> xv03 xv18) => <True>
(>= xv03 xv18) => <True>
Testing xv03 xv19
(= xv03 xv19) => <False>
(< xv03 xv19) => <False>
(<= xv03 xv19) => <False>
(> xv03 xv19) => <True>
(>= xv03 xv19) => <True>
Testing xv03 xv20
(= xv03 xv20) => <False>
(< xv03 xv20) => <True>
(<= xv03 xv20) => <True>
(> xv03 xv20) => <False>
(>= xv03 xv20) => <False>
Testing xv04 xv01
(= xv04 xv01) => <False>
(< xv04 xv01) => <False>
(<= xv04 xv01) => <False>
(> xv04 xv01) => <True>
(>= xv04 xv01) => <True>
Testing xv04 xv02
(= xv04 xv02) => <False>
(< xv04 xv02) => <False>
(<= xv04 xv02) => <False>
(> xv04 xv02) => <True>
(>= xv04 xv02) => <True>
Testing xv04 xv03
(= xv04 xv03) => <False>
(< xv04 xv03) => <False>
(<= xv04 xv03) => <False>
(> xv04 xv03) => <True>
(>= xv04 xv03) => <True>
Testing xv04 xv04
(= xv04 xv04) => <True>
(< xv04 xv04) => <False>
(<= xv04 xv04) => <True>
(> xv04 xv04) => <False>
(>= xv04 xv04) => <True>
Testing xv04 xv05
(= xv04 xv05) => <False>
(< xv04 xv05) => <False>
(<= xv04 xv05) => <False>
(> xv04 xv05) => <True>
(>= xv04 xv05) => <True>
Testing xv04 xv06
(= xv04 xv06) => <False>
(< xv04 xv06) => <False>
(<= xv04 xv06) => <False>
(> xv04 xv06) => <True>
(>= xv04 xv06) => <True>
Testing xv04 xv07
(= xv04 xv07) => <False>
(< xv04 xv07) => <True>
(<= xv04 xv07) => <True>
(> xv04 xv07) => <False>
(>= xv04 xv07) => <False>
Testing xv04 xv08
(= xv04 xv08) => <False>
(< xv04 xv08) => <False>
(<= xv04 xv08) => <False>
(> xv04 xv08) => <True>
(>= xv04 xv08) => <True>
Testing xv04 xv09
(= xv04 xv09) => <False>
(< xv04 xv09) => <False>
(<= xv04 xv09) => <False>
(> xv04 xv09) => <True>
(>= xv04 xv09) => <True>
Testing xv04 xv10
(= xv04 xv10) => <False>
(< xv04 xv10) => <False>
(<= xv04 xv10) => <False>
(> xv04 xv10) => <True>
(>= xv04 xv10) => <True>
Testing xv04 xv11
(= xv04 xv11) => <False>
(< xv04 xv11) => <False>
(<= xv04 xv11) => <False>
(> xv04 xv11) => <True>
(>= xv04 xv11) => <True>
Testing xv04 xv12
(= xv04 xv12) => <False>
(< xv04 xv12) => <False>
(<= xv04 xv12) => <False>
(> xv04 xv12) => <True>
(>= xv04 xv12) => <True>
Testing xv04 xv13
(= xv04 xv13) => <False>
(< xv04 xv13) => <False>
(<= xv04 xv13) => <False>
(> xv04 xv13) => <True>
(>= xv04 xv13) => <True>
Testing xv04 xv14
(= xv04 xv14) => <False>
(< xv04 xv14) => <False>
(<= xv04 xv14) => <False>
(> xv04 xv14) => <True>
(>= xv04 xv14) => <True>
Testing xv04 xv15
(= xv04 xv15) => <False>
(< xv04 xv15) => <False>
(<= xv04 xv15) => <True>
(> xv04 xv15) => <False>
(>= xv04 xv15) => <True>
Testing xv04 xv16
(= xv04 xv16) => <False>
(< xv04 xv16) => <False>
(<= xv04 xv16) => <False>
(> xv04 xv16) => <True>
(>= xv04 xv16) => <True>
Testing xv04 xv17
(= xv04 xv17) => <False>
(< xv04 xv17) => <False>
(<= xv04 xv17) => <False>
(> xv04 xv17) => <True>
(>= xv04 xv17) => <True>
Testing xv04 xv18
(= xv04 xv18) => <False>
(< xv04 xv18) => <False>
(<= xv04 xv18) => <False>
(> xv04 xv18) => <True>
(>= xv04 xv18) => <True>
Testing xv04 xv19
(= xv04 xv19) => <False>
(< xv04 xv19) => <False>
(<= xv04 xv19) => <False>
(> xv04 xv19) => <True>
(>= xv04 xv19) => <True>
Testing xv04 xv20
(= xv04 xv20) => <False>
(< xv04 xv20) => <False>
(<= xv04 xv20) => <False>
(> xv04 xv20) => <True>
(>= xv04 xv20) => <True>
Testing xv05 xv01
(= xv05 xv01) => <False>
(< xv05 xv01) => <True>
(<= xv05 xv01) => <True>
(> xv05 xv01) => <False>
(>= xv05 xv01) => <False>
Testing xv05 xv02
(= xv05 xv02) => <False>
(< xv05 xv02) => <True>
(<= xv05 xv02) => <True>
(> xv05 xv02) => <False>
(>= xv05 xv02) => <False>
Testing xv05 xv03
(= xv05 xv03) => <False>
(< xv05 xv03) => <True>
(<= xv05 xv03) => <True>
(> xv05 xv03) => <False>
(>= xv05 xv03) => <False>
Testing xv05 xv04
(= xv05 xv04) => <False>
(< xv05 xv04) => <True>
(<= xv05 xv04) => <True>
(> xv05 xv04) => <False>
(>= xv05 xv04) => <False>
Testing xv05 xv05
(= xv05 xv05) => <True>
(< xv05 xv05) => <False>
(<= xv05 xv05) => <True>
(> xv05 xv05) => <False>
(>= xv05 xv05) => <True>
Testing xv05 xv06
(= xv05 xv06) => <False>
(< xv05 xv06) => <True>
(<= xv05 xv06) => <True>
(> xv05 xv06) => <False>
(>= xv05 xv06) => <False>
Testing xv05 xv07
(= xv05 xv07) => <False>
(< xv05 xv07) => <True>
(<= xv05 xv07) => <True>
(> xv05 xv07) => <False>
(>= xv05 xv07) => <False>
Testing xv05 xv08
(= xv05 xv08) => <False>
(< xv05 xv08) => <True>
(<= xv05 xv08) => <True>
(> xv05 xv08) => <False>
(>= xv05 xv08) => <False>
Testing xv05 xv09
(= xv05 xv09) => <False>
(< xv05 xv09) => <False>
(<= xv05 xv09) => <True>
(> xv05 xv09) => <False>
(>= xv05 xv09) => <True>
Testing xv05 xv10
(= xv05 xv10) => <False>
(< xv05 xv10) => <True>
(<= xv05 xv10) => <True>
(> xv05 xv10) => <False>
(>= xv05 xv10) => <False>
Testing xv05 xv11
(= xv05 xv11) => <False>
(< xv05 xv11) => <True>
(<= xv05 xv11) => <True>
(> xv05 xv11) => <False>
(>= xv05 xv11) => <False>
Testing xv05 xv12
(= xv05 xv12) => <False>
(< xv05 xv12) => <True>
(<= xv05 xv12) => <True>
(> xv05 xv12) => <False>
(>= xv05 xv12) => <False>
Testing xv05 xv13
(= xv05 xv13) => <False>
(< xv05 xv13) => <True>
(<= xv05 xv13) => <True>
(> xv05 xv13) => <False>
(>= xv05 xv13) => <False>
Testing xv05 xv14
(= xv05 xv14) => <False>
(< xv05 xv14) => <True>
(<= xv05 xv14) => <True>
(> xv05 xv14) => <False>
(>= xv05 xv14) => <False>
Testing xv05 xv15
(= xv05 xv15) => <False>
(< xv05 xv15) => <True>
(<= xv05 xv15) => <True>
(> xv05 xv15) => <False>
(>= xv05 xv15) => <False>
Testing xv05 xv16
(= xv05 xv16) => <False>
(< xv05 xv16) => <True>
(<= xv05 xv16) => <True>
(> xv05 xv16) => <False>
(>= xv05 xv16) => <False>
Testing xv05 xv17
(= xv05 xv17) => <False>
(< xv05 xv17) => <True>
(<= xv05 xv17) => <True>
(> xv05 xv17) => <False>
(>= xv05 xv17) => <False>
Testing xv05 xv18
(= xv05 xv18) => <False>
(< xv05 xv18) => <True>
(<= xv05 xv18) => <True>
(> xv05 xv18) => <False>
(>= xv05 xv18) => <False>
Testing xv05 xv19
(= xv05 xv19) => <False>
(< xv05 xv19) => <True>
(<= xv05 xv19) => <True>
(> xv05 xv19) => <False>
(>= xv05 xv19) => <False>
Testing xv05 xv20
(= xv05 xv20) => <False>
(< xv05 xv20) => <True>
(<= xv05 xv20) => <True>
(> xv05 xv20) => <False>
(>= xv05 xv20) => <False>
Testing xv06 xv01
(= xv06 xv01) => <False>
(< xv06 xv01) => <False>
(<= xv06 xv01) => <False>
(> xv06 xv01) => <True>
(>= xv06 xv01) => <True>
Testing xv06 xv02
(= xv06 xv02) => <False>
(< xv06 xv02) => <False>
(<= xv06 xv02) => <False>
(> xv06 xv02) => <True>
(>= xv06 xv02) => <True>
Testing xv06 xv03
(= xv06 xv03) => <False>
(< xv06 xv03) => <False>
(<= xv06 xv03) => <False>
(> xv06 xv03) => <True>
(>= xv06 xv03) => <True>
Testing xv06 xv04
(= xv06 xv04) => <False>
(< xv06 xv04) => <True>
(<= xv06 xv04) => <True>
(> xv06 xv04) => <False>
(>= xv06 xv04) => <False>
Testing xv06 xv05
(= xv06 xv05) => <False>
(< xv06 xv05) => <False>
(<= xv06 xv05) => <False>
(> xv06 xv05) => <True>
(>= xv06 xv05) => <True>
Testing xv06 xv07
(= xv06 xv07) => <False>
(< xv06 xv07) => <True>
(<= xv06 xv07) => <True>
(> xv06 xv07) => <False>
(>= xv06 xv07) => <False>
Testing xv06 xv08
(= xv06 xv08) => <False>
(< xv06 xv08) => <False>
(<= xv06 xv08) => <False>
(> xv06 xv08) => <True>
(>= xv06 xv08) => <True>
Testing xv06 xv09
(= xv06 xv09) => <False>
(< xv06 xv09) => <False>
(<= xv06 xv09) => <False>
(> xv06 xv09) => <True>
(>= xv06 xv09) => <True>
Testing xv06 xv11
(= xv06 xv11) => <False>
(< xv06 xv11) => <False>
(<= xv06 xv11) => <False>
(> xv06 xv11) => <True>
(>= xv06 xv11) => <True>
Testing xv06 xv12
(= xv06 xv12) => <False>
(< xv06 xv12) => <False>
(<= xv06 xv12) => <False>
(> xv06 xv12) => <True>
(>= xv06 xv12) => <True>
Testing xv06 xv13
(= xv06 xv13) => <False>
(< xv06 xv13) => <False>
(<= xv06 xv13) => <False>
(> xv06 xv13) => <True>
(>= xv06 xv13) => <True>
Testing xv06 xv14
(= xv06 xv14) => <False>
(< xv06 xv14) => <False>
(<= xv06 xv14) => <False>
(> xv06 xv14) => <True>
(>= xv06 xv14) => <True>
Testing xv06 xv15
(= xv06 xv15) => <False>
(< xv06 xv15) => <True>
(<= xv06 xv15) => <True>
(> xv06 xv15) => <False>
(>= xv06 xv15) => <False>
Testing xv06 xv16
(= xv06 xv16) => <False>
(< xv06 xv16) => <False>
(<= xv06 xv16) => <False>
(> xv06 xv16) => <True>
(>= xv06 xv16) => <True>
Testing xv06 xv18
(= xv06 xv18) => <False>
(< xv06 xv18) => <False>
(<= xv06 xv18) => <False>
(> xv06 xv18) => <True>
(>= xv06 xv18) => <True>
Testing xv06 xv19
(= xv06 xv19) => <False>
(< xv06 xv19) => <False>
(<= xv06 xv19) => <False>
(> xv06 xv19) => <True>
(>= xv06 xv19) => <True>
Testing xv07 xv01
(= xv07 xv01) => <False>
(< xv07 xv01) => <False>
(<= xv07 xv01) => <False>
(> xv07 xv01) => <True>
(>= xv07 xv01) => <True>
Testing xv07 xv02
(= xv07 xv02) => <False>
(< xv07 xv02) => <False>
(<= xv07 xv02) => <False>
(> xv07 xv02) => <True>
(>= xv07 xv02) => <True>
Testing xv07 xv03
(= xv07 xv03) => <False>
(< xv07 xv03) => <False>
(<= xv07 xv03) => <False>
(> xv07 xv03) => <True>
(>= xv07 xv03) => <True>
Testing xv07 xv04
(= xv07 xv04) => <False>
(< xv07 xv04) => <False>
(<= xv07 xv04) => <False>
(> xv07 xv04) => <True>
(>= xv07 xv04) => <True>
Testing xv07 xv05
(= xv07 xv05) => <False>
(< xv07 xv05) => <False>
(<= xv07 xv05) => <False>
(> xv07 xv05) => <True>
(>= xv07 xv05) => <True>
Testing xv07 xv06
(= xv07 xv06) => <False>
(< xv07 xv06) => <False>
(<= xv07 xv06) => <False>
(> xv07 xv06) => <True>
(>= xv07 xv06) => <True>
Testing xv07 xv07
(= xv07 xv07) => <True>
(< xv07 xv07) => <False>
(<= xv07 xv07) => <True>
(> xv07 xv07) => <False>
(>= xv07 xv07) => <True>
Testing xv07 xv08
(= xv07 xv08) => <False>
(< xv07 xv08) => <False>
(<= xv07 xv08) => <False>
(> xv07 xv08) => <True>
(>= xv07 xv08) => <True>
Testing xv07 xv09
(= xv07 xv09) => <False>
(< xv07 xv09) => <False>
(<= xv07 xv09) => <False>
(> xv07 xv09) => <True>
(>= xv07 xv09) => <True>
Testing xv07 xv10
(= xv07 xv10) => <False>
(< xv07 xv10) => <False>
(<= xv07 xv10) => <False>
(> xv07 xv10) => <True>
(>= xv07 xv10) => <True>
Testing xv07 xv11
(= xv07 xv11) => <False>
(< xv07 xv11) => <False>
(<= xv07 xv11) => <False>
(> xv07 xv11) => <True>
(>= xv07 xv11) => <True>
Testing xv07 xv12
(= xv07 xv12) => <False>
(< xv07 xv12) => <False>
(<= xv07 xv12) => <False>
(> xv07 xv12) => <True>
(>= xv07 xv12) => <True>
Testing xv07 xv13
(= xv07 xv13) => <False>
(< xv07 xv13) => <False>
(<= xv07 xv13) => <False>
(> xv07 xv13) => <True>
(>= xv07 xv13) => <True>
Testing xv07 xv14
(= xv07 xv14) => <False>
(< xv07 xv14) => <False>
(<= xv07 xv14) => <False>
(> xv07 xv14) => <True>
(>= xv07 xv14) => <True>
Testing xv07 xv15
(= xv07 xv15) => <False>
(< xv07 xv15) => <False>
(<= xv07 xv15) => <False>
(> xv07 xv15) => <True>
(>= xv07 xv15) => <True>
Testing xv07 xv16
(= xv07 xv16) => <False>
(< xv07 xv16) => <False>
(<= xv07 xv16) => <False>
(> xv07 xv16) => <True>
(>= xv07 xv16) => <True>
Testing xv07 xv17
(= xv07 xv17) => <False>
(< xv07 xv17) => <False>
(<= xv07 xv17) => <False>
(> xv07 xv17) => <True>
(>= xv07 xv17) => <True>
Testing xv07 xv18
(= xv07 xv18) => <False>
(< xv07 xv18) => <False>
(<= xv07 xv18) => <False>
(> xv07 xv18) => <True>
(>= xv07 xv18) => <True>
Testing xv07 xv19
(= xv07 xv19) => <False>
(< xv07 xv19) => <False>
(<= xv07 xv19) => <False>
(> xv07 xv19) => <True>
(>= xv07 xv19) => <True>
Testing xv07 xv20
(= xv07 xv20) => <False>
(< xv07 xv20) => <False>
(<= xv07 xv20) => <False>
(> xv07 xv20) => <True>
(>= xv07 xv20) => <True>
Testing xv08 xv01
(= xv08 xv01) => <False>
(< xv08 xv01) => <True>
(<= xv08 xv01) => <True>
(> xv08 xv01) => <False>
(>= xv08 xv01) => <False>
Testing xv08 xv02
(= xv08 xv02) => <False>
(< xv08 xv02) => <False>
(<= xv08 xv02) => <False>
(> xv08 xv02) => <True>
(>= xv08 xv02) => <True>
Testing xv08 xv03
(= xv08 xv03) => <False>
(< xv08 xv03) => <True>
(<= xv08 xv03) => <True>
(> xv08 xv03) => <False>
(>= xv08 xv03) => <False>
Testing xv08 xv04
(= xv08 xv04) => <False>
(< xv08 xv04) => <True>
(<= xv08 xv04) => <True>
(> xv08 xv04) => <False>
(>= xv08 xv04) => <False>
Testing xv08 xv05
(= xv08 xv05) => <False>
(< xv08 xv05) => <False>
(<= xv08 xv05) => <False>
(> xv08 xv05) => <True>
(>= xv08 xv05) => <True>
Testing xv08 xv06
(= xv08 xv06) => <False>
(< xv08 xv06) => <True>
(<= xv08 xv06) => <True>
(> xv08 xv06) => <False>
(>= xv08 xv06) => <False>
Testing xv08 xv07
(= xv08 xv07) => <False>
(< xv08 xv07) => <True>
(<= xv08 xv07) => <True>
(> xv08 xv07) => <False>
(>= xv08 xv07) => <False>
Testing xv08 xv08
(= xv08 xv08) => <True>
(< xv08 xv08) => <False>
(<= xv08 xv08) => <True>
(> xv08 xv08) => <False>
(>= xv08 xv08) => <True>
Testing xv08 xv09
(= xv08 xv09) => <False>
(< xv08 xv09) => <False>
(<= xv08 xv09) => <False>
(> xv08 xv09) => <True>
(>= xv08 xv09) => <True>
Testing xv08 xv10
(= xv08 xv10) => <False>
(< xv08 xv10) => <True>
(<= xv08 xv10) => <True>
(> xv08 xv10) => <False>
(>= xv08 xv10) => <False>
Testing xv08 xv11
(= xv08 xv11) => <False>
(< xv08 xv11) => <False>
(<= xv08 xv11) => <True>
(> xv08 xv11) => <False>
(>= xv08 xv11) => <True>
Testing xv08 xv12
(= xv08 xv12) => <False>
(< xv08 xv12) => <True>
(<= xv08 xv12) => <True>
(> xv08 xv12) => <False>
(>= xv08 xv12) => <False>
Testing xv08 xv13
(= xv08 xv13) => <False>
(< xv08 xv13) => <True>
(<= xv08 xv13) => <True>
(> xv08 xv13) => <False>
(>= xv08 xv13) => <False>
Testing xv08 xv14
(= xv08 xv14) => <False>
(< xv08 xv14) => <True>
(<= xv08 xv14) => <True>
(> xv08 xv14) => <False>
(>= xv08 xv14) => <False>
Testing xv08 xv15
(= xv08 xv15) => <False>
(< xv08 xv15) => <True>
(<= xv08 xv15) => <True>
(> xv08 xv15) => <False>
(>= xv08 xv15) => <False>
Testing xv08 xv16
(= xv08 xv16) => <False>
(< xv08 xv16) => <True>
(<= xv08 xv16) => <True>
(> xv08 xv16) => <False>
(>= xv08 xv16) => <False>
Testing xv08 xv17
(= xv08 xv17) => <False>
(< xv08 xv17) => <True>
(<= xv08 xv17) => <True>
(> xv08 xv17) => <False>
(>= xv08 xv17) => <False>
Testing xv08 xv18
(= xv08 xv18) => <False>
(< xv08 xv18) => <True>
(<= xv08 xv18) => <True>
(> xv08 xv18) => <False>
(>= xv08 xv18) => <False>
Testing xv08 xv19
(= xv08 xv19) => <False>
(< xv08 xv19) => <True>
(<= xv08 xv19) => <True>
(> xv08 xv19) => <False>
(>= xv08 xv19) => <False>
Testing xv08 xv20
(= xv08 xv20) => <False>
(< xv08 xv20) => <True>
(<= xv08 xv20) => <True>
(> xv08 xv20) => <False>
(>= xv08 xv20) => <False>
Testing xv09 xv01
(= xv09 xv01) => <False>
(< xv09 xv01) => <True>
(<= xv09 xv01) => <True>
(> xv09 xv01) => <False>
(>= xv09 xv01) => <False>
Testing xv09 xv02
(= xv09 xv02) => <False>
(< xv09 xv02) => <True>
(<= xv09 xv02) => <True>
(> xv09 xv02) => <False>
(>= xv09 xv02) => <False>
Testing xv09 xv03
(= xv09 xv03) => <False>
(< xv09 xv03) => <True>
(<= xv09 xv03) => <True>
(> xv09 xv03) => <False>
(>= xv09 xv03) => <False>
Testing xv09 xv04
(= xv09 xv04) => <False>
(< xv09 xv04) => <True>
(<= xv09 xv04) => <True>
(> xv09 xv04) => <False>
(>= xv09 xv04) => <False>
Testing xv09 xv05
(= xv09 xv05) => <False>
(< xv09 xv05) => <False>
(<= xv09 xv05) => <True>
(> xv09 xv05) => <False>
(>= xv09 xv05) => <True>
Testing xv09 xv06
(= xv09 xv06) => <False>
(< xv09 xv06) => <True>
(<= xv09 xv06) => <True>
(> xv09 xv06) => <False>
(>= xv09 xv06) => <False>
Testing xv09 xv07
(= xv09 xv07) => <False>
(< xv09 xv07) => <True>
(<= xv09 xv07) => <True>
(> xv09 xv07) => <False>
(>= xv09 xv07) => <False>
Testing xv09 xv08
(= xv09 xv08) => <False>
(< xv09 xv08) => <True>
(<= xv09 xv08) => <True>
(> xv09 xv08) => <False>
(>= xv09 xv08) => <False>
Testing xv09 xv09
(= xv09 xv09) => <True>
(< xv09 xv09) => <False>
(<= xv09 xv09) => <True>
(> xv09 xv09) => <False>
(>= xv09 xv09) => <True>
Testing xv09 xv10
(= xv09 xv10) => <False>
(< xv09 xv10) => <True>
(<= xv09 xv10) => <True>
(> xv09 xv10) => <False>
(>= xv09 xv10) => <False>
Testing xv09 xv11
(= xv09 xv11) => <False>
(< xv09 xv11) => <True>
(<= xv09 xv11) => <True>
(> xv09 xv11) => <False>
(>= xv09 xv11) => <False>
Testing xv09 xv12
(= xv09 xv12) => <False>
(< xv09 xv12) => <True>
(<= xv09 xv12) => <True>
(> xv09 xv12) => <False>
(>= xv09 xv12) => <False>
Testing xv09 xv13
(= xv09 xv13) => <False>
(< xv09 xv13) => <True>
(<= xv09 xv13) => <True>
(> xv09 xv13) => <False>
(>= xv09 xv13) => <False>
Testing xv09 xv14
(= xv09 xv14) => <False>
(< xv09 xv14) => <True>
(<= xv09 xv14) => <True>
(> xv09 xv14) => <False>
(>= xv09 xv14) => <False>
Testing xv09 xv15
(= xv09 xv15) => <False>
(< xv09 xv15) => <True>
(<= xv09 xv15) => <True>
(> xv09 xv15) => <False>
(>= xv09 xv15) => <False>
Testing xv09 xv16
(= xv09 xv16) => <False>
(< xv09 xv16) => <True>
(<= xv09 xv16) => <True>
(> xv09 xv16) => <False>
(>= xv09 xv16) => <False>
Testing xv09 xv17
(= xv09 xv17) => <False>
(< xv09 xv17) => <True>
(<= xv09 xv17) => <True>
(> xv09 xv17) => <False>
(>= xv09 xv17) => <False>
Testing xv09 xv18
(= xv09 xv18) => <False>
(< xv09 xv18) => <True>
(<= xv09 xv18) => <True>
(> xv09 xv18) => <False>
(>= xv09 xv18) => <False>
Testing xv09 xv19
(= xv09 xv19) => <False>
(< xv09 xv19) => <True>
(<= xv09 xv19) => <True>
(> xv09 xv19) => <False>
(>= xv09 xv19) => <False>
Testing xv09 xv20
(= xv09 xv20) => <False>
(< xv09 xv20) => <True>
(<= xv09 xv20) => <True>
(> xv09 xv20) => <False>
(>= xv09 xv20) => <False>
Testing xv10 xv01
(= xv10 xv01) => <False>
(< xv10 xv01) => <True>
(<= xv10 xv01) => <True>
(> xv10 xv01) => <False>
(>= xv10 xv01) => <False>
Testing xv10 xv02
(= xv10 xv02) => <False>
(< xv10 xv02) => <False>
(<= xv10 xv02) => <False>
(> xv10 xv02) => <True>
(>= xv10 xv02) => <True>
Testing xv10 xv03
(= xv10 xv03) => <False>
(< xv10 xv03) => <True>
(<= xv10 xv03) => <True>
(> xv10 xv03) => <False>
(>= xv10 xv03) => <False>
Testing xv10 xv04
(= xv10 xv04) => <False>
(< xv10 xv04) => <True>
(<= xv10 xv04) => <True>
(> xv10 xv04) => <False>
(>= xv10 xv04) => <False>
Testing xv10 xv05
(= xv10 xv05) => <False>
(< xv10 xv05) => <False>
(<= xv10 xv05) => <False>
(> xv10 xv05) => <True>
(>= xv10 xv05) => <True>
Testing xv10 xv07
(= xv10 xv07) => <False>
(< xv10 xv07) => <True>
(<= xv10 xv07) => <True>
(> xv10 xv07) => <False>
(>= xv10 xv07) => <False>
Testing xv10 xv08
(= xv10 xv08) => <False>
(< xv10 xv08) => <False>
(<= xv10 xv08) => <False>
(> xv10 xv08) => <True>
(>= xv10 xv08) => <True>
Testing xv10 xv09
(= xv10 xv09) => <False>
(< xv10 xv09) => <False>
(<= xv10 xv09) => <False>
(> xv10 xv09) => <True>
(>= xv10 xv09) => <True>
Testing xv10 xv11
(= xv10 xv11) => <False>
(< xv10 xv11) => <False>
(<= xv10 xv11) => <False>
(> xv10 xv11) => <True>
(>= xv10 xv11) => <True>
Testing xv10 xv12
(= xv10 xv12) => <False>
(< xv10 xv12) => <True>
(<= xv10 xv12) => <True>
(> xv10 xv12) => <False>
(>= xv10 xv12) => <False>
Testing xv10 xv13
(= xv10 xv13) => <False>
(< xv10 xv13) => <True>
(<= xv10 xv13) => <True>
(> xv10 xv13) => <False>
(>= xv10 xv13) => <False>
Testing xv10 xv14
(= xv10 xv14) => <False>
(< xv10 xv14) => <True>
(<= xv10 xv14) => <True>
(> xv10 xv14) => <False>
(>= xv10 xv14) => <False>
Testing xv10 xv15
(= xv10 xv15) => <False>
(< xv10 xv15) => <True>
(<= xv10 xv15) => <True>
(> xv10 xv15) => <False>
(>= xv10 xv15) => <False>
Testing xv10 xv16
(= xv10 xv16) => <False>
(< xv10 xv16) => <True>
(<= xv10 xv16) => <True>
(> xv10 xv16) => <False>
(>= xv10 xv16) => <False>
Testing xv10 xv18
(= xv10 xv18) => <False>
(< xv10 xv18) => <True>
(<= xv10 xv18) => <True>
(> xv10 xv18) => <False>
(>= xv10 xv18) => <False>
Testing xv10 xv19
(= xv10 xv19) => <False>
(< xv10 xv19) => <True>
(<= xv10 xv19) => <True>
(> xv10 xv19) => <False>
(>= xv10 xv19) => <False>
Testing xv11 xv01
(= xv11 xv01) => <False>
(< xv11 xv01) => <True>
(<= xv11 xv01) => <True>
(> xv11 xv01) => <False>
(>= xv11 xv01) => <False>
Testing xv11 xv02
(= xv11 xv02) => <False>
(< xv11 xv02) => <False>
(<= xv11 xv02) => <False>
(> xv11 xv02) => <True>
(>= xv11 xv02) => <True>
Testing xv11 xv03
(= xv11 xv03) => <False>
(< xv11 xv03) => <True>
(<= xv11 xv03) => <True>
(> xv11 xv03) => <False>
(>= xv11 xv03) => <False>
Testing xv11 xv04
(= xv11 xv04) => <False>
(< xv11 xv04) => <True>
(<= xv11 xv04) => <True>
(> xv11 xv04) => <False>
(>= xv11 xv04) => <False>
Testing xv11 xv05
(= xv11 xv05) => <False>
(< xv11 xv05) => <False>
(<= xv11 xv05) => <False>
(> xv11 xv05) => <True>
(>= xv11 xv05) => <True>
Testing xv11 xv06
(= xv11 xv06) => <False>
(< xv11 xv06) => <True>
(<= xv11 xv06) => <True>
(> xv11 xv06) => <False>
(>= xv11 xv06) => <False>
Testing xv11 xv07
(= xv11 xv07) => <False>
(< xv11 xv07) => <True>
(<= xv11 xv07) => <True>
(> xv11 xv07) => <False>
(>= xv11 xv07) => <False>
Testing xv11 xv08
(= xv11 xv08) => <False>
(< xv11 xv08) => <False>
(<= xv11 xv08) => <True>
(> xv11 xv08) => <False>
(>= xv11 xv08) => <True>
Testing xv11 xv09
(= xv11 xv09) => <False>
(< xv11 xv09) => <False>
(<= xv11 xv09) => <False>
(> xv11 xv09) => <True>
(>= xv11 xv09) => <True>
Testing xv11 xv10
(= xv11 xv10) => <False>
(< xv11 xv10) => <True>
(<= xv11 xv10) => <True>
(> xv11 xv10) => <False>
(>= xv11 xv10) => <False>
Testing xv11 xv11
(= xv11 xv11) => <True>
(< xv11 xv11) => <False>
(<= xv11 xv11) => <True>
(> xv11 xv11) => <False>
(>= xv11 xv11) => <True>
Testing xv11 xv12
(= xv11 xv12) => <False>
(< xv11 xv12) => <True>
(<= xv11 xv12) => <True>
(> xv11 xv12) => <False>
(>= xv11 xv12) => <False>
Testing xv11 xv13
(= xv11 xv13) => <False>
(< xv11 xv13) => <True>
(<= xv11 xv13) => <True>
(> xv11 xv13) => <False>
(>= xv11 xv13) => <False>
Testing xv11 xv14
(= xv11 xv14) => <False>
(< xv11 xv14) => <True>
(<= xv11 xv14) => <True>
(> xv11 xv14) => <False>
(>= xv11 xv14) => <False>
Testing xv11 xv15
(= xv11 xv15) => <False>
(< xv11 xv15) => <True>
(<= xv11 xv15) => <True>
(> xv11 xv15) => <False>
(>= xv11 xv15) => <False>
Testing xv11 xv16
(= xv11 xv16) => <False>
(< xv11 xv16) => <True>
(<= xv11 xv16) => <True>
(> xv11 xv16) => <False>
(>= xv11 xv16) => <False>
Testing xv11 xv17
(= xv11 xv17) => <False>
(< xv11 xv17) => <True>
(<= xv11 xv17) => <True>
(> xv11 xv17) => <False>
(>= xv11 xv17) => <False>
Testing xv11 xv18
(= xv11 xv18) => <False>
(< xv11 xv18) => <True>
(<= xv11 xv18) => <True>
(> xv11 xv18) => <False>
(>= xv11 xv18) => <False>
Testing xv11 xv19
(= xv11 xv19) => <False>
(< xv11 xv19) => <True>
(<= xv11 xv19) => <True>
(> xv11 xv19) => <False>
(>= xv11 xv19) => <False>
Testing xv11 xv20
(= xv11 xv20) => <False>
(< xv11 xv20) => <True>
(<= xv11 xv20) => <True>
(> xv11 xv20) => <False>
(>= xv11 xv20) => <False>
Testing xv12 xv01
(= xv12 xv01) => <False>
(< xv12 xv01) => <True>
(<= xv12 xv01) => <True>
(> xv12 xv01) => <False>
(>= xv12 xv01) => <False>
Testing xv12 xv02
(= xv12 xv02) => <False>
(< xv12 xv02) => <False>
(<= xv12 xv02) => <False>
(> xv12 xv02) => <True>
(>= xv12 xv02) => <True>
Testing xv12 xv03
(= xv12 xv03) => <False>
(< xv12 xv03) => <True>
(<= xv12 xv03) => <True>
(> xv12 xv03) => <False>
(>= xv12 xv03) => <False>
Testing xv12 xv04
(= xv12 xv04) => <False>
(< xv12 xv04) => <True>
(<= xv12 xv04) => <True>
(> xv12 xv04) => <False>
(>= xv12 xv04) => <False>
Testing xv12 xv05
(= xv12 xv05) => <False>
(< xv12 xv05) => <False>
(<= xv12 xv05) => <False>
(> xv12 xv05) => <True>
(>= xv12 xv05) => <True>
Testing xv12 xv06
(= xv12 xv06) => <False>
(< xv12 xv06) => <True>
(<= xv12 xv06) => <True>
(> xv12 xv06) => <False>
(>= xv12 xv06) => <False>
Testing xv12 xv07
(= xv12 xv07) => <False>
(< xv12 xv07) => <True>
(<= xv12 xv07) => <True>
(> xv12 xv07) => <False>
(>= xv12 xv07) => <False>
Testing xv12 xv08
(= xv12 xv08) => <False>
(< xv12 xv08) => <False>
(<= xv12 xv08) => <False>
(> xv12 xv08) => <True>
(>= xv12 xv08) => <True>
Testing xv12 xv09
(= xv12 xv09) => <False>
(< xv12 xv09) => <False>
(<= xv12 xv09) => <False>
(> xv12 xv09) => <True>
(>= xv12 xv09) => <True>
Testing xv12 xv10
(= xv12 xv10) => <False>
(< xv12 xv10) => <False>
(<= xv12 xv10) => <False>
(> xv12 xv10) => <True>
(>= xv12 xv10) => <True>
Testing xv12 xv11
(= xv12 xv11) => <False>
(< xv12 xv11) => <False>
(<= xv12 xv11) => <False>
(> xv12 xv11) => <True>
(>= xv12 xv11) => <True>
Testing xv12 xv12
(= xv12 xv12) => <True>
(< xv12 xv12) => <False>
(<= xv12 xv12) => <True>
(> xv12 xv12) => <False>
(>= xv12 xv12) => <True>
Testing xv12 xv13
(= xv12 xv13) => <False>
(< xv12 xv13) => <True>
(<= xv12 xv13) => <True>
(> xv12 xv13) => <False>
(>= xv12 xv13) => <False>
Testing xv12 xv14
(= xv12 xv14) => <False>
(< xv12 xv14) => <True>
(<= xv12 xv14) => <True>
(> xv12 xv14) => <False>
(>= xv12 xv14) => <False>
Testing xv12 xv15
(= xv12 xv15) => <False>
(< xv12 xv15) => <True>
(<= xv12 xv15) => <True>
(> xv12 xv15) => <False>
(>= xv12 xv15) => <False>
Testing xv12 xv16
(= xv12 xv16) => <False>
(< xv12 xv16) => <True>
(<= xv12 xv16) => <True>
(> xv12 xv16) => <False>
(>= xv12 xv16) => <False>
Testing xv12 xv17
(= xv12 xv17) => <False>
(< xv12 xv17) => <False>
(<= xv12 xv17) => <False>
(> xv12 xv17) => <True>
(>= xv12 xv17) => <True>
Testing xv12 xv18
(= xv12 xv18) => <False>
(< xv12 xv18) => <False>
(<= xv12 xv18) => <False>
(> xv12 xv18) => <True>
(>= xv12 xv18) => <True>
Testing xv12 xv19
(= xv12 xv19) => <False>
(< xv12 xv19) => <False>
(<= xv12 xv19) => <False>
(> xv12 xv19) => <True>
(>= xv12 xv19) => <True>
Testing xv12 xv20
(= xv12 xv20) => <False>
(< xv12 xv20) => <True>
(<= xv12 xv20) => <True>
(> xv12 xv20) => <False>
(>= xv12 xv20) => <False>
Testing xv13 xv01
(= xv13 xv01) => <False>
(< xv13 xv01) => <True>
(<= xv13 xv01) => <True>
(> xv13 xv01) => <False>
(>= xv13 xv01) => <False>
Testing xv13 xv02
(= xv13 xv02) => <False>
(< xv13 xv02) => <False>
(<= xv13 xv02) => <False>
(> xv13 xv02) => <True>
(>= xv13 xv02) => <True>
Testing xv13 xv03
(= xv13 xv03) => <False>
(< xv13 xv03) => <True>
(<= xv13 xv03) => <True>
(> xv13 xv03) => <False>
(>= xv13 xv03) => <False>
Testing xv13 xv04
(= xv13 xv04) => <False>
(< xv13 xv04) => <True>
(<= xv13 xv04) => <True>
(> xv13 xv04) => <False>
(>= xv13 xv04) => <False>
Testing xv13 xv05
(= xv13 xv05) => <False>
(< xv13 xv05) => <False>
(<= xv13 xv05) => <False>
(> xv13 xv05) => <True>
(>= xv13 xv05) => <True>
Testing xv13 xv06
(= xv13 xv06) => <False>
(< xv13 xv06) => <True>
(<= xv13 xv06) => <True>
(> xv13 xv06) => <False>
(>= xv13 xv06) => <False>
Testing xv13 xv07
(= xv13 xv07) => <False>
(< xv13 xv07) => <True>
(<= xv13 xv07) => <True>
(> xv13 xv07) => <False>
(>= xv13 xv07) => <False>
Testing xv13 xv08
(= xv13 xv08) => <False>
(< xv13 xv08) => <False>
(<= xv13 xv08) => <False>
(> xv13 xv08) => <True>
(>= xv13 xv08) => <True>
Testing xv13 xv09
(= xv13 xv09) => <False>
(< xv13 xv09) => <False>
(<= xv13 xv09) => <False>
(> xv13 xv09) => <True>
(>= xv13 xv09) => <True>
Testing xv13 xv10
(= xv13 xv10) => <False>
(< xv13 xv10) => <False>
(<= xv13 xv10) => <False>
(> xv13 xv10) => <True>
(>= xv13 xv10) => <True>
Testing xv13 xv11
(= xv13 xv11) => <False>
(< xv13 xv11) => <False>
(<= xv13 xv11) => <False>
(> xv13 xv11) => <True>
(>= xv13 xv11) => <True>
Testing xv13 xv12
(= xv13 xv12) => <False>
(< xv13 xv12) => <False>
(<= xv13 xv12) => <False>
(> xv13 xv12) => <True>
(>= xv13 xv12) => <True>
Testing xv13 xv13
(= xv13 xv13) => <True>
(< xv13 xv13) => <False>
(<= xv13 xv13) => <True>
(> xv13 xv13) => <False>
(>= xv13 xv13) => <True>
Testing xv13 xv14
(= xv13 xv14) => <False>
(< xv13 xv14) => <False>
(<= xv13 xv14) => <True>
(> xv13 xv14) => <False>
(>= xv13 xv14) => <True>
Testing xv13 xv15
(= xv13 xv15) => <False>
(< xv13 xv15) => <True>
(<= xv13 xv15) => <True>
(> xv13 xv15) => <False>
(>= xv13 xv15) => <False>
Testing xv13 xv16
(= xv13 xv16) => <False>
(< xv13 xv16) => <False>
(<= xv13 xv16) => <True>
(> xv13 xv16) => <False>
(>= xv13 xv16) => <True>
Testing xv13 xv17
(= xv13 xv17) => <False>
(< xv13 xv17) => <False>
(<= xv13 xv17) => <False>
(> xv13 xv17) => <True>
(>= xv13 xv17) => <True>
Testing xv13 xv18
(= xv13 xv18) => <False>
(< xv13 xv18) => <False>
(<= xv13 xv18) => <False>
(> xv13 xv18) => <True>
(>= xv13 xv18) => <True>
Testing xv13 xv19
(= xv13 xv19) => <False>
(< xv13 xv19) => <False>
(<= xv13 xv19) => <False>
(> xv13 xv19) => <True>
(>= xv13 xv19) => <True>
Testing xv13 xv20
(= xv13 xv20) => <False>
(< xv13 xv20) => <True>
(<= xv13 xv20) => <True>
(> xv13 xv20) => <False>
(>= xv13 xv20) => <False>
Testing xv14 xv01
(= xv14 xv01) => <False>
(< xv14 xv01) => <True>
(<= xv14 xv01) => <True>
(> xv14 xv01) => <False>
(>= xv14 xv01) => <False>
Testing xv14 xv02
(= xv14 xv02) => <False>
(< xv14 xv02) => <False>
(<= xv14 xv02) => <False>
(> xv14 xv02) => <True>
(>= xv14 xv02) => <True>
Testing xv14 xv03
(= xv14 xv03) => <False>
(< xv14 xv03) => <True>
(<= xv14 xv03) => <True>
(> xv14 xv03) => <False>
(>= xv14 xv03) => <False>
Testing xv14 xv04
(= xv14 xv04) => <False>
(< xv14 xv04) => <True>
(<= xv14 xv04) => <True>
(> xv14 xv04) => <False>
(>= xv14 xv04) => <False>
Testing xv14 xv05
(= xv14 xv05) => <False>
(< xv14 xv05) => <False>
(<= xv14 xv05) => <False>
(> xv14 xv05) => <True>
(>= xv14 xv05) => <True>
Testing xv14 xv06
(= xv14 xv06) => <False>
(< xv14 xv06) => <True>
(<= xv14 xv06) => <True>
(> xv14 xv06) => <False>
(>= xv14 xv06) => <False>
Testing xv14 xv07
(= xv14 xv07) => <False>
(< xv14 xv07) => <True>
(<= xv14 xv07) => <True>
(> xv14 xv07) => <False>
(>= xv14 xv07) => <False>
Testing xv14 xv08
(= xv14 xv08) => <False>
(< xv14 xv08) => <False>
(<= xv14 xv08) => <False>
(> xv14 xv08) => <True>
(>= xv14 xv08) => <True>
Testing xv14 xv09
(= xv14 xv09) => <False>
(< xv14 xv09) => <False>
(<= xv14 xv09) => <False>
(> xv14 xv09) => <True>
(>= xv14 xv09) => <True>
Testing xv14 xv10
(= xv14 xv10) => <False>
(< xv14 xv10) => <False>
(<= xv14 xv10) => <False>
(> xv14 xv10) => <True>
(>= xv14 xv10) => <True>
Testing xv14 xv11
(= xv14 xv11) => <False>
(< xv14 xv11) => <False>
(<= xv14 xv11) => <False>
(> xv14 xv11) => <True>
(>= xv14 xv11) => <True>
Testing xv14 xv12
(= xv14 xv12) => <False>
(< xv14 xv12) => <False>
(<= xv14 xv12) => <False>
(> xv14 xv12) => <True>
(>= xv14 xv12) => <True>
Testing xv14 xv13
(= xv14 xv13) => <False>
(< xv14 xv13) => <False>
(<= xv14 xv13) => <True>
(> xv14 xv13) => <False>
(>= xv14 xv13) => <True>
Testing xv14 xv14
(= xv14 xv14) => <True>
(< xv14 xv14) => <False>
(<= xv14 xv14) => <True>
(> xv14 xv14) => <False>
(>= xv14 xv14) => <True>
Testing xv14 xv15
(= xv14 xv15) => <False>
(< xv14 xv15) => <True>
(<= xv14 xv15) => <True>
(> xv14 xv15) => <False>
(>= xv14 xv15) => <False>
Testing xv14 xv16
(= xv14 xv16) => <False>
(< xv14 xv16) => <False>
(<= xv14 xv16) => <True>
(> xv14 xv16) => <False>
(>= xv14 xv16) => <True>
Testing xv14 xv17
(= xv14 xv17) => <False>
(< xv14 xv17) => <False>
(<= xv14 xv17) => <False>
(> xv14 xv17) => <True>
(>= xv14 xv17) => <True>
Testing xv14 xv18
(= xv14 xv18) => <False>
(< xv14 xv18) => <False>
(<= xv14 xv18) => <False>
(> xv14 xv18) => <True>
(>= xv14 xv18) => <True>
Testing xv14 xv19
(= xv14 xv19) => <False>
(< xv14 xv19) => <False>
(<= xv14 xv19) => <False>
(> xv14 xv19) => <True>
(>= xv14 xv19) => <True>
Testing xv14 xv20
(= xv14 xv20) => <False>
(< xv14 xv20) => <True>
(<= xv14 xv20) => <True>
(> xv14 xv20) => <False>
(>= xv14 xv20) => <False>
Testing xv15 xv01
(= xv15 xv01) => <False>
(< xv15 xv01) => <False>
(<= xv15 xv01) => <False>
(> xv15 xv01) => <True>
(>= xv15 xv01) => <True>
Testing xv15 xv02
(= xv15 xv02) => <False>
(< xv15 xv02) => <False>
(<= xv15 xv02) => <False>
(> xv15 xv02) => <True>
(>= xv15 xv02) => <True>
Testing xv15 xv03
(= xv15 xv03) => <False>
(< xv15 xv03) => <False>
(<= xv15 xv03) => <False>
(> xv15 xv03) => <True>
(>= xv15 xv03) => <True>
Testing xv15 xv04
(= xv15 xv04) => <False>
(< xv15 xv04) => <False>
(<= xv15 xv04) => <True>
(> xv15 xv04) => <False>
(>= xv15 xv04) => <True>
Testing xv15 xv05
(= xv15 xv05) => <False>
(< xv15 xv05) => <False>
(<= xv15 xv05) => <False>
(> xv15 xv05) => <True>
(>= xv15 xv05) => <True>
Testing xv15 xv06
(= xv15 xv06) => <False>
(< xv15 xv06) => <False>
(<= xv15 xv06) => <False>
(> xv15 xv06) => <True>
(>= xv15 xv06) => <True>
Testing xv15 xv07
(= xv15 xv07) => <False>
(< xv15 xv07) => <True>
(<= xv15 xv07) => <True>
(> xv15 xv07) => <False>
(>= xv15 xv07) => <False>
Testing xv15 xv08
(= xv15 xv08) => <False>
(< xv15 xv08) => <False>
(<= xv15 xv08) => <False>
(> xv15 xv08) => <True>
(>= xv15 xv08) => <True>
Testing xv15 xv09
(= xv15 xv09) => <False>
(< xv15 xv09) => <False>
(<= xv15 xv09) => <False>
(> xv15 xv09) => <True>
(>= xv15 xv09) => <True>
Testing xv15 xv10
(= xv15 xv10) => <False>
(< xv15 xv10) => <False>
(<= xv15 xv10) => <False>
(> xv15 xv10) => <True>
(>= xv15 xv10) => <True>
Testing xv15 xv11
(= xv15 xv11) => <False>
(< xv15 xv11) => <False>
(<= xv15 xv11) => <False>
(> xv15 xv11) => <True>
(>= xv15 xv11) => <True>
Testing xv15 xv12
(= xv15 xv12) => <False>
(< xv15 xv12) => <False>
(<= xv15 xv12) => <False>
(> xv15 xv12) => <True>
(>= xv15 xv12) => <True>
Testing xv15 xv13
(= xv15 xv13) => <False>
(< xv15 xv13) => <False>
(<= xv15 xv13) => <False>
(> xv15 xv13) => <True>
(>= xv15 xv13) => <True>
Testing xv15 xv14
(= xv15 xv14) => <False>
(< xv15 xv14) => <False>
(<= xv15 xv14) => <False>
(> xv15 xv14) => <True>
(>= xv15 xv14) => <True>
Testing xv15 xv15
(= xv15 xv15) => <True>
(< xv15 xv15) => <False>
(<= xv15 xv15) => <True>
(> xv15 xv15) => <False>
(>= xv15 xv15) => <True>
Testing xv15 xv16
(= xv15 xv16) => <False>
(< xv15 xv16) => <False>
(<= xv15 xv16) => <False>
(> xv15 xv16) => <True>
(>= xv15 xv16) => <True>
Testing xv15 xv17
(= xv15 xv17) => <False>
(< xv15 xv17) => <False>
(<= xv15 xv17) => <False>
(> xv15 xv17) => <True>
(>= xv15 xv17) => <True>
Testing xv15 xv18
(= xv15 xv18) => <False>
(< xv15 xv18) => <False>
(<= xv15 xv18) => <False>
(> xv15 xv18) => <True>
(>= xv15 xv18) => <True>
Testing xv15 xv19
(= xv15 xv19) => <False>
(< xv15 xv19) => <False>
(<= xv15 xv19) => <False>
(> xv15 xv19) => <True>
(>= xv15 xv19) => <True>
Testing xv15 xv20
(= xv15 xv20) => <False>
(< xv15 xv20) => <False>
(<= xv15 xv20) => <False>
(> xv15 xv20) => <True>
(>= xv15 xv20) => <True>
Testing xv16 xv01
(= xv16 xv01) => <False>
(< xv16 xv01) => <True>
(<= xv16 xv01) => <True>
(> xv16 xv01) => <False>
(>= xv16 xv01) => <False>
Testing xv16 xv02
(= xv16 xv02) => <False>
(< xv16 xv02) => <False>
(<= xv16 xv02) => <False>
(> xv16 xv02) => <True>
(>= xv16 xv02) => <True>
Testing xv16 xv03
(= xv16 xv03) => <False>
(< xv16 xv03) => <True>
(<= xv16 xv03) => <True>
(> xv16 xv03) => <False>
(>= xv16 xv03) => <False>
Testing xv16 xv04
(= xv16 xv04) => <False>
(< xv16 xv04) => <True>
(<= xv16 xv04) => <True>
(> xv16 xv04) => <False>
(>= xv16 xv04) => <False>
Testing xv16 xv05
(= xv16 xv05) => <False>
(< xv16 xv05) => <False>
(<= xv16 xv05) => <False>
(> xv16 xv05) => <True>
(>= xv16 xv05) => <True>
Testing xv16 xv06
(= xv16 xv06) => <False>
(< xv16 xv06) => <True>
(<= xv16 xv06) => <True>
(> xv16 xv06) => <False>
(>= xv16 xv06) => <False>
Testing xv16 xv07
(= xv16 xv07) => <False>
(< xv16 xv07) => <True>
(<= xv16 xv07) => <True>
(> xv16 xv07) => <False>
(>= xv16 xv07) => <False>
Testing xv16 xv08
(= xv16 xv08) => <False>
(< xv16 xv08) => <False>
(<= xv16 xv08) => <False>
(> xv16 xv08) => <True>
(>= xv16 xv08) => <True>
Testing xv16 xv09
(= xv16 xv09) => <False>
(< xv16 xv09) => <False>
(<= xv16 xv09) => <False>
(> xv16 xv09) => <True>
(>= xv16 xv09) => <True>
Testing xv16 xv10
(= xv16 xv10) => <False>
(< xv16 xv10) => <False>
(<= xv16 xv10) => <False>
(> xv16 xv10) => <True>
(>= xv16 xv10) => <True>
Testing xv16 xv11
(= xv16 xv11) => <False>
(< xv16 xv11) => <False>
(<= xv16 xv11) => <False>
(> xv16 xv11) => <True>
(>= xv16 xv11) => <True>
Testing xv16 xv12
(= xv16 xv12) => <False>
(< xv16 xv12) => <False>
(<= xv16 xv12) => <False>
(> xv16 xv12) => <True>
(>= xv16 xv12) => <True>
Testing xv16 xv13
(= xv16 xv13) => <False>
(< xv16 xv13) => <False>
(<= xv16 xv13) => <True>
(> xv16 xv13) => <False>
(>= xv16 xv13) => <True>
Testing xv16 xv14
(= xv16 xv14) => <False>
(< xv16 xv14) => <False>
(<= xv16 xv14) => <True>
(> xv16 xv14) => <False>
(>= xv16 xv14) => <True>
Testing xv16 xv15
(= xv16 xv15) => <False>
(< xv16 xv15) => <True>
(<= xv16 xv15) => <True>
(> xv16 xv15) => <False>
(>= xv16 xv15) => <False>
Testing xv16 xv16
(= xv16 xv16) => <True>
(< xv16 xv16) => <False>
(<= xv16 xv16) => <True>
(> xv16 xv16) => <False>
(>= xv16 xv16) => <True>
Testing xv16 xv17
(= xv16 xv17) => <False>
(< xv16 xv17) => <False>
(<= xv16 xv17) => <False>
(> xv16 xv17) => <True>
(>= xv16 xv17) => <True>
Testing xv16 xv18
(= xv16 xv18) => <False>
(< xv16 xv18) => <False>
(<= xv16 xv18) => <False>
(> xv16 xv18) => <True>
(>= xv16 xv18) => <True>
Testing xv16 xv19
(= xv16 xv19) => <False>
(< xv16 xv19) => <False>
(<= xv16 xv19) => <False>
(> xv16 xv19) => <True>
(>= xv16 xv19) => <True>
Testing xv16 xv20
(= xv16 xv20) => <False>
(< xv16 xv20) => <True>
(<= xv16 xv20) => <True>
(> xv16 xv20) => <False>
(>= xv16 xv20) => <False>
Testing xv17 xv01
(= xv17 xv01) => <False>
(< xv17 xv01) => <True>
(<= xv17 xv01) => <True>
(> xv17 xv01) => <False>
(>= xv17 xv01) => <False>
Testing xv17 xv02
(= xv17 xv02) => <False>
(< xv17 xv02) => <False>
(<= xv17 xv02) => <False>
(> xv17 xv02) => <True>
(>= xv17 xv02) => <True>
Testing xv17 xv03
(= xv17 xv03) => <False>
(< xv17 xv03) => <True>
(<= xv17 xv03) => <True>
(> xv17 xv03) => <False>
(>= xv17 xv03) => <False>
Testing xv17 xv04
(= xv17 xv04) => <False>
(< xv17 xv04) => <True>
(<= xv17 xv04) => <True>
(> xv17 xv04) => <False>
(>= xv17 xv04) => <False>
Testing xv17 xv05
(= xv17 xv05) => <False>
(< xv17 xv05) => <False>
(<= xv17 xv05) => <False>
(> xv17 xv05) => <True>
(>= xv17 xv05) => <True>
Testing xv17 xv07
(= xv17 xv07) => <False>
(< xv17 xv07) => <True>
(<= xv17 xv07) => <True>
(> xv17 xv07) => <False>
(>= xv17 xv07) => <False>
Testing xv17 xv08
(= xv17 xv08) => <False>
(< xv17 xv08) => <False>
(<= xv17 xv08) => <False>
(> xv17 xv08) => <True>
(>= xv17 xv08) => <True>
Testing xv17 xv09
(= xv17 xv09) => <False>
(< xv17 xv09) => <False>
(<= xv17 xv09) => <False>
(> xv17 xv09) => <True>
(>= xv17 xv09) => <True>
Testing xv17 xv11
(= xv17 xv11) => <False>
(< xv17 xv11) => <False>
(<= xv17 xv11) => <False>
(> xv17 xv11) => <True>
(>= xv17 xv11) => <True>
Testing xv17 xv12
(= xv17 xv12) => <False>
(< xv17 xv12) => <True>
(<= xv17 xv12) => <True>
(> xv17 xv12) => <False>
(>= xv17 xv12) => <False>
Testing xv17 xv13
(= xv17 xv13) => <False>
(< xv17 xv13) => <True>
(<= xv17 xv13) => <True>
(> xv17 xv13) => <False>
(>= xv17 xv13) => <False>
Testing xv17 xv14
(= xv17 xv14) => <False>
(< xv17 xv14) => <True>
(<= xv17 xv14) => <True>
(> xv17 xv14) => <False>
(>= xv17 xv14) => <False>
Testing xv17 xv15
(= xv17 xv15) => <False>
(< xv17 xv15) => <True>
(<= xv17 xv15) => <True>
(> xv17 xv15) => <False>
(>= xv17 xv15) => <False>
Testing xv17 xv16
(= xv17 xv16) => <False>
(< xv17 xv16) => <True>
(<= xv17 xv16) => <True>
(> xv17 xv16) => <False>
(>= xv17 xv16) => <False>
Testing xv17 xv18
(= xv17 xv18) => <False>
(< xv17 xv18) => <True>
(<= xv17 xv18) => <True>
(> xv17 xv18) => <False>
(>= xv17 xv18) => <False>
Testing xv17 xv19
(= xv17 xv19) => <False>
(< xv17 xv19) => <True>
(<= xv17 xv19) => <True>
(> xv17 xv19) => <False>
(>= xv17 xv19) => <False>
Testing xv18 xv01
(= xv18 xv01) => <False>
(< xv18 xv01) => <True>
(<= xv18 xv01) => <True>
(> xv18 xv01) => <False>
(>= xv18 xv01) => <False>
Testing xv18 xv02
(= xv18 xv02) => <False>
(< xv18 xv02) => <False>
(<= xv18 xv02) => <False>
(> xv18 xv02) => <True>
(>= xv18 xv02) => <True>
Testing xv18 xv03
(= xv18 xv03) => <False>
(< xv18 xv03) => <True>
(<= xv18 xv03) => <True>
(> xv18 xv03) => <False>
(>= xv18 xv03) => <False>
Testing xv18 xv04
(= xv18 xv04) => <False>
(< xv18 xv04) => <True>
(<= xv18 xv04) => <True>
(> xv18 xv04) => <False>
(>= xv18 xv04) => <False>
Testing xv18 xv05
(= xv18 xv05) => <False>
(< xv18 xv05) => <False>
(<= xv18 xv05) => <False>
(> xv18 xv05) => <True>
(>= xv18 xv05) => <True>
Testing xv18 xv06
(= xv18 xv06) => <False>
(< xv18 xv06) => <True>
(<= xv18 xv06) => <True>
(> xv18 xv06) => <False>
(>= xv18 xv06) => <False>
Testing xv18 xv07
(= xv18 xv07) => <False>
(< xv18 xv07) => <True>
(<= xv18 xv07) => <True>
(> xv18 xv07) => <False>
(>= xv18 xv07) => <False>
Testing xv18 xv08
(= xv18 xv08) => <False>
(< xv18 xv08) => <False>
(<= xv18 xv08) => <False>
(> xv18 xv08) => <True>
(>= xv18 xv08) => <True>
Testing xv18 xv09
(= xv18 xv09) => <False>
(< xv18 xv09) => <False>
(<= xv18 xv09) => <False>
(> xv18 xv09) => <True>
(>= xv18 xv09) => <True>
Testing xv18 xv10
(= xv18 xv10) => <False>
(< xv18 xv10) => <False>
(<= xv18 xv10) => <False>
(> xv18 xv10) => <True>
(>= xv18 xv10) => <True>
Testing xv18 xv11
(= xv18 xv11) => <False>
(< xv18 xv11) => <False>
(<= xv18 xv11) => <False>
(> xv18 xv11) => <True>
(>= xv18 xv11) => <True>
Testing xv18 xv12
(= xv18 xv12) => <False>
(< xv18 xv12) => <True>
(<= xv18 xv12) => <True>
(> xv18 xv12) => <False>
(>= xv18 xv12) => <False>
Testing xv18 xv13
(= xv18 xv13) => <False>
(< xv18 xv13) => <True>
(<= xv18 xv13) => <True>
(> xv18 xv13) => <False>
(>= xv18 xv13) => <False>
Testing xv18 xv14
(= xv18 xv14) => <False>
(< xv18 xv14) => <True>
(<= xv18 xv14) => <True>
(> xv18 xv14) => <False>
(>= xv18 xv14) => <False>
Testing xv18 xv15
(= xv18 xv15) => <False>
(< xv18 xv15) => <True>
(<= xv18 xv15) => <True>
(> xv18 xv15) => <False>
(>= xv18 xv15) => <False>
Testing xv18 xv16
(= xv18 xv16) => <False>
(< xv18 xv16) => <True>
(<= xv18 xv16) => <True>
(> xv18 xv16) => <False>
(>= xv18 xv16) => <False>
Testing xv18 xv17
(= xv18 xv17) => <False>
(< xv18 xv17) => <False>
(<= xv18 xv17) => <False>
(> xv18 xv17) => <True>
(>= xv18 xv17) => <True>
Testing xv18 xv18
(= xv18 xv18) => <True>
(< xv18 xv18) => <False>
(<= xv18 xv18) => <True>
(> xv18 xv18) => <False>
(>= xv18 xv18) => <True>
Testing xv18 xv19
(= xv18 xv19) => <False>
(< xv18 xv19) => <True>
(<= xv18 xv19) => <True>
(> xv18 xv19) => <False>
(>= xv18 xv19) => <False>
Testing xv18 xv20
(= xv18 xv20) => <False>
(< xv18 xv20) => <True>
(<= xv18 xv20) => <True>
(> xv18 xv20) => <False>
(>= xv18 xv20) => <False>
Testing xv19 xv01
(= xv19 xv01) => <False>
(< xv19 xv01) => <True>
(<= xv19 xv01) => <True>
(> xv19 xv01) => <False>
(>= xv19 xv01) => <False>
Testing xv19 xv02
(= xv19 xv02) => <False>
(< xv19 xv02) => <False>
(<= xv19 xv02) => <False>
(> xv19 xv02) => <True>
(>= xv19 xv02) => <True>
Testing xv19 xv03
(= xv19 xv03) => <False>
(< xv19 xv03) => <True>
(<= xv19 xv03) => <True>
(> xv19 xv03) => <False>
(>= xv19 xv03) => <False>
Testing xv19 xv04
(= xv19 xv04) => <False>
(< xv19 xv04) => <True>
(<= xv19 xv04) => <True>
(> xv19 xv04) => <False>
(>= xv19 xv04) => <False>
Testing xv19 xv05
(= xv19 xv05) => <False>
(< xv19 xv05) => <False>
(<= xv19 xv05) => <False>
(> xv19 xv05) => <True>
(>= xv19 xv05) => <True>
Testing xv19 xv06
(= xv19 xv06) => <False>
(< xv19 xv06) => <True>
(<= xv19 xv06) => <True>
(> xv19 xv06) => <False>
(>= xv19 xv06) => <False>
Testing xv19 xv07
(= xv19 xv07) => <False>
(< xv19 xv07) => <True>
(<= xv19 xv07) => <True>
(> xv19 xv07) => <False>
(>= xv19 xv07) => <False>
Testing xv19 xv08
(= xv19 xv08) => <False>
(< xv19 xv08) => <False>
(<= xv19 xv08) => <False>
(> xv19 xv08) => <True>
(>= xv19 xv08) => <True>
Testing xv19 xv09
(= xv19 xv09) => <False>
(< xv19 xv09) => <False>
(<= xv19 xv09) => <False>
(> xv19 xv09) => <True>
(>= xv19 xv09) => <True>
Testing xv19 xv10
(= xv19 xv10) => <False>
(< xv19 xv10) => <False>
(<= xv19 xv10) => <False>
(> xv19 xv10) => <True>
(>= xv19 xv10) => <True>
Testing xv19 xv11
(= xv19 xv11) => <False>
(< xv19 xv11) => <False>
(<= xv19 xv11) => <False>
(> xv19 xv11) => <True>
(>= xv19 xv11) => <True>
Testing xv19 xv12
(= xv19 xv12) => <False>
(< xv19 xv12) => <True>
(<= xv19 xv12) => <True>
(> xv19 xv12) => <False>
(>= xv19 xv12) => <False>
Testing xv19 xv13
(= xv19 xv13) => <False>
(< xv19 xv13) => <True>
(<= xv19 xv13) => <True>
(> xv19 xv13) => <False>
(>= xv19 xv13) => <False>
Testing xv19 xv14
(= xv19 xv14) => <False>
(< xv19 xv14) => <True>
(<= xv19 xv14) => <True>
(> xv19 xv14) => <False>
(>= xv19 xv14) => <False>
Testing xv19 xv15
(= xv19 xv15) => <False>
(< xv19 xv15) => <True>
(<= xv19 xv15) => <True>
(> xv19 xv15) => <False>
(>= xv19 xv15) => <False>
Testing xv19 xv16
(= xv19 xv16) => <False>
(< xv19 xv16) => <True>
(<= xv19 xv16) => <True>
(> xv19 xv16) => <False>
(>= xv19 xv16) => <False>
Testing xv19 xv17
(= xv19 xv17) => <False>
(< xv19 xv17) => <False>
(<= xv19 xv17) => <False>
(> xv19 xv17) => <True>
(>= xv19 xv17) => <True>
Testing xv19 xv18
(= xv19 xv18) => <False>
(< xv19 xv18) => <False>
(<= xv19 xv18) => <False>
(> xv19 xv18) => <True>
(>= xv19 xv18) => <True>
Testing xv19 xv19
(= xv19 xv19) => <True>
(< xv19 xv19) => <False>
(<= xv19 xv19) => <True>
(> xv19 xv19) => <False>
(>= xv19 xv19) => <True>
Testing xv19 xv20
(= xv19 xv20) => <False>
(< xv19 xv20) => <True>
(<= xv19 xv20) => <True>
(> xv19 xv20) => <False>
(>= xv19 xv20) => <False>
Testing xv20 xv01
(= xv20 xv01) => <False>
(< xv20 xv01) => <False>
(<= xv20 xv01) => <False>
(> xv20 xv01) => <True>
(>= xv20 xv01) => <True>
Testing xv20 xv02
(= xv20 xv02) => <False>
(< xv20 xv02) => <False>
(<= xv20 xv02) => <False>
(> xv20 xv02) => <True>
(>= xv20 xv02) => <True>
Testing xv20 xv03
(= xv20 xv03) => <False>
(< xv20 xv03) => <False>
(<= xv20 xv03) => <False>
(> xv20 xv03) => <True>
(>= xv20 xv03) => <True>
Testing xv20 xv04
(= xv20 xv04) => <False>
(< xv20 xv04) => <True>
(<= xv20 xv04) => <True>
(> xv20 xv04) => <False>
(>= xv20 xv04) => <False>
Testing xv20 xv05
(= xv20 xv05) => <False>
(< xv20 xv05) => <False>
(<= xv20 xv05) => <False>
(> xv20 xv05) => <True>
(>= xv20 xv05) => <True>
Testing xv20 xv07
(= xv20 xv07) => <False>
(< xv20 xv07) => <True>
(<= xv20 xv07) => <True>
(> xv20 xv07) => <False>
(>= xv20 xv07) => <False>
Testing xv20 xv08
(= xv20 xv08) => <False>
(< xv20 xv08) => <False>
(<= xv20 xv08) => <False>
(> xv20 xv08) => <True>
(>= xv20 xv08) => <True>
Testing xv20 xv09
(= xv20 xv09) => <False>
(< xv20 xv09) => <False>
(<= xv20 xv09) => <False>
(> xv20 xv09) => <True>
(>= xv20 xv09) => <True>
Testing xv20 xv11
(= xv20 xv11) => <False>
(< xv20 xv11) => <False>
(<= xv20 xv11) => <False>
(> xv20 xv11) => <True>
(>= xv20 xv11) => <True>
Testing xv20 xv12
(= xv20 xv12) => <False>
(< xv20 xv12) => <False>
(<= xv20 xv12) => <False>
(> xv20 xv12) => <True>
(>= xv20 xv12) => <True>
Testing xv20 xv13
(= xv20 xv13) => <False>
(< xv20 xv13) => <False>
(<= xv20 xv13) => <False>
(> xv20 xv13) => <True>
(>= xv20 xv13) => <True>
Testing xv20 xv14
(= xv20 xv14) => <False>
(< xv20 xv14) => <False>
(<= xv20 xv14) => <False>
(> xv20 xv14) => <True>
(>= xv20 xv14) => <True>
Testing xv20 xv15
(= xv20 xv15) => <False>
(< xv20 xv15) => <True>
(<= xv20 xv15) => <True>
(> xv20 xv15) => <False>
(>= xv20 xv15) => <False>
Testing xv20 xv16
(= xv20 xv16) => <False>
(< xv20 xv16) => <False>
(<= xv20 xv16) => <False>
(> xv20 xv16) => <True>
(>= xv20 xv16) => <True>
Testing xv20 xv18
(= xv20 xv18) => <False>
(< xv20 xv18) => <False>
(<= xv20 xv18) => <False>
(> xv20 xv18) => <True>
(>= xv20 xv18) => <True>
Testing xv20 xv19
(= xv20 xv19) => <False>
(< xv20 xv19) => <False>
(<= xv20 xv19) => <False>
(> xv20 xv19) => <True>
(>= xv20 xv19) => <True>

##########
Testing xv21
(debug xv21) => BlockXVector(10,<BlockFn3>)
(size xv21) => 10
(print xv21) => << 1/1 1/2 1/3 1/4 1/5 1/6 1/7 1/8 1/9 1/10 >>
(at:ifAbsent: xv21 xv21 0) => 1/1
(at:ifAbsent: xv21 xv21 1) => 1/2
(at:ifAbsent: xv21 xv21 2) => 1/3
(at:ifAbsent: xv21 xv21 3) => 1/4
(at:ifAbsent: xv21 xv21 4) => 1/5
(at:ifAbsent: xv21 xv21 5) => 1/6
(at:ifAbsent: xv21 7) => 1/8
(at:ifAbsent: xv21 8) => 1/9
(at:ifAbsent: xv21 9) => 1/10
(at:ifAbsent: xv21 1073741823) => nil
(at:ifAbsent: xv21 1073741824) => nil
(at:ifAbsent: xv21 1073741825) => nil
(at:ifAbsent: xv21 -5) => 1/6
(at:ifAbsent: xv21 -4) => 1/7
(at:ifAbsent: xv21 -3) => 1/8
(at:ifAbsent: xv21 -2) => 1/9
(at:ifAbsent: xv21 -1) => 1/10
(at:ifAbsent: xv21 -1073741825) => nil
(at:ifAbsent: xv21 -1073741824) => nil
(at:ifAbsent: xv21 -1073741823) => nil
(at:ifAbsent: xv21 -9) => 1/2
(at:ifAbsent: xv21 -8) => 1/3
(at:ifAbsent: xv21 -7) => 1/4
(allMag xv21) => <True>
(allNum xv21) => <True>
(allInt xv21) => <False>
(allFrac xv21) => <True>
(someFrac xv21) => <True>
(allFloat xv21) => <False>
(someFloat xv21) => <False>
(min xv21) => 1/10
(max xv21) => 1/1
(sum xv21) => 7381/2520
(product xv21) => 1/3628800
(detect:ifNone: xv21 negative) => nil
(detect:ifNone: xv21 nonnegative) => 1/1
(detect:ifNone: xv21 strictlyPositive) => 1/1
(= xv21 xv21) => <True>
(< xv21 xv21) => <False>
(<= xv21 xv21) => <True>
(> xv21 xv21) => <False>
(>= xv21 xv21) => <True>
(= xv21 nil) => <False>
(= xv21 nil) => <False>
(= xv21 <True>) => <False>
(= xv21 <False>) => <False>
(= xv21 0) => <False>
(= xv21 1) => <False>
(= xv21 42) => <False>
(fromIndex:toIndex: xv21 0 0) => << 1/1 >>
(fromIndex:toIndex: xv21 0 1) => << 1/1 1/2 >>
(fromIndex:toIndex: xv21 0 2) => << 1/1 1/2 1/3 >>
(fromIndex:toIndex: xv21 0 4) => << 1/1 1/2 1/3 1/4 1/5 >>
(fromIndex:toIndex: xv21 1 1) => << 1/2 >>
(fromIndex:toIndex: xv21 1 3) => << 1/2 1/3 1/4 >>
(fromIndex:toIndex: xv21 -1 -1) => << 1/10 >>
(fromIndex:toIndex: xv21 -2 -1) => << 1/9 1/10 >>
(fromIndex:toIndex: xv21 -3 -1) => << 1/8 1/9 1/10 >>
(fromIndex:toIndex: xv21 -5 -1) => << 1/6 1/7 1/8 1/9 1/10 >>
(fromIndex:toIndex: xv21 -2 -2) => << 1/9 >>
(fromIndex:toIndex: xv21 -4 -2) => << 1/7 1/8 1/9 >>
(fromIndex:toIndex: xv21 -1 0) => << 1/10 1/1 >>
(fromIndex:toIndex: xv21 -2 1) => << 1/9 1/10 1/1 1/2 >>
(fromIndex:toIndex: xv21 -3 2) => << 1/8 1/9 1/10 1/1 1/2 1/3 >>
(fromIndex:toIndex: xv21 -4 3) => << 1/7 1/8 1/9 1/10 1/1 1/2 1/3 1/4 >>
(fromIndex:toIndex: xv21 -5 4) => << 1/6 1/7 1/8 1/9 1/10 1/1 1/2 1/3 1/4 1/5 >>

##########
Testing xv22
(debug xv22) => BlockXVector(15,<BlockFn4>)
(size xv22) => 15
(print xv22) => << 0/1 1/2 4/1 1/6 8/1 1/10 12/1 1/14 16/1 1/18 20/1 1/22 24/1 1/26 28/1 >>
(at:ifAbsent: xv22 xv22 0) => 0/1
(at:ifAbsent: xv22 xv22 1) => 1/2
(at:ifAbsent: xv22 xv22 2) => 4/1
(at:ifAbsent: xv22 xv22 3) => 1/6
(at:ifAbsent: xv22 xv22 4) => 8/1
(at:ifAbsent: xv22 xv22 5) => 1/10
(at:ifAbsent: xv22 7) => 1/14
(at:ifAbsent: xv22 8) => 16/1
(at:ifAbsent: xv22 9) => 1/18
(at:ifAbsent: xv22 1073741823) => nil
(at:ifAbsent: xv22 1073741824) => nil
(at:ifAbsent: xv22 1073741825) => nil
(at:ifAbsent: xv22 -5) => 20/1
(at:ifAbsent: xv22 -4) => 1/22
(at:ifAbsent: xv22 -3) => 24/1
(at:ifAbsent: xv22 -2) => 1/26
(at:ifAbsent: xv22 -1) => 28/1
(at:ifAbsent: xv22 -1073741825) => nil
(at:ifAbsent: xv22 -1073741824) => nil
(at:ifAbsent: xv22 -1073741823) => nil
(at:ifAbsent: xv22 -9) => 12/1
(at:ifAbsent: xv22 -8) => 1/14
(at:ifAbsent: xv22 -7) => 16/1
(allMag xv22) => <True>
(allNum xv22) => <True>
(allInt xv22) => <False>
(allFrac xv22) => <True>
(someFrac xv22) => <True>
(allFloat xv22) => <False>
(someFloat xv22) => <False>
(min xv22) => 0/1
(max xv22) => 28/1
(sum xv22) => 10178149/90090
(product xv22) => 0/1
(detect:ifNone: xv22 negative) => nil
(detect:ifNone: xv22 nonnegative) => 0/1
(detect:ifNone: xv22 strictlyPositive) => 1/2
(= xv22 xv22) => <True>
(< xv22 xv22) => <False>
(<= xv22 xv22) => <True>
(> xv22 xv22) => <False>
(>= xv22 xv22) => <True>
(= xv22 nil) => <False>
(= xv22 nil) => <False>
(= xv22 <True>) => <False>
(= xv22 <False>) => <False>
(= xv22 0) => <False>
(= xv22 1) => <False>
(= xv22 42) => <False>
(fromIndex:toIndex: xv22 0 0) => << 0/1 >>
(fromIndex:toIndex: xv22 0 1) => << 0/1 1/2 >>
(fromIndex:toIndex: xv22 0 2) => << 0/1 1/2 4/1 >>
(fromIndex:toIndex: xv22 0 4) => << 0/1 1/2 4/1 1/6 8/1 >>
(fromIndex:toIndex: xv22 1 1) => << 1/2 >>
(fromIndex:toIndex: xv22 1 3) => << 1/2 4/1 1/6 >>
(fromIndex:toIndex: xv22 -1 -1) => << 28/1 >>
(fromIndex:toIndex: xv22 -2 -1) => << 1/26 28/1 >>
(fromIndex:toIndex: xv22 -3 -1) => << 24/1 1/26 28/1 >>
(fromIndex:toIndex: xv22 -5 -1) => << 20/1 1/22 24/1 1/26 28/1 >>
(fromIndex:toIndex: xv22 -2 -2) => << 1/26 >>
(fromIndex:toIndex: xv22 -4 -2) => << 1/22 24/1 1/26 >>
(fromIndex:toIndex: xv22 -1 0) => << 28/1 0/1 >>
(fromIndex:toIndex: xv22 -2 1) => << 1/26 28/1 0/1 1/2 >>
(fromIndex:toIndex: xv22 -3 2) => << 24/1 1/26 28/1 0/1 1/2 4/1 >>
(fromIndex:toIndex: xv22 -4 3) => << 1/22 24/1 1/26 28/1 0/1 1/2 4/1 1/6 >>
(fromIndex:toIndex: xv22 -5 4) => << 20/1 1/22 24/1 1/26 28/1 0/1 1/2 4/1 1/6 8/1 >>

##########
