;; Name: Colin Reilly 
;; Time spent on assignment: 
;; Collaborators: Erik Wilson

[clause].

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; standard number predicates

between(Low,High,Low) :- Low =< High.
between(Low,High,N) :- Low =< High, LowPlusOne is Low+1, between(LowPlusOne,High,N).

max(A,B,A) :- A >= B.
max(A,B,B) :- A < B.

min(A,B,A) :- A =< B.
min(A,B,B) :- A > B.

; standard list predicates

list(nil).
list(cons(H,T)) :- list(T).

null([]).
notnull([_|_]).

head([H|T], H).
tail([H|T], T).

last([X], X).
last([H|T], X) :- last(T, X).

length([], 0).
length([H|T], N) :- length(T, M), N is M + 1.

append([], YS, YS).
append([X|XS], YS, [X|ZS]) :- append(XS, YS, ZS).

member_rec(X, [X|T]).
member_rec(X, [H|T]) :- member_rec(X, T).

member_via_append(X,L) :- append(_, [X|_], L).

member(X, L) :- member_rec(X, L).

snoc([], X, [X]).
snoc([H|T], X, [H|T_X]) :- snoc(T, X, T_X).

reverseA([], []).
reverseA([H|T], TR_H) :- reverseA(T, TR), snoc(TR, H, TR_H).

reverseB([], []).
reverseB([H|T], LR) :- reverseB(T,TR), append(TR,[H],LR).

revappendC([], L, L).
revappendC([H|T], L2, L3) :- revappendC(T, [H|L2], L3).
reverseC(L, LR) :- revappendC(L, [], LR).

reverse(L, LR) :- reverseA(L, LR).

palindrome(L) :- reverse(L, L).

zip([], YS, []).
zip(XS, [], []).
zip([X|XS], [Y|YS], [pair(X,Y)|ZS]) :- zip(XS, YS, ZS).

permutation([], []).
permutation(L, [H|T]) :- append(XS, [H|YS], L), append (XS, YS, ZS), permutation(ZS, T).

ordered([]).
ordered([A]).
ordered([A,B|L]) :- A =< B, ordered([B|L]).

naive_sort(L,SL) :- permutation(L,SL), ordered(SL).

partition(Pivot, [A|XS], [A|YS], ZS) :- A =< Pivot, partition(Pivot, XS, YS, ZS).
partition(Pivot, [A|XS], YS, [A|ZS]) :- Pivot < A,  partition(Pivot, XS, YS, ZS).
partition(Pivot, [], [], []).

quicksorted([], []).
quicksorted([X|XS], SL) :-
  partition(X, XS, Lows, Highs),
  quicksort(Lows, SLows), quicksorted(Highs, SHighs),
  appended(SLows, [X|SHighs], SL).

ofLength(0, []).
ofLength(N, [H|T]) :- N >= 1, M is N - 1, ofLength(M, T).

; predicates useful for puzzles

eqInList(X, X, L) :- member(X, L).
neqInList(X, Y, L) :- append(L1, [X|L2], L), member(Y, L1).
neqInList(X, Y, L) :- append(L1, [X|L2], L), member(Y, L2).
adjInList(X, Y, L) :- append(L1, [X,Y|L2], L).
adjInList(X, Y, L) :- append(L1, [Y,X|L2], L).
nadjInList(X, Y, L) :- append(L1, [Z,X|L2], L), member(Y, L1).
nadjInList(X, Y, L) :- append(L1, [X,Z|L2], L), member(Y, L2).
ltInList(X, Y, L) :- append(L1, [X|L2], L), member(Y, L2).
gtInList(X, Y, L) :- append(L1, [X|L2], L), member(Y, L1).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part A (sum)

;; DEFINE sum HERE
sum([], 0).
sum([H|T], Sum) :- sum(T, Rest), Sum is H + Rest.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part B (prod)

;; DEFINE prod HERE
prod([], 1).
prod([H|T], P) :- prod(T, R), P is H * R.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part C (avg)

;; DEFINE avg HERE
avg([H|T], A) :- sum([H|T], S), length([H|T], L), A is S / L.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part D (swizzle)

;; DEFINE swizzle HERE
swizzle([],L,L).
swizzle(L,[],L).
swizzle([],[],[]).
swizzle([X|XS],[Y|YS],[X,Y|L]) :- swizzle(XS,YS,L).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part E (partition)

;; DEFINE partition HERE

partition([],[]).
partition([X|Xs],[[X|Ys]|Ps]) :- 
        append(Ys,Zs,Xs), 
        partition(Zs,Ps).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part F (balanced_partition) !bonus!

;; DEFINE balanced_partition HERE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part G (msort)

;; DEFINE msort HERE 
 
merge([],RS,RS).
merge(LS,[],LS).
merge([L|LS],[R|RS],[L|T]) :- L =< R, merge(LS,[R|RS],T).
merge([L|LS],[R|RS],[R|T]) :- L > R,  merge([L|LS],RS,T).

split([],[],[]).
split([X],[X],[]).
split([L,R|T],[L|LT],[R|RT]) :- split(T,LT,RT).

msort([],[]).
msort([X],[X]).
msort([A,B|R],S) :- 
        split([A,B|R],L1,L2),
        msort(L1,S1),
        msort(L2,S2),
        merge(S1,S2,S).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part H (btreeHeight)

;; DEFINE btreeHeight HERE
btreeHeight(leaf,0).
btreeHeight(node(L,_,R), N) :- 
        btreeHeight(L,N1),
        btreeHeight(R,N2),
        max(N1,N2,N3),
        N is N3 + 1.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part I (btreeHighest)

;; DEFINE btreeHighest HERE
atlevel(node(_,X,_),1,X).
atlevel(node(L,_,_),D,S) :-
        D > 1,
        D1 is D - 1, 
        atlevel(L,D1,S).
atlevel(node(_,_,R),D,S) :-
        D > 1,
        D1 is D - 1, 
        atlevel(R,D1,S).

btreeHighest(node(L,X,R),H) :-
        btreeHeight(node(L,_,R),N),
        atlevel(node(L,X,R),N,H).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part J (btreeInternal)

;; DEFINE btreeInternal HERE
btreeInternal(leaf,[]).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part K (puzzle_soln)

;; DEFINE puzzle_soln HERE
; Alex, Bret, Chris, Derek, Eddie, Fred, Greg, Harold, and John are
; nine students who live in a three storey building, with three rooms
; on each floor. A room in the West wing, one in the centre, and one
; in the East wing. If you look directly at the building, the left
; side is West and the right side is East. Each student is assigned
; exactly one room.
;
; 1. Harold does not live on the bottom floor.
; 2. Fred lives directly above John and directly next to Bret (who lives in the West wing).
; 3. Eddie lives in the East wing and one floor higher than Fred.
; 4. Derek lives directly above Fred.
; 5. Greg lives directly above Chris.
;
; Can you find where each of their rooms is?

;;puzzle_soln(BLDG) :- 
        ;;empty_building(BLDG),
        ;;lives(alex,AW,AF,BLDG),
        ;;lives(bret,west,BF,BLDG),
        ;;lives(chris,CW,CF,BLDG),
        ;;lives(derek,center,DF,BLDG),
        ;;lives(eddie,east,EF,BLDG),
        ;;lives(fred,center,FF,BLDG),
        ;;lives(greg,GW,GF,BLDG),
        ;;lives(harold,HW,HF,BLDG),
        ;;lives(john,JW,JF,BLDG),
        ;;floor_neq(bottom,HF),
        ;;wing_eq(FW,JW),
        ;;one_floor_abv(FF,JF),
        ;;one_floor_abv(EF,FF),
        ;;one_floor_abv(DF,FF),
        ;;one_floor_abv(GF,CF),
        ;;wing_eq(GW,CW).
        

;;empty_building(building(floor(_,_,_),floor(_,_,_),floor(_,_,_))).
;;floor_eq(F,F).
;;floor_neq(bottom,middle). floor_neq(bottom,top).
;;floor_neq(middle,bottom). floor_neq(middle,top).
;;floor_neq(top,bottom). floor_neq(top,middle).
;;wing_eq(W,W).
;;wing_neq(west,center). wing_neq(west,east).
;;wing_neq(center,west). wing_neq(center,east).
;;wing_neq(east,center). wing_neq(east,west).
;;one_floor_abv(middle,bottom). one_floor_abv(top,middle).

lives(S,R,F,B) :- studentLivesInRoomOnFloorOfBldg(S,R,F,B).
studentLivesInRoomOnFloorOfBldg(S,R,bottom,building(F,_,_)) :- studentLivesInRoomOnFloor(S,R,F).
studentLivesInRoomOnFloorOfBldg(S,R,middle,building(_,F,_)) :- studentLivesInRoomOnFloor(S,R,F).
studentLivesInRoomOnFloorOfBldg(S,R,top,building(_,_,F)) :- studentLivesInRoomOnFloor(S,R,F).
studentLivesInRoomOnFloor(S,west,floor(S,_,_)).
studentLivesInRoomOnFloor(S,center,floor(_,S,_)).
studentLivesInRoomOnFloor(S,east,floor(_,_,S)).

rooms([west,center,east]).
floors([bottom,middle,top]).

empty_building(building(floor(_, _, _), floor(_, _, _), floor(_, _, _))).

floor_eq(F,F).
floor_neq(F1 , F2) :- floors(FS), neqInList(F1 , F2 , FS).
floor_adj(F1 , F2) :- floors(FS), adjInList(F1 , F2 , FS).
floor_nadj(F1 , F2) :- floors(FS), nadjInList(F1 , F2 , FS).
floor_gt(F1 , F2) :- floors(FS), gtInList(F1 , F2 , FS).

room_eq(R1 , R2)   :- rooms(RS), eqInList(R1, R2 , RS).
room_neq(R1 , R2)  :- rooms(RS), neqInList(R1, R2 , RS).
room_adj(R1 , R2)  :- rooms(RS), adjInList(R1, R2 , RS).
room_nadj(R1 , R2) :- rooms(RS), nadjInList(R1, R2 , RS).
room_gt(R1 , R2)   :- rooms(RS), gtInList(R1, R2 , RS).

puzzle_soln(BLDG) :-
  empty_building(BLDG),
  lives(alex, AR, AF, BLDG),
  lives(bret, BR, BF, BLDG),
  lives(chris, CR, CF, BLDG),
  lives(derek, DR, DF, BLDG),
  lives(eddie, ER, EF, BLDG),
  lives(fred, FR, FF, BLDG),
  lives(greg, GR, GF, BLDG),
  lives(harold, HR, HF, BLDG),
  lives(john, JR, JF, BLDG),
  floor_neq(HF, bottom),
  floor_gt(FF, JF),
  floor_adj(FF, JF),
  room_eq(FR, JR),
  floor_eq(FF, BF),
  room_adj(FR, BR),
  room_eq(BR, west),
  room_eq(ER, east),
  floor_gt(EF, FF),
  floor_adj(EF, FF),
  floor_gt(DF, FF),
  floor_adj(DF, FF),
  room_eq(DF, FF),
  floor_gt(GF, CF),
  floor_adj(GF, CF),
  room_eq(GF, CF).

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part L (re_match)

;; DEFINE re_match HERE

re_match(RE,L) :-
        RE == L, 
        append(RE,_,_).

re_match(epsilon, []).

re_match(char(A),[A]).

re_match(seq(RE1,RE2),L) :-
        append(L1,L2,L),
        re_match(RE1,L1),
        re_match(RE2,L2).

re_match(alt(RE1,RE2), L) :-
        re_match(RE1,L).
re_match(alt(RE1,RE2), L) :-
        re_match(RE2,L).

re_match(star(_),[]).
re_match(star(RE),L) :-
        append([H|T],L,L),
        re_match(star(RE),L),
        re_match(RE,[H|T]).


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Part M (re_reverse) !bonus!

;; DEFINE re_reverse HERE


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Example binary trees, for tests.
btreeEx01(leaf).
btreeEx02(node(leaf,99,leaf)).
btreeEx03(node(node(leaf,9,leaf),99,node(leaf,999,leaf))).
btreeEx04(node(node(node(leaf,9,leaf),20,leaf),30,node(node(leaf,99,leaf),33,node(leaf,1000,leaf)))).
btreeEx05(node(node(node(leaf,9,leaf),99,node(leaf,999,leaf)),9999,node(node(leaf,9,leaf),99,node(leaf,999,leaf)))).
btreeEx06(node(leaf,5,node(leaf,4,node(leaf,3,node(leaf,2,node(leaf,1,node(leaf,0,leaf))))))).
btreeEx07(node(leaf,567,node(leaf,208,node(node(leaf,509,leaf),-442,leaf)))).
btreeEx08(node(leaf,525,node(leaf,609,leaf))).
btreeEx09(node(leaf,468,node(node(node(leaf,873,node(leaf,315,node(leaf,825,node(leaf,54,node(leaf,885,leaf))))),-34,node(leaf,248,leaf)),-66,node(leaf,456,leaf)))).
btreeEx10(node(node(leaf,-696,leaf),-930,node(leaf,208,node(leaf,-364,node(node(leaf,484,leaf),-1003,node(node(node(leaf,189,node(node(node(leaf,-75,leaf),214,leaf),872,leaf)),0,node(leaf,-450,leaf)),937,leaf)))))).
btreeEx11(node(node(node(leaf,3,leaf),3,node(leaf,3,leaf)),3,node(node(leaf,3,leaf),3,node(leaf,3,leaf)))).

[query].
